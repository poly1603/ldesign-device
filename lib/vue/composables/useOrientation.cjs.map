{"version":3,"file":"useOrientation.cjs","sources":["../../../src/vue/composables/useOrientation.ts"],"sourcesContent":["import type { Ref } from 'vue'\r\nimport type { DeviceDetectorOptions, DeviceInfo, Orientation, OrientationLockType } from '../../types'\r\nimport { computed, onMounted, onUnmounted, readonly, ref } from 'vue'\r\nimport { DeviceDetector } from '../../core/DeviceDetector'\r\n\r\n/**\r\n * 屏幕方向检测 Composition API\r\n *\r\n * 提供屏幕方向检测和变化监听功能\r\n *\r\n * @param options 设备检测器配置选项\r\n * @returns 屏幕方向相关的响应式数据和方法\r\n *\r\n * @example\r\n * ```vue\r\n * <script setup>\r\n * import { useOrientation } from '@ldesign/device/vue'\r\n *\r\n * const {\r\n *   orientation,\r\n *   isPortrait,\r\n *   isLandscape,\r\n *   angle,\r\n *   lockOrientation,\r\n *   unlockOrientation,\r\n *   refresh\r\n * } = useOrientation({\r\n *   enableOrientation: true\r\n * })\r\n *\r\n * // 监听方向变化\r\n * watch(orientation, (newOrientation) => {\r\n *   \r\n * })\r\n * </script>\r\n *\r\n * <template>\r\n *   <div>\r\n *     <p>当前方向: {{ orientation }}</p>\r\n *     <p>是否竖屏: {{ isPortrait }}</p>\r\n *     <p>是否横屏: {{ isLandscape }}</p>\r\n *     <p>旋转角度: {{ angle }}°</p>\r\n *\r\n *     <button @click=\"lockOrientation('portrait')\">锁定竖屏</button>\r\n *     <button @click=\"lockOrientation('landscape')\">锁定横屏</button>\r\n *     <button @click=\"unlockOrientation\">解锁方向</button>\r\n *   </div>\r\n * </template>\r\n * ```\r\n */\r\nexport function useOrientation(options: DeviceDetectorOptions = {}) {\r\n  // 响应式状态\r\n  const orientation = ref<Orientation>('landscape') as Ref<Orientation>\r\n  const angle = ref(0)\r\n  const isLocked = ref(false)\r\n  const error = ref<string | null>(null)\r\n\r\n  // 设备检测器实例\r\n  let detector: DeviceDetector | null = null\r\n  let isInitialized = false\r\n  let cleanupFunctions: Array<() => void> = []\r\n\r\n  // 计算属性\r\n  const isPortrait = readonly(computed(() => orientation.value === 'portrait'))\r\n  const isLandscape = readonly(computed(() => orientation.value === 'landscape'))\r\n  const isPrimaryPortrait = readonly(computed(() => angle.value === 0))\r\n  const isSecondaryPortrait = readonly(computed(() => angle.value === 180))\r\n  const isPrimaryLandscape = readonly(computed(() => angle.value === 90))\r\n  const isSecondaryLandscape = readonly(computed(() => angle.value === 270))\r\n\r\n  /**\r\n   * 更新方向信息\r\n   */\r\n  const updateOrientation = (deviceInfo: DeviceInfo) => {\r\n    if (orientation.value !== deviceInfo.orientation) {\r\n      orientation.value = deviceInfo.orientation\r\n    }\r\n\r\n    // 更新角度信息\r\n    if (typeof screen !== 'undefined' && screen.orientation) {\r\n      angle.value = screen.orientation.angle || 0\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 刷新方向信息\r\n   */\r\n  const refresh = () => {\r\n    if (detector && isInitialized) {\r\n      const currentInfo = detector.getDeviceInfo()\r\n      updateOrientation(currentInfo)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 锁定屏幕方向\r\n   */\r\n  const lockOrientation = async (targetOrientation: OrientationLockType) => {\r\n    try {\r\n      if (typeof screen !== 'undefined' && (screen as any).orientation && typeof (screen as any).orientation.lock === 'function') {\r\n        await (screen as any).orientation.lock(targetOrientation)\r\n        isLocked.value = true\r\n        error.value = null\r\n      }\n      else {\r\n        throw new Error('Screen orientation lock is not supported')\r\n      }\r\n    }\n    catch (err) {\r\n      const message = err instanceof Error ? err.message : 'Failed to lock orientation'\r\n      error.value = message\r\n      console.warn('Failed to lock orientation:', err)\r\n      throw err\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 解锁屏幕方向\r\n   */\r\n  const unlockOrientation = () => {\r\n    try {\r\n      if (typeof screen !== 'undefined' && (screen as any).orientation && typeof (screen as any).orientation.unlock === 'function') {\r\n        (screen as any).orientation.unlock()\r\n        isLocked.value = false\r\n        error.value = null\r\n      }\n      else {\r\n        throw new Error('Screen orientation unlock is not supported')\r\n      }\r\n    }\n    catch (err) {\r\n      const message = err instanceof Error ? err.message : 'Failed to unlock orientation'\r\n      error.value = message\r\n      console.warn('Failed to unlock orientation:', err)\r\n      throw err\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 检查是否支持方向锁定\r\n   */\r\n  const isOrientationLockSupported = computed(() => {\r\n    return typeof screen !== 'undefined'\r\n      && (screen as any).orientation\r\n      && typeof (screen as any).orientation.lock === 'function'\r\n  })\r\n\r\n  /**\r\n   * 获取支持的方向列表\r\n   */\r\n  const getSupportedOrientations = (): OrientationLockType[] => {\r\n    // 标准的方向类型\r\n    return [\r\n      'portrait-primary',\r\n      'portrait-secondary',\r\n      'landscape-primary',\r\n      'landscape-secondary',\r\n      'portrait',\r\n      'landscape',\r\n      'natural',\r\n    ]\r\n  }\r\n\r\n  /**\r\n   * 初始化方向检测器\r\n   */\r\n  const initDetector = () => {\r\n    if (detector || isInitialized) {\r\n      return\r\n    }\r\n\r\n    try {\r\n      detector = new DeviceDetector({\r\n        enableOrientation: true,\r\n        ...options,\r\n      })\r\n      isInitialized = true\r\n\r\n      // 获取初始方向信息\r\n      updateOrientation(detector.getDeviceInfo())\r\n\r\n      // 监听方向变化\r\n      const orientationChangeHandler = (newOrientation: Orientation) => {\r\n        if (orientation.value !== newOrientation) {\r\n          orientation.value = newOrientation\r\n        }\r\n      }\r\n\r\n      const deviceChangeHandler = (deviceInfo: DeviceInfo) => {\r\n        updateOrientation(deviceInfo)\r\n      }\r\n\r\n      detector.on('orientationChange', orientationChangeHandler)\r\n      detector.on('deviceChange', deviceChangeHandler)\r\n\r\n      // 监听原生方向变化事件\r\n      const handleOrientationChange = () => {\r\n        if (typeof screen !== 'undefined' && screen.orientation) {\r\n          angle.value = screen.orientation.angle || 0\r\n        }\r\n        refresh()\r\n      }\r\n\r\n      if (typeof screen !== 'undefined' && screen.orientation) {\r\n        screen.orientation.addEventListener('change', handleOrientationChange)\r\n        cleanupFunctions.push(() => {\r\n          screen.orientation.removeEventListener('change', handleOrientationChange)\r\n        })\r\n      }\r\n\r\n      // 保存清理函数\r\n      cleanupFunctions.push(\r\n        () => detector?.off('orientationChange', orientationChangeHandler),\r\n        () => detector?.off('deviceChange', deviceChangeHandler),\r\n      )\r\n    }\r\n    catch (err) {\r\n      const message = err instanceof Error ? err.message : 'Failed to initialize orientation detector'\r\n      error.value = message\r\n      console.error('Failed to initialize orientation detector:', err)\r\n      isInitialized = false\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 销毁方向检测器\r\n   */\r\n  const destroyDetector = async () => {\r\n    try {\r\n      // 解锁方向（如果已锁定）\r\n      if (isLocked.value) {\r\n        try {\r\n          unlockOrientation()\r\n        }\n        catch {\r\n          // 忽略解锁错误\r\n        }\r\n      }\r\n\r\n      // 清理事件监听器\r\n      cleanupFunctions.forEach(cleanup => cleanup())\r\n      cleanupFunctions = []\r\n\r\n      // 销毁检测器\r\n      if (detector) {\r\n        await detector.destroy()\r\n        detector = null\r\n      }\r\n\r\n      isInitialized = false\r\n    }\r\n    catch (err) {\r\n      console.error('Failed to destroy orientation detector:', err)\r\n    }\r\n  }\r\n\r\n  // 生命周期钩子\r\n  onMounted(() => {\r\n    initDetector()\r\n  })\r\n\r\n  onUnmounted(() => {\r\n    destroyDetector()\r\n  })\r\n\r\n  return {\r\n    orientation: readonly(orientation),\r\n    angle: readonly(angle),\r\n    isLocked: readonly(isLocked),\r\n    error: readonly(error),\r\n    isPortrait,\r\n    isLandscape,\r\n    isPrimaryPortrait,\r\n    isSecondaryPortrait,\r\n    isPrimaryLandscape,\r\n    isSecondaryLandscape,\r\n    isOrientationLockSupported,\r\n    lockOrientation,\r\n    unlockOrientation,\r\n    getSupportedOrientations,\r\n    refresh,\r\n  }\r\n}\r\n"],"names":["useOrientation","options","orientation","ref","angle","isLocked","error","detector","isInitialized","cleanupFunctions","isPortrait","readonly","computed","value","isLandscape","isPrimaryPortrait","isSecondaryPortrait","isPrimaryLandscape","isSecondaryLandscape","updateOrientation","deviceInfo","screen","refresh","currentInfo","getDeviceInfo","lockOrientation","targetOrientation","lock","Error","err","message","console","warn","unlockOrientation","unlock","isOrientationLockSupported","getSupportedOrientations","initDetector","DeviceDetector","enableOrientation","orientationChangeHandler","newOrientation","deviceChangeHandler","on","handleOrientationChange","addEventListener","push","removeEventListener","off","destroyDetector","forEach","cleanup","destroy","onMounted","onUnmounted"],"mappings":"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"}