{"version":3,"file":"useBreakpoints.cjs","sources":["../../../src/vue/composables/useBreakpoints.ts"],"sourcesContent":["import type { DeviceDetectorOptions, DeviceInfo } from '../../types'\r\nimport { computed, onMounted, onUnmounted, readonly, ref } from 'vue'\r\nimport { DeviceDetector } from '../../core/DeviceDetector'\r\n\r\n/**\r\n * 断点配置接口\r\n */\r\nexport interface BreakpointConfig {\r\n  /** 移动设备断点 */\r\n  mobile: number\r\n  /** 平板设备断点 */\r\n  tablet: number\r\n  /** 桌面设备断点 */\r\n  desktop: number\r\n  /** 大屏设备断点 */\r\n  xl?: number\r\n  /** 超大屏设备断点 */\r\n  xxl?: number\r\n}\r\n\r\n/**\r\n * 默认断点配置\r\n */\r\nconst DEFAULT_BREAKPOINTS: BreakpointConfig = {\r\n  mobile: 768,\r\n  tablet: 1024,\r\n  desktop: 1200,\r\n  xl: 1400,\r\n  xxl: 1600,\r\n}\r\n\r\n/**\r\n * 响应式断点管理 Composition API\r\n *\r\n * 提供基于屏幕宽度的响应式断点检测和管理功能\r\n *\r\n * @param breakpoints 自定义断点配置\r\n * @param options 设备检测器配置选项\r\n * @returns 断点相关的响应式数据和方法\r\n *\r\n * @example\r\n * ```vue\r\n * <script setup>\r\n * import { useBreakpoints } from '@ldesign/device/vue'\r\n *\r\n * const {\r\n *   current,\r\n *   width,\r\n *   height,\r\n *   isMobile,\r\n *   isTablet,\r\n *   isDesktop,\r\n *   isXL,\r\n *   isXXL,\r\n *   greaterThan,\r\n *   lessThan,\r\n *   between,\r\n *   breakpoints\r\n * } = useBreakpoints({\r\n *   mobile: 768,\r\n *   tablet: 1024,\r\n *   desktop: 1200\r\n * })\r\n *\r\n * // 监听断点变化\r\n * watch(current, (newBreakpoint) => {\r\n *   \r\n * })\r\n * </script>\r\n *\r\n * <template>\r\n *   <div>\r\n *     <p>当前断点: {{ current }}</p>\r\n *     <p>屏幕宽度: {{ width }}px</p>\r\n *     <p>屏幕高度: {{ height }}px</p>\r\n *\r\n *     <div v-if=\"isMobile\">移动端布局</div>\r\n *     <div v-else-if=\"isTablet\">平板布局</div>\r\n *     <div v-else-if=\"isDesktop\">桌面布局</div>\r\n *\r\n *     <div v-if=\"greaterThan('tablet')\">大于平板尺寸</div>\r\n *     <div v-if=\"between('tablet', 'desktop')\">平板到桌面之间</div>\r\n *   </div>\r\n * </template>\r\n * ```\r\n */\r\nexport function useBreakpoints(\r\n  breakpoints: Partial<BreakpointConfig> = {},\r\n  options: DeviceDetectorOptions = {},\r\n) {\r\n  // 合并断点配置\r\n  const config = { ...DEFAULT_BREAKPOINTS, ...breakpoints }\r\n\r\n  // 响应式状态\r\n  const width = ref(0)\r\n  const height = ref(0)\r\n  const current = ref<keyof BreakpointConfig>('mobile')\r\n\r\n  // 设备检测器实例\r\n  let detector: DeviceDetector | null = null\r\n  let isInitialized = false\r\n  let cleanupFunctions: Array<() => void> = []\r\n\r\n  /**\r\n   * 根据宽度确定当前断点\r\n   */\r\n  const getCurrentBreakpoint = (screenWidth: number): keyof BreakpointConfig => {\r\n    if (config.xxl && screenWidth >= config.xxl)\n      return 'xxl'\r\n    if (config.xl && screenWidth >= config.xl)\n      return 'xl'\r\n    if (screenWidth >= config.desktop)\n      return 'desktop'\r\n    if (screenWidth >= config.tablet)\n      return 'tablet'\r\n    return 'mobile'\r\n  }\r\n\r\n  /**\r\n   * 更新屏幕尺寸和断点\r\n   */\r\n  const updateDimensions = (deviceInfo: DeviceInfo) => {\r\n    const newWidth = deviceInfo.screen.width\r\n    const newHeight = deviceInfo.screen.height\r\n    const newBreakpoint = getCurrentBreakpoint(newWidth)\r\n\r\n    // 只在值真正改变时更新\r\n    if (width.value !== newWidth) {\r\n      width.value = newWidth\r\n    }\r\n    if (height.value !== newHeight) {\r\n      height.value = newHeight\r\n    }\r\n    if (current.value !== newBreakpoint) {\r\n      current.value = newBreakpoint\r\n    }\r\n  }\r\n\r\n  // 计算属性 - 断点检查\r\n  const isMobile = readonly(computed(() => current.value === 'mobile'))\r\n  const isTablet = readonly(computed(() => current.value === 'tablet'))\r\n  const isDesktop = readonly(computed(() => current.value === 'desktop'))\r\n  const isXL = readonly(computed(() => current.value === 'xl'))\r\n  const isXXL = readonly(computed(() => current.value === 'xxl'))\r\n\r\n  // 计算属性 - 屏幕尺寸类别\r\n  const isSmallScreen = readonly(computed(() => width.value < config.tablet))\r\n  const isMediumScreen = readonly(computed(() =>\r\n    width.value >= config.tablet && width.value < config.desktop,\r\n  ))\r\n  const isLargeScreen = readonly(computed(() => width.value >= config.desktop))\r\n\r\n  // 计算属性 - 屏幕比例\r\n  const aspectRatio = readonly(computed(() =>\r\n    height.value > 0 ? width.value / height.value : 0,\r\n  ))\r\n  const isWideScreen = readonly(computed(() => aspectRatio.value > 1.5))\r\n  const isSquareScreen = readonly(computed(() =>\r\n    Math.abs(aspectRatio.value - 1) < 0.2,\r\n  ))\r\n\r\n  /**\r\n   * 检查当前断点是否大于指定断点\r\n   */\r\n  const greaterThan = (breakpoint: keyof BreakpointConfig): boolean => {\r\n    const breakpointOrder: (keyof BreakpointConfig)[] = ['mobile', 'tablet', 'desktop', 'xl', 'xxl']\r\n    const currentIndex = breakpointOrder.indexOf(current.value)\r\n    const targetIndex = breakpointOrder.indexOf(breakpoint)\r\n    return currentIndex > targetIndex\r\n  }\r\n\r\n  /**\r\n   * 检查当前断点是否小于指定断点\r\n   */\r\n  const lessThan = (breakpoint: keyof BreakpointConfig): boolean => {\r\n    const breakpointOrder: (keyof BreakpointConfig)[] = ['mobile', 'tablet', 'desktop', 'xl', 'xxl']\r\n    const currentIndex = breakpointOrder.indexOf(current.value)\r\n    const targetIndex = breakpointOrder.indexOf(breakpoint)\r\n    return currentIndex < targetIndex\r\n  }\r\n\r\n  /**\r\n   * 检查当前断点是否在指定范围内\r\n   */\r\n  const between = (\r\n    minBreakpoint: keyof BreakpointConfig,\r\n    maxBreakpoint: keyof BreakpointConfig,\r\n  ): boolean => {\r\n    const breakpointOrder: (keyof BreakpointConfig)[] = ['mobile', 'tablet', 'desktop', 'xl', 'xxl']\r\n    const currentIndex = breakpointOrder.indexOf(current.value)\r\n    const minIndex = breakpointOrder.indexOf(minBreakpoint)\r\n    const maxIndex = breakpointOrder.indexOf(maxBreakpoint)\r\n    return currentIndex >= minIndex && currentIndex <= maxIndex\r\n  }\r\n\r\n  /**\r\n   * 检查当前宽度是否匹配指定断点\r\n   */\r\n  const matches = (breakpoint: keyof BreakpointConfig): boolean => {\r\n    return current.value === breakpoint\r\n  }\r\n\r\n  /**\r\n   * 获取断点对应的像素值\r\n   */\r\n  const getBreakpointValue = (breakpoint: keyof BreakpointConfig): number => {\r\n    return config[breakpoint] || 0\r\n  }\r\n\r\n  /**\r\n   * 刷新尺寸信息\r\n   */\r\n  const refresh = () => {\r\n    if (detector && isInitialized) {\r\n      const currentInfo = detector.getDeviceInfo()\r\n      updateDimensions(currentInfo)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 初始化断点检测器\r\n   */\r\n  const initDetector = () => {\r\n    if (detector || isInitialized) {\r\n      return\r\n    }\r\n\r\n    try {\r\n      detector = new DeviceDetector({\r\n        enableResize: true,\r\n        breakpoints: config,\r\n        ...options,\r\n      })\r\n      isInitialized = true\r\n\r\n      // 获取初始尺寸信息\r\n      updateDimensions(detector.getDeviceInfo())\r\n\r\n      // 监听设备变化\r\n      const deviceChangeHandler = (deviceInfo: DeviceInfo) => {\r\n        updateDimensions(deviceInfo)\r\n      }\r\n\r\n      detector.on('deviceChange', deviceChangeHandler)\r\n\r\n      // 保存清理函数\r\n      cleanupFunctions.push(\r\n        () => detector?.off('deviceChange', deviceChangeHandler),\r\n      )\r\n    }\r\n    catch (error) {\r\n      console.error('Failed to initialize breakpoint detector:', error)\r\n      isInitialized = false\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 销毁断点检测器\r\n   */\r\n  const destroyDetector = async () => {\r\n    try {\r\n      // 清理事件监听器\r\n      cleanupFunctions.forEach(cleanup => cleanup())\r\n      cleanupFunctions = []\r\n\r\n      // 销毁检测器\r\n      if (detector) {\r\n        await detector.destroy()\r\n        detector = null\r\n      }\r\n\r\n      isInitialized = false\r\n    }\r\n    catch (error) {\r\n      console.error('Failed to destroy breakpoint detector:', error)\r\n    }\r\n  }\r\n\r\n  // 生命周期钩子\r\n  onMounted(() => {\r\n    initDetector()\r\n  })\r\n\r\n  onUnmounted(() => {\r\n    destroyDetector()\r\n  })\r\n\r\n  return {\r\n    // 基本状态\r\n    current: readonly(current),\r\n    width: readonly(width),\r\n    height: readonly(height),\r\n\r\n    // 断点检查\r\n    isMobile,\r\n    isTablet,\r\n    isDesktop,\r\n    isXL,\r\n    isXXL,\r\n\r\n    // 屏幕尺寸类别\r\n    isSmallScreen,\r\n    isMediumScreen,\r\n    isLargeScreen,\r\n\r\n    // 屏幕比例\r\n    aspectRatio,\r\n    isWideScreen,\r\n    isSquareScreen,\r\n\r\n    // 断点比较方法\r\n    greaterThan: readonly(computed(() => greaterThan)),\r\n    lessThan: readonly(computed(() => lessThan)),\r\n    between: readonly(computed(() => between)),\r\n    matches: readonly(computed(() => matches)),\r\n\r\n    // 工具方法\r\n    getBreakpointValue,\r\n    refresh,\r\n\r\n    // 配置信息\r\n    breakpoints: readonly(ref(config)),\r\n  }\r\n}\r\n"],"names":["DEFAULT_BREAKPOINTS","mobile","tablet","desktop","xl","xxl","useBreakpoints","breakpoints","options","config","width","ref","height","current","detector","isInitialized","cleanupFunctions","getCurrentBreakpoint","screenWidth","updateDimensions","deviceInfo","newWidth","screen","newHeight","newBreakpoint","value","isMobile","readonly","computed","isTablet","isDesktop","isXL","isXXL","isSmallScreen","isMediumScreen","isLargeScreen","aspectRatio","isWideScreen","isSquareScreen","Math","abs","greaterThan","breakpoint","breakpointOrder","currentIndex","indexOf","targetIndex","lessThan","between","minBreakpoint","maxBreakpoint","minIndex","maxIndex","matches","getBreakpointValue","refresh","currentInfo","getDeviceInfo","initDetector","DeviceDetector","enableResize","deviceChangeHandler","on","push","off","error","console","destroyDetector","forEach","cleanup","destroy","onMounted","onUnmounted"],"mappings":"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"}