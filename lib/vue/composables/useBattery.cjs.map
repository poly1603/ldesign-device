{"version":3,"file":"useBattery.cjs","sources":["../../../src/vue/composables/useBattery.ts"],"sourcesContent":["import type { Ref } from 'vue'\r\nimport type { BatteryInfo, BatteryModule } from '../../types'\r\nimport process from 'node:process'\r\nimport { computed, onUnmounted, readonly, ref } from 'vue'\r\nimport { DeviceDetector } from '../../core/DeviceDetector'\r\n\r\n/**\r\n * 电池状态检测 Composition API\r\n *\r\n * 提供设备电池电量、充电状态、电池健康等信息的响应式监听\r\n *\r\n * @returns 电池状态相关的响应式数据和方法\r\n *\r\n * @example\r\n * ```vue\r\n * <script setup>\r\n * import { useBattery } from '@ldesign/device/vue'\r\n *\r\n * const {\r\n *   batteryInfo,\r\n *   batteryLevel,\r\n *   isCharging,\r\n *   batteryStatus,\r\n *   isLoaded,\r\n *   loadModule,\r\n *   unloadModule\r\n * } = useBattery()\r\n *\r\n * // 加载电池模块\r\n * onMounted(async () => {\r\n *   try {\r\n *     await loadModule()\r\n *   } catch (error) {\r\n *     console.warn('设备不支持电池 API')\r\n *   }\r\n * })\r\n * </script>\r\n *\r\n * <template>\r\n *   <div v-if=\"isLoaded\">\r\n *     <div class=\"battery-indicator\">\r\n *       <div class=\"battery-level\" :style=\"{ width: `${batteryLevel * 100}%` }\"></div>\r\n *     </div>\r\n *     <p>电量: {{ Math.round(batteryLevel * 100) }}%</p>\r\n *     <p>充电状态: {{ isCharging ? '充电中' : '未充电' }}</p>\r\n *     <p>电池状态: {{ batteryStatus }}</p>\r\n *   </div>\r\n *   <div v-else>\r\n *     <p>电池信息不可用</p>\r\n *   </div>\r\n * </template>\r\n * ```\r\n */\r\nexport function useBattery() {\r\n  const batteryInfo = ref<BatteryInfo | null>(null) as Ref<BatteryInfo | null>\r\n  const batteryLevel = ref(1)\r\n  const isCharging = ref(false)\r\n  const batteryStatus = ref('unknown')\r\n  const isLoaded = ref(false)\r\n  const error = ref<string | null>(null)\r\n\r\n  let detector: DeviceDetector | null = null\r\n  let batteryModule: BatteryModule | null = null\r\n  let cleanupFunctions: Array<() => void> = []\r\n\r\n  /**\r\n   * 更新电池信息\r\n   */\r\n  const updateBatteryInfo = (info: BatteryInfo) => {\r\n    batteryInfo.value = info\r\n    batteryLevel.value = info.level\r\n    isCharging.value = info.charging\r\n    batteryStatus.value = info.chargingTime > 0\r\n      ? 'charging'\r\n      : info.dischargingTime > 0 ? 'discharging' : 'unknown'\r\n  }\r\n\r\n  /**\r\n   * 加载电池模块\r\n   */\r\n  const loadModule = async () => {\r\n    if (!detector) {\r\n      detector = new DeviceDetector()\r\n    }\r\n\r\n    try {\r\n      batteryModule = await detector.loadModule<BatteryModule>('battery')\r\n      if (batteryModule && typeof batteryModule.getData === 'function') {\r\n        const info = batteryModule.getData()\r\n        updateBatteryInfo(info)\r\n        isLoaded.value = true\r\n        error.value = null\r\n\r\n        // 监听电池状态变化（如模块支持事件）\r\n        const maybeOn = (batteryModule as any).on as ((...args: any[]) => any) | undefined\r\n        const maybeOff = (batteryModule as any).off as ((...args: any[]) => any) | undefined\r\n        if (typeof maybeOn === 'function' && typeof maybeOff === 'function') {\r\n          const batteryChangeHandler = (newInfo: BatteryInfo) => {\r\n            updateBatteryInfo(newInfo)\r\n          }\r\n          maybeOn.call(batteryModule, 'batteryChange', batteryChangeHandler)\r\n          // 保存清理函数\r\n          cleanupFunctions.push(\r\n            () => maybeOff.call(batteryModule, 'batteryChange', batteryChangeHandler),\r\n          )\r\n        }\r\n      }\r\n    }\r\n    catch (err) {\r\n      error.value = err instanceof Error ? err.message : 'Failed to load battery module'\r\n      // 只在开发模式下输出错误日志\r\n      if (typeof process !== 'undefined' && process.env?.NODE_ENV === 'development') {\r\n        console.warn('Failed to load battery module:', err)\r\n      }\r\n      throw err\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 卸载电池模块\r\n   */\r\n  const unloadModule = async () => {\r\n    // 清理事件监听器\r\n    cleanupFunctions.forEach(cleanup => cleanup())\r\n    cleanupFunctions = []\r\n\r\n    if (detector) {\r\n      await detector.unloadModule('battery')\r\n      batteryModule = null\r\n      batteryInfo.value = null\r\n      batteryLevel.value = 1\r\n      isCharging.value = false\r\n      batteryStatus.value = 'unknown'\r\n      isLoaded.value = false\r\n      error.value = null\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 销毁电池检测器\r\n   */\r\n  const destroyBattery = async () => {\r\n    await unloadModule()\r\n    if (detector) {\r\n      await detector.destroy()\r\n      detector = null\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 刷新电池信息\r\n   */\r\n  const refresh = async () => {\r\n    if (batteryModule && isLoaded.value) {\r\n      try {\r\n        const info = batteryModule.getData()\r\n        updateBatteryInfo(info)\r\n      }\r\n      catch (err) {\r\n        error.value = err instanceof Error ? err.message : 'Failed to refresh battery info'\r\n      }\r\n    }\r\n  }\r\n\r\n  // 计算属性\r\n  const batteryPercentage = readonly(computed(() => Math.round(batteryLevel.value * 100)))\r\n  const isLowBattery = readonly(computed(() => batteryLevel.value < 0.2))\r\n  const isCriticalBattery = readonly(computed(() => batteryLevel.value < 0.1))\r\n\r\n  onUnmounted(() => {\r\n    destroyBattery()\r\n  })\r\n\r\n  return {\r\n    batteryInfo: readonly(batteryInfo),\r\n    batteryLevel: readonly(batteryLevel),\r\n    isCharging: readonly(isCharging),\r\n    batteryStatus: readonly(batteryStatus),\r\n    isLoaded: readonly(isLoaded),\r\n    error: readonly(error),\r\n    batteryPercentage,\r\n    isLowBattery,\r\n    isCriticalBattery,\r\n    loadModule,\r\n    unloadModule,\r\n    refresh,\r\n  }\r\n}\r\n"],"names":["useBattery","batteryInfo","ref","batteryLevel","isCharging","batteryStatus","isLoaded","error","detector","batteryModule","cleanupFunctions","updateBatteryInfo","info","value","level","charging","chargingTime","dischargingTime","loadModule","DeviceDetector","getData","maybeOn","on","maybeOff","off","batteryChangeHandler","newInfo","call","push","err","Error","message","process","env","NODE_ENV","console","warn","unloadModule","forEach","cleanup","destroyBattery","destroy","refresh","batteryPercentage","readonly","computed","Math","round","isLowBattery","isCriticalBattery","onUnmounted"],"mappings":"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"}