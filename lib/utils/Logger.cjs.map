{"version":3,"file":"Logger.cjs","sources":["../../src/utils/Logger.ts"],"sourcesContent":["/**\r\n * 日志级别枚举\r\n */\r\nexport enum LogLevel {\r\n  DEBUG = 0,\r\n  INFO = 1,\r\n  WARN = 2,\r\n  ERROR = 3,\r\n  NONE = 4,\r\n}\r\n\r\n/**\r\n * 日志条目接口\r\n */\r\nexport interface LogEntry {\r\n  level: LogLevel\r\n  message: string\r\n  timestamp: number\r\n  module?: string\r\n  data?: unknown\r\n  stack?: string\r\n}\r\n\r\n/**\r\n * Logger 配置选项\r\n */\r\nexport interface LoggerOptions {\r\n  /** 最低日志级别 */\r\n  level?: LogLevel\r\n  /** 是否启用 */\r\n  enabled?: boolean\r\n  /** 模块名称前缀 */\r\n  prefix?: string\r\n  /** 是否显示时间戳 */\r\n  showTimestamp?: boolean\r\n  /** 是否显示堆栈信息 */\r\n  showStack?: boolean\r\n  /** 自定义日志处理器 */\r\n  handler?: (entry: LogEntry) => void\r\n  /** 最大日志历史记录数 */\r\n  maxHistorySize?: number\r\n}\r\n\r\n/**\r\n * 高性能日志系统\r\n *\r\n * 特性：\r\n * - 分级日志（DEBUG, INFO, WARN, ERROR）\r\n * - 模块化日志\r\n * - 日志历史记录\r\n * - 性能统计\r\n * - 自定义日志处理器\r\n *\r\n * @example\r\n * ```typescript\r\n * // 创建 Logger 实例\r\n * const logger = new Logger({\r\n *   level: LogLevel.DEBUG,\r\n *   prefix: 'MyApp',\r\n *   showTimestamp: true\r\n * })\r\n *\r\n * // 使用日志\r\n * logger.debug('Debug message', { data: 'value' })\r\n * logger.info('Info message')\r\n * logger.warn('Warning message')\r\n * logger.error('Error message', error)\r\n *\r\n * // 获取日志历史\r\n * const history = logger.getHistory()\r\n * ```\r\n */\r\nexport class Logger {\r\n  private options: Required<LoggerOptions>\r\n  private history: LogEntry[] = []\r\n  private stats = {\r\n    debug: 0,\r\n    info: 0,\r\n    warn: 0,\r\n    error: 0,\r\n  }\r\n\r\n  // 日志级别颜色映射（用于浏览器控制台）\r\n  private readonly levelColors: Record<LogLevel, string> = {\r\n    [LogLevel.DEBUG]: '#8B5CF6', // 紫色\r\n    [LogLevel.INFO]: '#3B82F6', // 蓝色\r\n    [LogLevel.WARN]: '#F59E0B', // 橙色\r\n    [LogLevel.ERROR]: '#EF4444', // 红色\r\n    [LogLevel.NONE]: '#999999', // 灰色\r\n  }\r\n\r\n  // 日志级别名称映射\r\n  private readonly levelNames = {\r\n    [LogLevel.DEBUG]: 'DEBUG',\r\n    [LogLevel.INFO]: 'INFO',\r\n    [LogLevel.WARN]: 'WARN',\r\n    [LogLevel.ERROR]: 'ERROR',\r\n    [LogLevel.NONE]: 'NONE',\r\n  }\r\n\r\n  constructor(options: LoggerOptions = {}) {\r\n    this.options = {\r\n      level: options.level ?? LogLevel.WARN,\r\n      enabled: options.enabled ?? true,\r\n      prefix: options.prefix ?? '',\r\n      showTimestamp: options.showTimestamp ?? true,\r\n      showStack: options.showStack ?? false,\r\n      handler: options.handler,\r\n      maxHistorySize: options.maxHistorySize ?? 100,\r\n    } as Required<LoggerOptions>\r\n  }\r\n\r\n  /**\r\n   * 设置日志级别\r\n   */\r\n  setLevel(level: LogLevel): this {\r\n    this.options.level = level\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 启用/禁用日志\r\n   */\r\n  setEnabled(enabled: boolean): this {\r\n    this.options.enabled = enabled\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 设置模块前缀\r\n   */\r\n  setPrefix(prefix: string): this {\r\n    this.options.prefix = prefix\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Debug 级别日志\r\n   */\r\n  debug(message: string, data?: unknown): void {\r\n    this.log(LogLevel.DEBUG, message, data)\r\n  }\r\n\r\n  /**\r\n   * Info 级别日志\r\n   */\r\n  info(message: string, data?: unknown): void {\r\n    this.log(LogLevel.INFO, message, data)\r\n  }\r\n\r\n  /**\r\n   * Warn 级别日志\r\n   */\r\n  warn(message: string, data?: unknown): void {\r\n    this.log(LogLevel.WARN, message, data)\r\n  }\r\n\r\n  /**\r\n   * Error 级别日志\r\n   */\r\n  error(message: string, error?: unknown): void {\r\n    const stack = error instanceof Error ? error.stack : undefined\r\n    this.log(LogLevel.ERROR, message, error, stack)\r\n  }\r\n\r\n  /**\r\n   * 分组日志开始\r\n   */\r\n  group(label: string): void {\r\n    if (!this.options.enabled || typeof console.group !== 'function')\r\n      return\r\n\r\n    console.group(this.formatPrefix() + label)\r\n  }\r\n\r\n  /**\r\n   * 分组日志结束\r\n   */\r\n  groupEnd(): void {\r\n    if (!this.options.enabled || typeof console.groupEnd !== 'function')\r\n      return\r\n\r\n    console.groupEnd()\r\n  }\r\n\r\n  /**\r\n   * 表格日志\r\n   */\r\n  table(data: unknown): void {\r\n    if (!this.options.enabled || typeof console.table !== 'function')\r\n      return\r\n\r\n    console.table(data)\r\n  }\r\n\r\n  /**\r\n   * 性能计时开始\r\n   */\r\n  time(label: string): void {\r\n    if (!this.options.enabled || typeof console.time !== 'function')\r\n      return\r\n\r\n    console.time(this.formatPrefix() + label)\r\n  }\r\n\r\n  /**\r\n   * 性能计时结束\r\n   */\r\n  timeEnd(label: string): void {\r\n    if (!this.options.enabled || typeof console.timeEnd !== 'function')\r\n      return\r\n\r\n    console.timeEnd(this.formatPrefix() + label)\r\n  }\r\n\r\n  /**\r\n   * 获取日志历史\r\n   */\r\n  getHistory(level?: LogLevel): LogEntry[] {\r\n    if (level !== undefined) {\r\n      return this.history.filter(entry => entry.level === level)\r\n    }\r\n    return [...this.history]\r\n  }\r\n\r\n  /**\r\n   * 清除日志历史\r\n   */\r\n  clearHistory(): void {\r\n    this.history = []\r\n  }\r\n\r\n  /**\r\n   * 获取日志统计\r\n   */\r\n  getStats() {\r\n    return { ...this.stats }\r\n  }\r\n\r\n  /**\r\n   * 重置统计信息\r\n   */\r\n  resetStats(): void {\r\n    this.stats = {\r\n      debug: 0,\r\n      info: 0,\r\n      warn: 0,\r\n      error: 0,\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 导出日志（JSON 格式）\r\n   */\r\n  export(): string {\r\n    return JSON.stringify(\r\n      {\r\n        history: this.history,\r\n        stats: this.stats,\r\n        exportTime: Date.now(),\r\n      },\r\n      null,\r\n      2,\r\n    )\r\n  }\r\n\r\n  /**\r\n   * 核心日志方法\r\n   */\r\n  private log(\r\n    level: LogLevel,\r\n    message: string,\r\n    data?: unknown,\r\n    stack?: string,\r\n  ): void {\r\n    // 检查是否启用和级别过滤\r\n    if (!this.options.enabled || level < this.options.level)\r\n      return\r\n\r\n    // 创建日志条目\r\n    const entry: LogEntry = {\r\n      level,\r\n      message,\r\n      timestamp: Date.now(),\r\n      module: this.options.prefix || undefined,\r\n      data,\r\n      stack: this.options.showStack ? stack : undefined,\r\n    }\r\n\r\n    // 添加到历史记录（限制大小）\r\n    this.history.push(entry)\r\n    if (this.history.length > this.options.maxHistorySize) {\r\n      this.history.shift()\r\n    }\r\n\r\n    // 更新统计\r\n    this.updateStats(level)\r\n\r\n    // 调用自定义处理器\r\n    if (this.options.handler) {\r\n      try {\r\n        this.options.handler(entry)\r\n      }\r\n      catch (error) {\r\n        // 避免处理器错误影响日志系统\r\n        console.error('Logger handler error:', error)\r\n      }\r\n    }\r\n\r\n    // 输出到控制台\r\n    this.outputToConsole(entry)\r\n  }\r\n\r\n  /**\r\n   * 输出到控制台\r\n   */\r\n  private outputToConsole(entry: LogEntry): void {\r\n    const { level, message, data, stack } = entry\r\n\r\n    const prefix = this.formatPrefix()\r\n    const timestamp = this.options.showTimestamp\r\n      ? this.formatTimestamp(entry.timestamp)\r\n      : ''\r\n    const levelName = this.levelNames[level]\r\n\r\n    // 浏览器环境使用颜色\r\n    if (typeof window !== 'undefined') {\r\n      const color = this.levelColors[level]\r\n      const args: unknown[] = [\r\n        `%c${timestamp}%c${prefix}%c[${levelName}]%c ${message}`,\r\n        'color: #999',\r\n        'color: #333; font-weight: bold',\r\n        `color: ${color}; font-weight: bold`,\r\n        'color: inherit',\r\n      ]\r\n\r\n      if (data !== undefined) {\r\n        args.push('\\n', data)\r\n      }\r\n\r\n      if (stack) {\r\n        args.push('\\n', stack)\r\n      }\r\n\r\n      this.getConsoleMethod(level)(...args)\r\n    }\r\n    else {\r\n      // Node.js 环境\r\n      const output = `${timestamp}${prefix}[${levelName}] ${message}`\r\n      const args: unknown[] = [output]\r\n\r\n      if (data !== undefined) {\r\n        args.push('\\n', data)\r\n      }\r\n\r\n      if (stack) {\r\n        args.push('\\n', stack)\r\n      }\r\n\r\n      this.getConsoleMethod(level)(...args)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取对应的 console 方法\r\n   */\r\n  private getConsoleMethod(level: LogLevel): (...args: unknown[]) => void {\r\n    switch (level) {\r\n      case LogLevel.DEBUG:\r\n        return console.debug || console.info\r\n      case LogLevel.INFO:\r\n        return console.info\r\n      case LogLevel.WARN:\r\n        return console.warn\r\n      case LogLevel.ERROR:\r\n        return console.error\r\n      default:\r\n        return console.info\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 格式化时间戳\r\n   */\r\n  private formatTimestamp(timestamp: number): string {\r\n    const date = new Date(timestamp)\r\n    const hours = String(date.getHours()).padStart(2, '0')\r\n    const minutes = String(date.getMinutes()).padStart(2, '0')\r\n    const seconds = String(date.getSeconds()).padStart(2, '0')\r\n    const ms = String(date.getMilliseconds()).padStart(3, '0')\r\n    return `[${hours}:${minutes}:${seconds}.${ms}] `\r\n  }\r\n\r\n  /**\r\n   * 格式化前缀\r\n   */\r\n  private formatPrefix(): string {\r\n    return this.options.prefix ? `[${this.options.prefix}] ` : ''\r\n  }\r\n\r\n  /**\r\n   * 更新统计信息\r\n   */\r\n  private updateStats(level: LogLevel): void {\r\n    switch (level) {\r\n      case LogLevel.DEBUG:\r\n        this.stats.debug++\r\n        break\r\n      case LogLevel.INFO:\r\n        this.stats.info++\r\n        break\r\n      case LogLevel.WARN:\r\n        this.stats.warn++\r\n        break\r\n      case LogLevel.ERROR:\r\n        this.stats.error++\r\n        break\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * 创建默认 Logger 实例\r\n */\r\nexport const defaultLogger = new Logger({\r\n  // eslint-disable-next-line node/prefer-global/process\r\n  level: typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'development'\r\n    ? LogLevel.DEBUG\r\n    : LogLevel.WARN,\r\n  prefix: '@ldesign/device',\r\n  showTimestamp: true,\r\n})\r\n\r\n/**\r\n * 便捷方法导出\r\n */\r\nexport const debug = (message: string, data?: unknown) => defaultLogger.debug(message, data)\r\nexport const info = (message: string, data?: unknown) => defaultLogger.info(message, data)\r\nexport const warn = (message: string, data?: unknown) => defaultLogger.warn(message, data)\r\nexport const error = (message: string, err?: unknown) => defaultLogger.error(message, err)\r\n"],"names":["LogLevel","DEBUG","INFO","WARN","ERROR","NONE","Logger","constructor","options","history","stats","debug","info","warn","error","levelColors","levelNames","level","enabled","prefix","showTimestamp","showStack","handler","maxHistorySize","setLevel","setEnabled","setPrefix","message","data","log","stack","Error","undefined","group","label","console","formatPrefix","groupEnd","table","time","timeEnd","getHistory","filter","entry","clearHistory","getStats","resetStats","export","JSON","stringify","exportTime","Date","now","timestamp","module","push","length","shift","updateStats","outputToConsole","formatTimestamp","levelName","window","color","args","getConsoleMethod","output","date","hours","String","getHours","padStart","minutes","getMinutes","seconds","getSeconds","ms","getMilliseconds","defaultLogger","process","env","NODE_ENV","err"],"mappings":"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"}