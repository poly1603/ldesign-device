{"version":3,"file":"GeolocationModule.cjs","sources":["../../src/modules/GeolocationModule.ts"],"sourcesContent":["import type { DeviceModule, GeolocationInfo } from '../types'\r\nimport { EventEmitter } from '../core/EventEmitter'\r\nimport { safeNavigatorAccess } from '../utils'\r\n\r\n/**\r\n * 地理位置模块\r\n */\r\nexport class GeolocationModule extends EventEmitter<{ positionChange: GeolocationInfo }> implements DeviceModule {\r\n  name = 'geolocation'\r\n  private geolocationInfo: GeolocationInfo | null = null\r\n  private watchId: number | null = null\r\n  private options: PositionOptions\r\n\r\n  constructor(options: PositionOptions = {}) {\r\n    super()\r\n    this.options = {\r\n      enableHighAccuracy: true,\r\n      timeout: 10000,\r\n      maximumAge: 300000, // 5 minutes\r\n      ...options,\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 初始化模块\r\n   */\r\n  async init(): Promise<void> {\r\n    if (typeof window === 'undefined')\r\n      return\r\n\r\n    // 不支持时直接返回，不抛错，符合测试期望\r\n    if (!this.isSupported()) {\r\n      return\r\n    }\r\n\r\n    try {\r\n      // 获取当前位置（不阻塞初始化，避免在测试环境未注入回调时挂起）\r\n      this.getCurrentPosition().catch((error) => {\r\n        // 静默处理权限被拒绝的情况，避免控制台警告\r\n        if (error.message !== 'Permission denied') {\r\n          console.warn('Failed to get initial position:', error)\r\n        }\r\n      })\r\n    }\r\n    catch (error) {\r\n      // 静默处理权限被拒绝的情况，避免控制台警告\r\n      if ((error as Error).message !== 'Permission denied') {\r\n        console.warn('Failed to get initial position:', error)\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 销毁模块\r\n   */\r\n  async destroy(): Promise<void> {\r\n    this.stopWatching()\r\n  }\r\n\r\n  /**\r\n   * 获取地理位置信息\r\n   */\r\n  getData(): GeolocationInfo | null {\r\n    return this.geolocationInfo ? { ...this.geolocationInfo } : null\r\n  }\r\n\r\n  /**\r\n   * 检查是否支持地理位置 API\r\n   */\r\n  isSupported(): boolean {\r\n    return safeNavigatorAccess((nav: Navigator & { geolocation?: Geolocation }) => {\r\n      const g = nav.geolocation\r\n      return !!(g && typeof g.getCurrentPosition === 'function')\r\n    }, false)\r\n  }\r\n\r\n  /**\r\n   * 获取当前位置\r\n   */\r\n  async getCurrentPosition(options?: PositionOptions): Promise<GeolocationInfo> {\r\n    const positionOptions = options ? { ...this.options, ...options } : this.options\r\n\r\n    return new Promise((resolve, reject) => {\r\n      if (!this.isSupported()) {\r\n        reject(new Error('Geolocation is not supported'))\r\n        return\r\n      }\r\n\r\n      navigator.geolocation.getCurrentPosition(\r\n        (position) => {\r\n          const info = this.parsePosition(position)\r\n          this.geolocationInfo = info\r\n          this.emit('positionChange', info)\r\n          resolve(info)\r\n        },\r\n        (error) => {\r\n          reject(this.parseGeolocationError(error))\r\n        },\r\n        positionOptions,\r\n      )\r\n    })\r\n  }\r\n\r\n  /**\r\n   * 开始监听位置变化\r\n   */\r\n  startWatching(callback?: (position: GeolocationInfo) => void): void {\r\n    if (!this.isSupported()) {\r\n      throw new Error('Geolocation API is not supported')\r\n    }\r\n\r\n    if (this.watchId !== null) {\r\n      this.stopWatching()\r\n    }\r\n\r\n    this.watchId = navigator.geolocation.watchPosition(\r\n      (position) => {\r\n        const info = this.parsePosition(position)\r\n        this.geolocationInfo = info\r\n        this.emit('positionChange', info)\r\n        callback?.(info)\r\n      },\r\n      (error) => {\r\n        console.error(\r\n          'Geolocation watch error:',\r\n          this.parseGeolocationError(error),\r\n        )\r\n      },\r\n      this.options,\r\n    )\r\n  }\r\n\r\n  /**\r\n   * 停止监听位置变化\r\n   */\r\n  stopWatching(): void {\r\n    if (this.watchId !== null && this.isSupported()) {\r\n      navigator.geolocation.clearWatch(this.watchId)\r\n      this.watchId = null\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 监听位置变化（别名方法，用于测试兼容性）\r\n   */\r\n  watchPosition(callback: (position: GeolocationInfo) => void): number | null {\r\n    if (!this.isSupported()) {\r\n      throw new Error('Geolocation API is not supported')\r\n    }\r\n\r\n    if (this.watchId !== null) {\r\n      this.stopWatching()\r\n    }\r\n\r\n    this.watchId = navigator.geolocation.watchPosition(\r\n      (position) => {\r\n        const info = this.parsePosition(position)\r\n        this.geolocationInfo = info\r\n        this.emit('positionChange', info)\r\n        callback(info)\r\n      },\r\n      (error) => {\r\n        console.error(\r\n          'Geolocation watch error:',\r\n          this.parseGeolocationError(error),\r\n        )\r\n      },\r\n      this.options,\r\n    )\r\n\r\n    return this.watchId\r\n  }\r\n\r\n  /**\r\n   * 清除位置监听（别名方法，用于测试兼容性）\r\n   */\r\n  clearWatch(watchId: number): void {\r\n    if (this.isSupported()) {\r\n      navigator.geolocation.clearWatch(watchId)\r\n      if (this.watchId === watchId) {\r\n        this.watchId = null\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取纬度\r\n   */\r\n  getLatitude(): number | null {\r\n    return this.geolocationInfo?.latitude ?? null\r\n  }\r\n\r\n  /**\r\n   * 获取经度\r\n   */\r\n  getLongitude(): number | null {\r\n    return this.geolocationInfo?.longitude ?? null\r\n  }\r\n\r\n  /**\r\n   * 获取精度（米）\r\n   */\r\n  getAccuracy(): number | null {\r\n    return this.geolocationInfo?.accuracy ?? null\r\n  }\r\n\r\n  /**\r\n   * 获取海拔（米）\r\n   */\r\n  getAltitude(): number | null {\r\n    return this.geolocationInfo?.altitude ?? null\r\n  }\r\n\r\n  /**\r\n   * 获取海拔精度（米）\r\n   */\r\n  getAltitudeAccuracy(): number | null {\r\n    return this.geolocationInfo?.altitudeAccuracy ?? null\r\n  }\r\n\r\n  /**\r\n   * 获取方向（度）\r\n   */\r\n  getHeading(): number | null {\r\n    return this.geolocationInfo?.heading ?? null\r\n  }\r\n\r\n  /**\r\n   * 获取速度（米/秒）\r\n   */\r\n  getSpeed(): number | null {\r\n    return this.geolocationInfo?.speed ?? null\r\n  }\r\n\r\n  /**\r\n   * 计算两点之间的距离（米）\r\n   */\r\n  calculateDistance(\r\n    lat1: number,\r\n    lon1: number,\r\n    lat2: number,\r\n    lon2: number,\r\n  ): number {\r\n    const R = 6371e3 // 地球半径（米）\r\n    const φ1 = (lat1 * Math.PI) / 180\r\n    const φ2 = (lat2 * Math.PI) / 180\r\n    const Δφ = ((lat2 - lat1) * Math.PI) / 180\r\n    const Δλ = ((lon2 - lon1) * Math.PI) / 180\r\n\r\n    const a\r\n      = Math.sin(Δφ / 2) * Math.sin(Δφ / 2)\r\n        + Math.cos(φ1) * Math.cos(φ2) * Math.sin(Δλ / 2) * Math.sin(Δλ / 2)\r\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\r\n\r\n    return R * c\r\n  }\r\n\r\n  /**\r\n   * 计算与当前位置的距离\r\n   */\r\n  getDistanceFromCurrent(latitude: number, longitude: number): number | null {\r\n    if (!this.geolocationInfo)\r\n      return null\r\n\r\n    return this.calculateDistance(\r\n      this.geolocationInfo.latitude,\r\n      this.geolocationInfo.longitude,\r\n      latitude,\r\n      longitude,\r\n    )\r\n  }\r\n\r\n  /**\r\n   * 解析位置信息\r\n   */\r\n  private parsePosition(position: GeolocationPosition): GeolocationInfo {\r\n    const { coords } = position\r\n\r\n    return {\r\n      latitude: coords.latitude,\r\n      longitude: coords.longitude,\r\n      accuracy: coords.accuracy,\r\n      altitude: coords.altitude ?? null,\r\n      altitudeAccuracy: coords.altitudeAccuracy ?? null,\r\n      heading: coords.heading ?? null,\r\n      speed: coords.speed ?? null,\r\n      // 一些测试期望包含时间戳\r\n      timestamp: typeof position.timestamp === 'number' ? position.timestamp : Date.now(),\r\n    } as GeolocationInfo\r\n  }\r\n\r\n  /**\r\n   * 解析地理位置错误\r\n   */\r\n  private parseGeolocationError(error: GeolocationPositionError): Error {\r\n    const errorMessages: Record<number, string> = {\r\n      [error.PERMISSION_DENIED]: 'Permission denied',\r\n      [error.POSITION_UNAVAILABLE]: 'Position unavailable',\r\n      [error.TIMEOUT]: 'Request timeout',\r\n    }\r\n\r\n    const message = errorMessages[error.code] || 'An unknown error occurred'\r\n    return new Error(message)\r\n  }\r\n}\r\n"],"names":["GeolocationModule","EventEmitter","constructor","options","name","geolocationInfo","watchId","enableHighAccuracy","timeout","maximumAge","init","window","isSupported","getCurrentPosition","catch","error","message","console","warn","destroy","stopWatching","getData","safeNavigatorAccess","nav","g","geolocation","positionOptions","Promise","resolve","reject","Error","navigator","position","info","parsePosition","emit","parseGeolocationError","startWatching","callback","watchPosition","clearWatch","getLatitude","latitude","getLongitude","longitude","getAccuracy","accuracy","getAltitude","altitude","getAltitudeAccuracy","altitudeAccuracy","getHeading","heading","getSpeed","speed","calculateDistance","lat1","lon1","lat2","lon2","R","φ1","Math","PI","φ2","Δφ","Δλ","a","sin","cos","c","atan2","sqrt","getDistanceFromCurrent","coords","timestamp","Date","now","errorMessages","PERMISSION_DENIED","POSITION_UNAVAILABLE","TIMEOUT","code"],"mappings":";;;;;;;;;;;;;;AAOO,MAAMA,0BAA0BC,yBAAAA,CAA0E;AAAA,EAM/GC,WAAAA,CAAYC,OAAAA,GAA2B,EAAC,EAAG;AACzC,IAAA,KAAA,EAAM;AANRC,IAAAA,IAAAA,CAAAA,IAAAA,GAAO,aAAA;AACP,IAAA,IAAA,CAAQC,eAAAA,GAA0C,IAAA;AAClD,IAAA,IAAA,CAAQC,OAAAA,GAAyB,IAAA;AAK/B,IAAA,IAAA,CAAKH,OAAAA,GAAU;AAAA,MACbI,kBAAAA,EAAoB,IAAA;AAAA,MACpBC,OAAAA,EAAS,GAAA;AAAA,MACTC,UAAAA,EAAY,GAAA;AAAA;AAAA,MACZ,GAAGN;AAAAA,KACL;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,MAAMO,IAAAA,GAAsB;AAC1B,IAAA,IAAI,OAAOC,WAAW,WAAA,EACpB;AAGF,IAAA,IAAI,CAAC,IAAA,CAAKC,WAAAA,EAAY,EAAG;AACvB,MAAA;AAAA,IACF;AAEA,IAAA,IAAI;AAEF,MAAA,IAAA,CAAKC,kBAAAA,EAAmB,CAAEC,KAAAA,CAAOC,CAAAA,KAAAA,KAAU;AAEzC,QAAA,IAAIA,KAAAA,CAAMC,YAAY,mBAAA,EAAqB;AACzCC,UAAAA,OAAAA,CAAQC,IAAAA,CAAK,mCAAmCH,KAAK,CAAA;AAAA,QACvD;AAAA,MACF,CAAC,CAAA;AAAA,IACH,SACOA,KAAAA,EAAO;AAEZ,MAAA,IAAKA,KAAAA,CAAgBC,YAAY,mBAAA,EAAqB;AACpDC,QAAAA,OAAAA,CAAQC,IAAAA,CAAK,mCAAmCH,KAAK,CAAA;AAAA,MACvD;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,MAAMI,OAAAA,GAAyB;AAC7B,IAAA,IAAA,CAAKC,YAAAA,EAAa;AAAA,EACpB;AAAA;AAAA;AAAA;AAAA,EAKAC,OAAAA,GAAkC;AAChC,IAAA,OAAO,KAAKhB,eAAAA,GAAkB;AAAA,MAAE,GAAG,IAAA,CAAKA;AAAAA,KAAgB,GAAI,IAAA;AAAA,EAC9D;AAAA;AAAA;AAAA;AAAA,EAKAO,WAAAA,GAAuB;AACrB,IAAA,OAAOU,yBAAAA,CAAoB,CAACC,GAAAA,KAAmD;AAC7E,MAAA,MAAMC,IAAID,GAAAA,CAAIE,WAAAA;AACd,MAAA,OAAO,CAAC,EAAED,CAAAA,IAAK,OAAOA,EAAEX,kBAAAA,KAAuB,UAAA,CAAA;AAAA,IACjD,GAAG,KAAK,CAAA;AAAA,EACV;AAAA;AAAA;AAAA;AAAA,EAKA,MAAMA,mBAAmBV,OAAAA,EAAqD;AAC5E,IAAA,MAAMuB,kBAAkBvB,OAAAA,GAAU;AAAA,MAAE,GAAG,IAAA,CAAKA,OAAAA;AAAAA,MAAS,GAAGA;AAAAA,QAAY,IAAA,CAAKA,OAAAA;AAEzE,IAAA,OAAO,IAAIwB,OAAAA,CAAQ,CAACC,OAAAA,EAASC,MAAAA,KAAW;AACtC,MAAA,IAAI,CAAC,IAAA,CAAKjB,WAAAA,EAAY,EAAG;AACvBiB,QAAAA,MAAAA,CAAO,IAAIC,KAAAA,CAAM,8BAA8B,CAAC,CAAA;AAChD,QAAA;AAAA,MACF;AAEAC,MAAAA,SAAAA,CAAUN,WAAAA,CAAYZ,mBACnBmB,CAAAA,QAAAA,KAAa;AACZ,QAAA,MAAMC,IAAAA,GAAO,IAAA,CAAKC,aAAAA,CAAcF,QAAQ,CAAA;AACxC,QAAA,IAAA,CAAK3B,eAAAA,GAAkB4B,IAAAA;AACvB,QAAA,IAAA,CAAKE,IAAAA,CAAK,kBAAkBF,IAAI,CAAA;AAChCL,QAAAA,OAAAA,CAAQK,IAAI,CAAA;AAAA,MACd,GACClB,CAAAA,KAAAA,KAAU;AACTc,QAAAA,MAAAA,CAAO,IAAA,CAAKO,qBAAAA,CAAsBrB,KAAK,CAAC,CAAA;AAAA,MAC1C,GACAW,eACF,CAAA;AAAA,IACF,CAAC,CAAA;AAAA,EACH;AAAA;AAAA;AAAA;AAAA,EAKAW,cAAcC,QAAAA,EAAsD;AAClE,IAAA,IAAI,CAAC,IAAA,CAAK1B,WAAAA,EAAY,EAAG;AACvB,MAAA,MAAM,IAAIkB,MAAM,kCAAkC,CAAA;AAAA,IACpD;AAEA,IAAA,IAAI,IAAA,CAAKxB,YAAY,IAAA,EAAM;AACzB,MAAA,IAAA,CAAKc,YAAAA,EAAa;AAAA,IACpB;AAEA,IAAA,IAAA,CAAKd,OAAAA,GAAUyB,SAAAA,CAAUN,WAAAA,CAAYc,aAAAA,CAClCP,CAAAA,QAAAA,KAAa;AACZ,MAAA,MAAMC,IAAAA,GAAO,IAAA,CAAKC,aAAAA,CAAcF,QAAQ,CAAA;AACxC,MAAA,IAAA,CAAK3B,eAAAA,GAAkB4B,IAAAA;AACvB,MAAA,IAAA,CAAKE,IAAAA,CAAK,kBAAkBF,IAAI,CAAA;AAChCK,MAAAA,QAAAA,GAAWL,IAAI,CAAA;AAAA,IACjB,GACClB,CAAAA,KAAAA,KAAU;AACTE,MAAAA,OAAAA,CAAQF,KAAAA,CACN,0BAAA,EACA,IAAA,CAAKqB,qBAAAA,CAAsBrB,KAAK,CAClC,CAAA;AAAA,IACF,CAAA,EACA,KAAKZ,OACP,CAAA;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKAiB,YAAAA,GAAqB;AACnB,IAAA,IAAI,IAAA,CAAKd,OAAAA,KAAY,IAAA,IAAQ,IAAA,CAAKM,aAAY,EAAG;AAC/CmB,MAAAA,SAAAA,CAAUN,WAAAA,CAAYe,UAAAA,CAAW,IAAA,CAAKlC,OAAO,CAAA;AAC7C,MAAA,IAAA,CAAKA,OAAAA,GAAU,IAAA;AAAA,IACjB;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKAiC,cAAcD,QAAAA,EAA8D;AAC1E,IAAA,IAAI,CAAC,IAAA,CAAK1B,WAAAA,EAAY,EAAG;AACvB,MAAA,MAAM,IAAIkB,MAAM,kCAAkC,CAAA;AAAA,IACpD;AAEA,IAAA,IAAI,IAAA,CAAKxB,YAAY,IAAA,EAAM;AACzB,MAAA,IAAA,CAAKc,YAAAA,EAAa;AAAA,IACpB;AAEA,IAAA,IAAA,CAAKd,OAAAA,GAAUyB,SAAAA,CAAUN,WAAAA,CAAYc,aAAAA,CAClCP,CAAAA,QAAAA,KAAa;AACZ,MAAA,MAAMC,IAAAA,GAAO,IAAA,CAAKC,aAAAA,CAAcF,QAAQ,CAAA;AACxC,MAAA,IAAA,CAAK3B,eAAAA,GAAkB4B,IAAAA;AACvB,MAAA,IAAA,CAAKE,IAAAA,CAAK,kBAAkBF,IAAI,CAAA;AAChCK,MAAAA,QAAAA,CAASL,IAAI,CAAA;AAAA,IACf,GACClB,CAAAA,KAAAA,KAAU;AACTE,MAAAA,OAAAA,CAAQF,KAAAA,CACN,0BAAA,EACA,IAAA,CAAKqB,qBAAAA,CAAsBrB,KAAK,CAClC,CAAA;AAAA,IACF,CAAA,EACA,KAAKZ,OACP,CAAA;AAEA,IAAA,OAAO,IAAA,CAAKG,OAAAA;AAAAA,EACd;AAAA;AAAA;AAAA;AAAA,EAKAkC,WAAWlC,OAAAA,EAAuB;AAChC,IAAA,IAAI,IAAA,CAAKM,aAAY,EAAG;AACtBmB,MAAAA,SAAAA,CAAUN,WAAAA,CAAYe,WAAWlC,OAAO,CAAA;AACxC,MAAA,IAAI,IAAA,CAAKA,YAAYA,OAAAA,EAAS;AAC5B,QAAA,IAAA,CAAKA,OAAAA,GAAU,IAAA;AAAA,MACjB;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKAmC,WAAAA,GAA6B;AAC3B,IAAA,OAAO,IAAA,CAAKpC,iBAAiBqC,QAAAA,IAAY,IAAA;AAAA,EAC3C;AAAA;AAAA;AAAA;AAAA,EAKAC,YAAAA,GAA8B;AAC5B,IAAA,OAAO,IAAA,CAAKtC,iBAAiBuC,SAAAA,IAAa,IAAA;AAAA,EAC5C;AAAA;AAAA;AAAA;AAAA,EAKAC,WAAAA,GAA6B;AAC3B,IAAA,OAAO,IAAA,CAAKxC,iBAAiByC,QAAAA,IAAY,IAAA;AAAA,EAC3C;AAAA;AAAA;AAAA;AAAA,EAKAC,WAAAA,GAA6B;AAC3B,IAAA,OAAO,IAAA,CAAK1C,iBAAiB2C,QAAAA,IAAY,IAAA;AAAA,EAC3C;AAAA;AAAA;AAAA;AAAA,EAKAC,mBAAAA,GAAqC;AACnC,IAAA,OAAO,IAAA,CAAK5C,iBAAiB6C,gBAAAA,IAAoB,IAAA;AAAA,EACnD;AAAA;AAAA;AAAA;AAAA,EAKAC,UAAAA,GAA4B;AAC1B,IAAA,OAAO,IAAA,CAAK9C,iBAAiB+C,OAAAA,IAAW,IAAA;AAAA,EAC1C;AAAA;AAAA;AAAA;AAAA,EAKAC,QAAAA,GAA0B;AACxB,IAAA,OAAO,IAAA,CAAKhD,iBAAiBiD,KAAAA,IAAS,IAAA;AAAA,EACxC;AAAA;AAAA;AAAA;AAAA,EAKAC,iBAAAA,CACEC,IAAAA,EACAC,IAAAA,EACAC,IAAAA,EACAC,IAAAA,EACQ;AACR,IAAA,MAAMC,CAAAA,GAAI,MAAA;AACV,IAAA,MAAMC,OAAAA,GAAML,IAAAA,GAAOM,IAAAA,CAAKC,EAAAA,GAAM,GAAA;AAC9B,IAAA,MAAMC,OAAAA,GAAMN,IAAAA,GAAOI,IAAAA,CAAKC,EAAAA,GAAM,GAAA;AAC9B,IAAA,MAAME,YAAAA,GAAAA,CAAOP,IAAAA,GAAOF,IAAAA,IAAQM,IAAAA,CAAKC,EAAAA,GAAM,GAAA;AACvC,IAAA,MAAMG,YAAAA,GAAAA,CAAOP,IAAAA,GAAOF,IAAAA,IAAQK,IAAAA,CAAKC,EAAAA,GAAM,GAAA;AAEvC,IAAA,MAAMI,CAAAA,GACFL,IAAAA,CAAKM,GAAAA,CAAIH,YAAAA,GAAK,CAAC,CAAA,GAAIH,IAAAA,CAAKM,GAAAA,CAAIH,YAAAA,GAAK,CAAC,CAAA,GAChCH,IAAAA,CAAKO,GAAAA,CAAIR,OAAE,CAAA,GAAIC,IAAAA,CAAKO,GAAAA,CAAIL,OAAE,CAAA,GAAIF,IAAAA,CAAKM,GAAAA,CAAIF,YAAAA,GAAK,CAAC,CAAA,GAAIJ,IAAAA,CAAKM,GAAAA,CAAIF,YAAAA,GAAK,CAAC,CAAA;AACtE,IAAA,MAAMI,CAAAA,GAAI,CAAA,GAAIR,IAAAA,CAAKS,KAAAA,CAAMT,IAAAA,CAAKU,IAAAA,CAAKL,CAAC,CAAA,EAAGL,IAAAA,CAAKU,IAAAA,CAAK,CAAA,GAAIL,CAAC,CAAC,CAAA;AAEvD,IAAA,OAAOP,CAAAA,GAAIU,CAAAA;AAAAA,EACb;AAAA;AAAA;AAAA;AAAA,EAKAG,sBAAAA,CAAuB/B,UAAkBE,SAAAA,EAAkC;AACzE,IAAA,IAAI,CAAC,IAAA,CAAKvC,eAAAA,EACR,OAAO,IAAA;AAET,IAAA,OAAO,IAAA,CAAKkD,kBACV,IAAA,CAAKlD,eAAAA,CAAgBqC,UACrB,IAAA,CAAKrC,eAAAA,CAAgBuC,SAAAA,EACrBF,QAAAA,EACAE,SACF,CAAA;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKQV,cAAcF,QAAAA,EAAgD;AACpE,IAAA,MAAM;AAAA,MAAE0C;AAAAA,KAAO,GAAI1C,QAAAA;AAEnB,IAAA,OAAO;AAAA,MACLU,UAAUgC,MAAAA,CAAOhC,QAAAA;AAAAA,MACjBE,WAAW8B,MAAAA,CAAO9B,SAAAA;AAAAA,MAClBE,UAAU4B,MAAAA,CAAO5B,QAAAA;AAAAA,MACjBE,QAAAA,EAAU0B,OAAO1B,QAAAA,IAAY,IAAA;AAAA,MAC7BE,gBAAAA,EAAkBwB,OAAOxB,gBAAAA,IAAoB,IAAA;AAAA,MAC7CE,OAAAA,EAASsB,OAAOtB,OAAAA,IAAW,IAAA;AAAA,MAC3BE,KAAAA,EAAOoB,OAAOpB,KAAAA,IAAS,IAAA;AAAA;AAAA,MAEvBqB,SAAAA,EAAW,OAAO3C,QAAAA,CAAS2C,SAAAA,KAAc,WAAW3C,QAAAA,CAAS2C,SAAAA,GAAYC,KAAKC,GAAAA;AAAI,KACpF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKQzC,sBAAsBrB,KAAAA,EAAwC;AACpE,IAAA,MAAM+D,aAAAA,GAAwC;AAAA,MAC5C,CAAC/D,KAAAA,CAAMgE,iBAAiB,GAAG,mBAAA;AAAA,MAC3B,CAAChE,KAAAA,CAAMiE,oBAAoB,GAAG,sBAAA;AAAA,MAC9B,CAACjE,KAAAA,CAAMkE,OAAO,GAAG;AAAA,KACnB;AAEA,IAAA,MAAMjE,OAAAA,GAAU8D,aAAAA,CAAc/D,KAAAA,CAAMmE,IAAI,CAAA,IAAK,2BAAA;AAC7C,IAAA,OAAO,IAAIpD,MAAMd,OAAO,CAAA;AAAA,EAC1B;AACF;;;;;;;"}