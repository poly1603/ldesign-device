{"version":3,"file":"EventEmitter.cjs","sources":["../../src/core/EventEmitter.ts"],"sourcesContent":["import type { EventListener } from '../types'\n\n/**\n * 监听器包装器（支持优先级）\n */\ninterface ListenerWrapper<T = unknown> {\n  listener: EventListener<T>\n  priority: number\n  once: boolean\n  namespace?: string\n}\n\n/**\n * 高性能事件发射器实现\n *\n * 优化特性:\n * - 避免在emit时创建新数组,直接遍历Set\n * - 添加性能监控\n * - 优化内存使用\n * - 支持事件监听器弱引用\n * \n * 高级特性：\n * - 监听器优先级\n * - 通配符事件\n * - 命名空间\n * - 内存泄漏检测\n */\nexport class EventEmitter<\n  T extends Record<string, unknown> = Record<string, unknown>,\n> {\n  private events: Map<keyof T | string, ListenerWrapper[]> = new Map()\n  private maxListeners = 100 // 增加最大监听器数量以支持测试\n  private errorHandler?: (error: Error, event: keyof T | string) => void\n  private wildcardListeners: ListenerWrapper[] = [] // 通配符监听器\n  private isSorted = new Map<keyof T | string, boolean>() // 记录是否已排序\n\n  // 性能监控\n  private performanceMetrics = {\n    totalEmits: 0,\n    totalListenerCalls: 0,\n    errors: 0,\n    averageListenersPerEvent: 0,\n  }\n\n  // 是否启用性能监控\n  private enablePerformanceTracking = false\n\n  /**\n   * 设置最大监听器数量\n   */\n  setMaxListeners(max: number): this {\n    this.maxListeners = max\n    return this\n  }\n\n  /**\n   * 设置错误处理器\n   */\n  setErrorHandler(handler: (error: Error, event: keyof T) => void): this {\n    this.errorHandler = handler\n    return this\n  }\n\n  /**\n   * 启用性能监控\n   */\n  enablePerformanceMonitoring(enable = true): this {\n    this.enablePerformanceTracking = enable\n    return this\n  }\n\n  /**\n   * 获取性能指标\n   */\n  getPerformanceMetrics() {\n    return { ...this.performanceMetrics }\n  }\n\n  /**\n   * 重置性能指标\n   */\n  resetPerformanceMetrics(): this {\n    this.performanceMetrics = {\n      totalEmits: 0,\n      totalListenerCalls: 0,\n      errors: 0,\n      averageListenersPerEvent: 0,\n    }\n    return this\n  }\n\n  /**\n   * 添加事件监听器（支持优先级和命名空间）\n   * \n   * @param event - 事件名称（支持 '*' 通配符）\n   * @param listener - 监听器函数\n   * @param options - 配置选项\n   * @param options.priority - 优先级（数字越大优先级越高，默认0）\n   * @param options.namespace - 命名空间（用于批量移除）\n   */\n  on<K extends keyof T>(\n    event: K | '*',\n    listener: EventListener<T[K]>,\n    options: { priority?: number, namespace?: string } = {},\n  ): this {\n    const { priority = 0, namespace } = options\n\n    const wrapper: ListenerWrapper = {\n      listener: listener as EventListener<unknown>,\n      priority,\n      once: false,\n      namespace,\n    }\n\n    // 处理通配符\n    if (event === '*') {\n      this.wildcardListeners.push(wrapper)\n      // 延迟排序，标记为未排序\n      return this\n    }\n\n    if (!this.events.has(event as string)) {\n      this.events.set(event as string, [])\n    }\n\n    const listeners = this.events.get(event as string)\n    if (!listeners) return this\n\n    // 检查监听器数量限制\n    if (listeners.length >= this.maxListeners) {\n      console.warn(`Max listeners (${this.maxListeners}) exceeded for event: ${String(event)}. Consider using removeAllListeners() or increasing maxListeners.`)\n    }\n\n    listeners.push(wrapper as unknown as ListenerWrapper)\n    // 标记为未排序，延迟到emit时再排序\n    this.isSorted.set(event as string, false)\n\n    return this\n  }\n\n  /**\n   * 添加一次性事件监听器\n   */\n  once<K extends keyof T>(\n    event: K | '*',\n    listener: EventListener<T[K]>,\n    options: { priority?: number, namespace?: string } = {},\n  ): this {\n    const { priority = 0, namespace } = options\n\n    const wrapper: ListenerWrapper = {\n      listener: listener as EventListener<unknown>,\n      priority,\n      once: true,\n      namespace,\n    }\n\n    if (event === '*') {\n      this.wildcardListeners.push(wrapper)\n      return this\n    }\n\n    if (!this.events.has(event as string)) {\n      this.events.set(event as string, [])\n    }\n\n    const listeners = this.events.get(event as string)\n    if (listeners) {\n      listeners.push(wrapper as unknown as ListenerWrapper)\n    }\n    this.isSorted.set(event as string, false)\n\n    return this\n  }\n\n  /**\n   * 移除事件监听器\n   */\n  off<K extends keyof T>(event: K | '*', listener?: EventListener<T[K]>): this {\n    if (event === '*') {\n      if (listener) {\n        this.wildcardListeners = this.wildcardListeners.filter(\n          w => w.listener !== listener,\n        )\n      }\n      else {\n        this.wildcardListeners = []\n      }\n      return this\n    }\n\n    const listeners = this.events.get(event as string)\n    if (!listeners)\n      return this\n\n    if (listener) {\n      const filtered = listeners.filter(w => w.listener !== listener)\n      if (filtered.length === 0) {\n        this.events.delete(event as string)\n      }\n      else {\n        this.events.set(event as string, filtered)\n      }\n    }\n    else {\n      this.events.delete(event as string)\n    }\n\n    return this\n  }\n\n  /**\n   * 移除指定命名空间的所有监听器\n   */\n  offNamespace(namespace: string): this {\n    // 移除普通监听器\n    for (const [event, listeners] of this.events.entries()) {\n      const filtered = listeners.filter(w => w.namespace !== namespace)\n      if (filtered.length === 0) {\n        this.events.delete(event)\n      }\n      else {\n        this.events.set(event, filtered)\n      }\n    }\n\n    // 移除通配符监听器\n    this.wildcardListeners = this.wildcardListeners.filter(\n      w => w.namespace !== namespace,\n    )\n\n    return this\n  }\n\n  /**\n   * 移除监听器包装器（内部方法）\n   */\n  private removeWrapper(event: string, wrapper: ListenerWrapper): void {\n    if (event === '*') {\n      this.wildcardListeners = this.wildcardListeners.filter(w => w !== wrapper)\n      return\n    }\n\n    const listeners = this.events.get(event)\n    if (listeners) {\n      const filtered = listeners.filter(w => w !== wrapper)\n      if (filtered.length === 0) {\n        this.events.delete(event)\n      }\n      else {\n        this.events.set(event, filtered)\n      }\n    }\n  }\n\n  /**\n   * 触发事件（支持通配符监听器）\n   *\n   * 优化: 按优先级顺序执行监听器，避免创建新数组\n   */\n  emit<K extends keyof T>(event: K, data: T[K]): this {\n    const listeners = this.events.get(event as string)\n    const hasListeners = listeners && listeners.length > 0\n    const hasWildcard = this.wildcardListeners.length > 0\n    \n    if (!hasListeners && !hasWildcard) {\n      return this\n    }\n\n    // 确保监听器已排序\n    if (hasListeners && !this.isSorted.get(event as string)) {\n      listeners?.sort((a, b) => b.priority - a.priority)\n      this.isSorted.set(event as string, true)\n    }\n    \n    // 排序通配符监听器（仅在需要时，且避免重复排序）\n    if (hasWildcard && this.wildcardListeners.length > 1) {\n      // 只在添加新监听器后第一次触发时排序\n      this.wildcardListeners.sort((a, b) => b.priority - a.priority)\n    }\n\n    // 性能监控（优化：减少不必要的计算）\n    if (this.enablePerformanceTracking) {\n      const totalListeners = (listeners ? listeners.length : 0) + this.wildcardListeners.length\n      this.performanceMetrics.totalEmits++\n      this.performanceMetrics.totalListenerCalls += totalListeners\n\n      // 更新平均监听器数量（使用指数移动平均）\n      const alpha = 0.1\n      this.performanceMetrics.averageListenersPerEvent\n        = this.performanceMetrics.averageListenersPerEvent * (1 - alpha)\n          + totalListeners * alpha\n    }\n\n    // 记录需要移除的一次性监听器（复用数组以减少分配）\n    const toRemove: ListenerWrapper[] = []\n\n    // 执行普通监听器\n    if (listeners) {\n      for (let i = 0; i < listeners.length; i++) {\n        const wrapper = listeners[i]\n        try {\n          wrapper.listener(data)\n          if (wrapper.once) {\n            toRemove.push(wrapper)\n          }\n        }\n        catch (error) {\n          this.handleListenerError(error, event as string)\n        }\n      }\n    }\n\n    // 执行通配符监听器\n    if (hasWildcard) {\n      for (let i = 0; i < this.wildcardListeners.length; i++) {\n        const wrapper = this.wildcardListeners[i]\n        try {\n          wrapper.listener(data)\n          if (wrapper.once) {\n            toRemove.push(wrapper)\n          }\n        }\n        catch (error) {\n          this.handleListenerError(error, event as string)\n        }\n      }\n    }\n\n    // 移除一次性监听器（批量处理以提高效率）\n    if (toRemove.length > 0) {\n      for (let i = 0; i < toRemove.length; i++) {\n        this.removeWrapper(event as string, toRemove[i])\n      }\n    }\n\n    return this\n  }\n\n  /**\n   * 获取事件的监听器数量\n   */\n  listenerCount<K extends keyof T>(event: K | '*'): number {\n    if (event === '*') {\n      return this.wildcardListeners.length\n    }\n    const listeners = this.events.get(event as string)\n    return listeners ? listeners.length : 0\n  }\n\n  /**\n   * 获取所有事件名称\n   */\n  eventNames(): Array<keyof T | string> {\n    const names = Array.from(this.events.keys())\n    if (this.wildcardListeners.length > 0) {\n      names.push('*')\n    }\n    return names\n  }\n\n  /**\n   * 移除所有事件监听器（支持通配符模式）\n   */\n  removeAllListeners<K extends keyof T>(event?: K | '*' | string): this {\n    if (event === '*') {\n      this.wildcardListeners = []\n    }\n    else if (event) {\n      const eventStr = event as string\n      // 支持通配符模式，如 'user:*' 移除所有 user: 开头的事件\n      if (eventStr.includes('*')) {\n        const prefix = eventStr.replace('*', '')\n        const keysToDelete: string[] = []\n        \n        for (const key of this.events.keys()) {\n          if (String(key).startsWith(prefix)) {\n            keysToDelete.push(String(key))\n          }\n        }\n        \n        for (const key of keysToDelete) {\n          this.events.delete(key)\n          this.isSorted.delete(key)\n        }\n      }\n      else {\n        this.events.delete(eventStr)\n        this.isSorted.delete(eventStr)\n      }\n    }\n    else {\n      this.events.clear()\n      this.wildcardListeners = []\n      this.isSorted.clear()\n    }\n    return this\n  }\n\n  /**\n   * 获取指定事件的所有监听器\n   */\n  listeners<K extends keyof T>(event: K | '*'): EventListener<T[K]>[] {\n    if (event === '*') {\n      return this.wildcardListeners.map(w => w.listener as EventListener<T[K]>)\n    }\n    const listeners = this.events.get(event as string)\n    return listeners ? listeners.map(w => w.listener as EventListener<T[K]>) : []\n  }\n\n  /**\n   * 检查是否有指定事件的监听器\n   */\n  hasListeners<K extends keyof T>(event: K | '*'): boolean {\n    return this.listenerCount(event) > 0\n  }\n\n  /**\n   * 检测内存泄漏（监听器过多的事件）\n   * \n   * @param threshold - 阈值，默认50\n   * @returns 监听器过多的事件列表\n   */\n  detectMemoryLeaks(threshold = 50): Array<{ event: string, count: number }> {\n    const leaks: Array<{ event: string, count: number }> = []\n\n    for (const [event, listeners] of this.events.entries()) {\n      if (listeners.length > threshold) {\n        leaks.push({\n          event: String(event),\n          count: listeners.length,\n        })\n      }\n    }\n\n    if (this.wildcardListeners.length > threshold) {\n      leaks.push({\n        event: '*',\n        count: this.wildcardListeners.length,\n      })\n    }\n\n    return leaks\n  }\n\n  /**\n   * 获取所有监听器总数\n   */\n  getTotalListenerCount(): number {\n    let total = this.wildcardListeners.length\n    for (const listeners of this.events.values()) {\n      total += listeners.length\n    }\n    return total\n  }\n\n  /**\n   * 处理监听器错误\n   */\n  private handleListenerError(error: unknown, event: string): void {\n    if (this.enablePerformanceTracking) {\n      this.performanceMetrics.errors++\n    }\n\n    const err = error instanceof Error ? error : new Error(String(error))\n\n    if (this.errorHandler) {\n      this.errorHandler(err, event)\n    }\n    else {\n      console.error(`Error in event listener for \"${event}\":`, err)\n    }\n  }\n}\n"],"names":["EventEmitter","events","Map","maxListeners","wildcardListeners","isSorted","performanceMetrics","totalEmits","totalListenerCalls","errors","averageListenersPerEvent","enablePerformanceTracking","setMaxListeners","max","setErrorHandler","handler","errorHandler","enablePerformanceMonitoring","enable","getPerformanceMetrics","resetPerformanceMetrics","on","event","listener","options","priority","namespace","wrapper","once","push","has","set","listeners","get","length","console","warn","String","off","filter","w","filtered","delete","offNamespace","entries","removeWrapper","emit","data","hasListeners","hasWildcard","sort","a","b","totalListeners","alpha","toRemove","i","error","handleListenerError","listenerCount","eventNames","names","Array","from","keys","removeAllListeners","eventStr","includes","prefix","replace","keysToDelete","key","startsWith","clear","map","detectMemoryLeaks","threshold","leaks","count","getTotalListenerCount","total","values","err","Error"],"mappings":"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"}