{"version":3,"file":"DeviceDetector.js","sources":["../../src/core/DeviceDetector.ts"],"sourcesContent":["import type {\n  BatteryInfo,\n  DeviceDetectorEvents,\n  DeviceDetectorOptions,\n  DeviceInfo,\n  DeviceModule,\n  DeviceType,\n  GeolocationInfo,\n  NetworkInfo,\n  Orientation,\n} from '../types'\nimport {\n  debounce,\n  getDeviceTypeByWidth,\n  getPixelRatio,\n  getScreenOrientation,\n  isTouchDevice,\n  parseBrowser,\n  parseOS,\n} from '../utils'\nimport { memoryManager, SafeTimerManager } from '../utils/MemoryManager'\nimport { EventEmitter } from './EventEmitter'\nimport { ModuleLoader } from './ModuleLoader'\n\n/**\n * 设备检测器主类\n *\n * 这是一个高性能的设备检测器，能够：\n * - 检测设备类型（桌面、移动、平板）\n * - 监听屏幕方向变化\n * - 检测浏览器和操作系统信息\n * - 动态加载扩展模块（电池、地理位置、网络等）\n * - 提供响应式的设备信息更新\n *\n * @example\n * ```typescript\n * // 创建设备检测器实例\n * const detector = new DeviceDetector({\n *   enableResize: true,\n *   enableOrientation: true,\n *   modules: ['network', 'battery']\n * })\n *\n * // 监听设备变化\n * detector.on('deviceChange', (deviceInfo) => {\n *   \n * })\n *\n * // 获取当前设备信息\n * const deviceInfo = detector.getDeviceInfo()\n * \n * ```\n */\nexport class DeviceDetector extends EventEmitter<DeviceDetectorEvents> {\n  private options: DeviceDetectorOptions\n  private moduleLoader: ModuleLoader\n  private currentDeviceInfo: DeviceInfo\n  private resizeHandler?: () => void\n  private orientationHandler?: () => void\n  private isDestroyed = false\n  private timerManager: SafeTimerManager\n\n  // 性能优化：缓存计算结果\n  private cachedUserAgent?: string\n  private cachedOS?: { name: string, version: string }\n  private cachedBrowser?: { name: string, version: string }\n  private cachedWebGLSupport?: boolean // 缓存WebGL检测结果\n  private webglCacheExpireTime = 0 // WebGL缓存过期时间\n  private lastDetectionTime = 0\n  private readonly minDetectionInterval = 16 // 约60fps\n\n  // 缓存过期时间(毫秒)\n  private readonly cacheExpireTime = 60000 // 1分钟\n  private readonly webglCacheLifetime = 300000 // WebGL缓存5分钟\n  private cacheTimestamp = 0\n\n  // 错误处理和重试机制\n  private errorCount = 0\n  private readonly maxErrors = 5\n  private lastErrorTime = 0\n  private readonly errorCooldown = 5000 // 5秒错误冷却时间\n\n  // 性能监控（使用环形缓冲区，避免无限增长）\n  private readonly maxMetricsHistory = 100\n  private metricsHistory: number[] = []\n  private detectionMetrics = {\n    detectionCount: 0,\n    averageDetectionTime: 0,\n    lastDetectionDuration: 0,\n  }\n\n  // 模块事件桥接的取消订阅器集合\n  private moduleEventUnsubscribers: Map<string, Array<() => void>> = new Map()\n\n  // Canvas对象池（复用canvas元素）\n  private static canvasPool: HTMLCanvasElement[] = []\n  private static readonly maxCanvasPool = 2\n\n  /**\n   * 构造函数 - 创建设备检测器实例\n   *\n   * @param options 配置选项\n   * @param options.enableResize 是否启用窗口大小变化监听，默认 true\n   * @param options.enableOrientation 是否启用屏幕方向变化监听，默认 true\n   * @param options.modules 要加载的扩展模块列表，如 ['network', 'battery', 'geolocation']\n   * @param options.breakpoints 设备类型断点配置，用于判断设备类型\n   * @param options.debounceDelay 事件防抖时间（毫秒），默认 100ms\n   *\n   * @example\n   * ```typescript\n   * // 基础配置\n   * const detector = new DeviceDetector()\n   *\n   * // 自定义配置\n   * const detector = new DeviceDetector({\n   *   enableResize: true,\n   *   enableOrientation: true,\n   *   modules: ['network', 'battery'],\n   *   breakpoints: {\n   *     mobile: 768,\n   *     tablet: 1024\n   *   },\n   *   debounceDelay: 200\n   * })\n   * ```\n   */\n  constructor(options: DeviceDetectorOptions = {}) {\n    super()\n\n    // 设置默认选项\n    this.options = {\n      enableResize: true,\n      enableOrientation: true,\n      breakpoints: {\n        mobile: 768,\n        tablet: 1024,\n      },\n      debounceDelay: 100,\n      ...options,\n    }\n\n    this.timerManager = new SafeTimerManager()\n    this.moduleLoader = new ModuleLoader()\n    this.currentDeviceInfo = this.detectDevice()\n\n    this.setupEventListeners()\n\n    // 注册内存清理回调\n    memoryManager.addGCCallback(() => this.cleanupCache())\n  }\n\n  /**\n   * 获取当前设备类型\n   */\n  getDeviceType(): DeviceType {\n    return this.currentDeviceInfo.type\n  }\n\n  /**\n   * 获取当前屏幕方向\n   */\n  getOrientation(): Orientation {\n    return this.currentDeviceInfo.orientation\n  }\n\n  /**\n   * 获取完整的设备信息\n   *\n   * 返回当前设备的完整信息对象，包括：\n   * - 设备类型（desktop、mobile、tablet）\n   * - 屏幕尺寸和分辨率信息\n   * - 浏览器和操作系统信息\n   * - 设备方向和像素比\n   * - 触摸支持情况\n   *\n   * @returns DeviceInfo 设备信息对象\n   *\n   * @example\n   * ```typescript\n   * const detector = new DeviceDetector()\n   * const deviceInfo = detector.getDeviceInfo()\n   *\n   *  // 'mobile' | 'tablet' | 'desktop'\n   * \n   * \n   * \n   * \n   * ```\n   */\n  getDeviceInfo(): DeviceInfo {\n    return { ...this.currentDeviceInfo }\n  }\n\n  /**\n   * 获取检测性能指标\n   */\n  getDetectionMetrics() {\n    return { ...this.detectionMetrics }\n  }\n\n  /**\n   * 检查是否为移动设备\n   */\n  isMobile(): boolean {\n    return this.currentDeviceInfo.type === 'mobile'\n  }\n\n  /**\n   * 检查是否为平板设备\n   */\n  isTablet(): boolean {\n    return this.currentDeviceInfo.type === 'tablet'\n  }\n\n  /**\n   * 检查是否为桌面设备\n   */\n  isDesktop(): boolean {\n    return this.currentDeviceInfo.type === 'desktop'\n  }\n\n  /**\n   * 检查是否为触摸设备\n   */\n  isTouchDevice(): boolean {\n    return this.currentDeviceInfo.isTouchDevice\n  }\n\n  /**\n   * 刷新设备信息\n   */\n  refresh(): void {\n    // 强制重新检测，忽略频率限制\n    this.lastDetectionTime = 0\n    this.handleDeviceChange()\n  }\n\n  /**\n   * 动态加载扩展模块\n   */\n  async loadModule<T extends DeviceModule = DeviceModule>(\n    name: string,\n  ): Promise<T> {\n    if (this.isDestroyed) {\n      throw new Error('DeviceDetector has been destroyed')\n    }\n\n    const instance = await this.moduleLoader.loadModuleInstance<T>(name)\n\n    // 桥接模块事件到 DeviceDetector，自适应各模块事件名称\n    try {\n      const unsubs: Array<() => void> = []\n    const withEvents = instance as Partial<{ on: (event: string, handler: (info: unknown) => void) => void; off: (event: string, handler: (info: unknown) => void) => void }>\n    const hasOn = typeof withEvents.on === 'function'\n    const hasOff = typeof withEvents.off === 'function'\n\n      if (hasOn && hasOff) {\n        if (name === 'network') {\n          const handler = (info: unknown) => this.emit('networkChange', info as NetworkInfo)\n          withEvents.on?.('networkChange', handler)\n          unsubs.push(() => withEvents.off?.('networkChange', handler))\n        }\n        if (name === 'battery') {\n          const handler = (info: unknown) => this.emit('batteryChange', info as BatteryInfo)\n          withEvents.on?.('batteryChange', handler)\n          unsubs.push(() => withEvents.off?.('batteryChange', handler))\n        }\n        if (name === 'geolocation') {\n          const handler = (info: unknown) => this.emit('positionChange', info as GeolocationInfo)\n          withEvents.on?.('positionChange', handler)\n          unsubs.push(() => withEvents.off?.('positionChange', handler))\n        }\n      }\n\n      if (unsubs.length > 0) {\n        this.moduleEventUnsubscribers.set(name, unsubs)\n      }\n    }\n    catch {\n      // 忽略桥接错误，不影响模块加载\n    }\n\n    return instance\n  }\n\n  /**\n   * 卸载扩展模块\n   */\n  async unloadModule(name: string): Promise<void> {\n    const unsubs = this.moduleEventUnsubscribers.get(name)\n    if (unsubs && unsubs.length) {\n      unsubs.forEach((fn) => {\n        try {\n          fn()\n        }\n        catch { }\n      })\n      this.moduleEventUnsubscribers.delete(name)\n    }\n    await this.moduleLoader.unload(name)\n  }\n\n  /**\n   * 检查模块是否已加载\n   */\n  isModuleLoaded(name: string): boolean {\n    return this.moduleLoader.isLoaded(name)\n  }\n\n  /**\n   * 获取已加载的模块列表\n   */\n  getLoadedModules(): string[] {\n    return this.moduleLoader.getLoadedModules()\n  }\n\n  /**\n   * 销毁检测器，清理资源\n   */\n  async destroy(): Promise<void> {\n    if (this.isDestroyed)\n      return\n\n    this.isDestroyed = true\n\n    // 移除事件监听器\n    this.removeEventListeners()\n\n    // 清理定时器\n    this.timerManager.clearAll()\n\n    // 先清理模块事件桥接\n    this.moduleEventUnsubscribers.forEach((unsubs) => {\n      unsubs.forEach((fn) => {\n        try {\n          fn()\n        }\n        catch { }\n      })\n    })\n    this.moduleEventUnsubscribers.clear()\n\n    // 卸载所有模块\n    await this.moduleLoader.unloadAll()\n\n    // 清理所有事件监听器\n    this.removeAllListeners()\n\n    // 清理缓存\n    this.cleanupCache()\n    \n    // 清理性能指标历史\n    this.metricsHistory.length = 0\n    \n    // 移除内存管理器回调\n    memoryManager.removeGCCallback(() => this.cleanupCache())\n  }\n\n  /**\n   * 清理缓存\n   */\n  private cleanupCache(): void {\n    this.cachedUserAgent = undefined\n    this.cachedOS = undefined\n    this.cachedBrowser = undefined\n    this.cachedWebGLSupport = undefined\n    this.cacheTimestamp = 0\n    this.webglCacheExpireTime = 0\n  }\n\n  /**\n   * 更新性能指标\n   */\n  private updatePerformanceMetrics(detectionTime: number): void {\n    this.detectionMetrics.detectionCount++\n    this.detectionMetrics.lastDetectionDuration = detectionTime\n\n    // 使用环形缓冲区存储历史数据\n    this.metricsHistory.push(detectionTime)\n    if (this.metricsHistory.length > this.maxMetricsHistory) {\n      this.metricsHistory.shift()\n    }\n\n    // 计算平均检测时间\n    const sum = this.metricsHistory.reduce((a, b) => a + b, 0)\n    this.detectionMetrics.averageDetectionTime = sum / this.metricsHistory.length\n  }\n\n  /**\n   * 处理检测错误\n   */\n  private handleDetectionError(error: unknown): void {\n    this.errorCount++\n    this.lastErrorTime = performance.now()\n\n    console.warn('Device detection error:', error)\n\n    // 如果错误次数过多，触发错误事件\n    if (this.errorCount >= this.maxErrors) {\n      this.emit('error', {\n        message: 'Too many detection errors',\n        count: this.errorCount,\n        lastError: error as unknown,\n      } as { message: string, count: number, lastError: unknown })\n    }\n  }\n\n  /**\n   * 检测设备信息\n   */\n  private detectDevice(): DeviceInfo {\n    if (typeof window === 'undefined') {\n      // 服务端渲染环境的默认值\n      return {\n        type: 'desktop',\n        orientation: 'landscape',\n        width: 1920,\n        height: 1080,\n        pixelRatio: 1,\n        isTouchDevice: false,\n        userAgent: '',\n        os: { name: 'unknown', version: 'unknown' },\n        browser: { name: 'unknown', version: 'unknown' },\n        screen: {\n          width: 1920,\n          height: 1080,\n          pixelRatio: 1,\n          availWidth: 1920,\n          availHeight: 1080,\n        },\n        features: {\n          touch: false,\n        },\n      }\n    }\n\n    // 错误处理：检查是否在错误冷却期\n    const now = performance.now()\n    if (this.errorCount >= this.maxErrors && now - this.lastErrorTime < this.errorCooldown) {\n      return this.currentDeviceInfo\n    }\n\n    // 性能优化：限制检测频率\n    if (now - this.lastDetectionTime < this.minDetectionInterval) {\n      return this.currentDeviceInfo\n    }\n\n    const startTime = now\n    this.lastDetectionTime = now\n\n    try {\n      const width = window.innerWidth\n      const height = window.innerHeight\n      const userAgent = navigator.userAgent\n\n      // 性能优化：缓存用户代理解析结果,带过期时间\n      let os = this.cachedOS\n      let browser = this.cachedBrowser\n\n      const cacheExpired = now - this.cacheTimestamp > this.cacheExpireTime\n\n      if (this.cachedUserAgent !== userAgent || cacheExpired) {\n        this.cachedUserAgent = userAgent\n        this.cachedOS = os = parseOS(userAgent)\n        this.cachedBrowser = browser = parseBrowser(userAgent)\n        this.cacheTimestamp = now\n      }\n\n      const pixelRatio = getPixelRatio()\n      const touchDevice = isTouchDevice()\n\n      const deviceInfo: DeviceInfo = {\n        type: getDeviceTypeByWidth(width, this.options.breakpoints),\n        orientation: getScreenOrientation(),\n        width,\n        height,\n        pixelRatio,\n        isTouchDevice: touchDevice,\n        userAgent,\n        os: os || { name: 'unknown', version: 'unknown' },\n        browser: browser || { name: 'unknown', version: 'unknown' },\n        screen: {\n          width,\n          height,\n          pixelRatio,\n          availWidth: window.screen?.availWidth || width,\n          availHeight: window.screen?.availHeight || height,\n        },\n        features: {\n          touch: touchDevice,\n          webgl: typeof window !== 'undefined' ? this.detectWebGL() : false,\n        },\n      }\n\n      // 更新性能指标\n      const detectionTime = performance.now() - startTime\n      this.updatePerformanceMetrics(detectionTime)\n\n      // 重置错误计数\n      this.errorCount = 0\n\n      return deviceInfo\n    }\n    catch (error) {\n      this.handleDetectionError(error)\n      return this.currentDeviceInfo\n    }\n  }\n\n  /**\n   * 检测 WebGL 支持\n   *\n   * 优化: 缓存检测结果,复用canvas元素，减少内存分配\n   */\n  private detectWebGL(): boolean {\n    const now = Date.now()\n    \n    // 检查缓存是否有效（优化：直接比较，避免多余计算）\n    if (this.cachedWebGLSupport !== undefined && \n        this.webglCacheExpireTime > 0 &&\n        now - this.webglCacheExpireTime < this.webglCacheLifetime) {\n      return this.cachedWebGLSupport\n    }\n\n    try {\n      // 从池中获取或创建canvas（优化：减少条件判断）\n      const canvas = DeviceDetector.canvasPool.pop() || document.createElement('canvas')\n      \n      // 最小尺寸以减少内存占用\n      canvas.width = 1\n      canvas.height = 1\n      \n      // 尝试获取WebGL上下文（优化：使用更宽松的配置）\n      const gl = canvas.getContext('webgl', { \n        failIfMajorPerformanceCaveat: false,\n        antialias: false,\n        depth: false,\n        stencil: false\n      }) || canvas.getContext('experimental-webgl', {\n        failIfMajorPerformanceCaveat: false,\n        antialias: false,\n        depth: false,\n        stencil: false\n      })\n      \n      this.cachedWebGLSupport = !!gl\n\n      // 清理WebGL上下文以释放GPU内存\n      if (gl && 'getExtension' in gl) {\n        const loseContext = (gl as WebGLRenderingContext).getExtension('WEBGL_lose_context')\n        loseContext?.loseContext()\n      }\n\n      // 将canvas返回池中（优化：重置尺寸以节省内存）\n      if (DeviceDetector.canvasPool.length < DeviceDetector.maxCanvasPool) {\n        canvas.width = 1\n        canvas.height = 1\n        DeviceDetector.canvasPool.push(canvas)\n      }\n\n      this.webglCacheExpireTime = now\n      return this.cachedWebGLSupport\n    }\n    catch {\n      this.cachedWebGLSupport = false\n      this.webglCacheExpireTime = now\n      return false\n    }\n  }\n\n  /**\n   * 设置事件监听器\n   */\n  private setupEventListeners(): void {\n    if (typeof window === 'undefined')\n      return\n\n    // 窗口缩放监听\n    if (this.options.enableResize) {\n      this.resizeHandler = debounce(() => {\n        if (!this.isDestroyed) {\n          this.handleDeviceChange()\n        }\n      }, this.options.debounceDelay ?? 100)\n\n      window.addEventListener('resize', this.resizeHandler, { passive: true })\n    }\n\n    // 设备方向监听\n    if (this.options.enableOrientation) {\n      this.orientationHandler = debounce(() => {\n        if (!this.isDestroyed) {\n          this.handleDeviceChange()\n        }\n      }, this.options.debounceDelay ?? 100)\n\n      // 监听 orientationchange 事件\n      window.addEventListener('orientationchange', this.orientationHandler, {\n        passive: true,\n      })\n\n      // 同时监听 resize 事件作为备选方案\n      if (!this.options.enableResize) {\n        window.addEventListener('resize', this.orientationHandler, {\n          passive: true,\n        })\n      }\n    }\n  }\n\n  /**\n   * 处理设备变化 - 优化版本\n   */\n  private handleDeviceChange(): void {\n    if (this.isDestroyed) {\n      return\n    }\n\n    try {\n      const oldDeviceInfo = this.currentDeviceInfo\n      const newDeviceInfo = this.detectDevice()\n\n      // 只有在真正发生变化时才更新和触发事件\n      if (this.hasDeviceInfoChanged(oldDeviceInfo, newDeviceInfo)) {\n        this.currentDeviceInfo = newDeviceInfo\n\n        // 优化：直接触发事件，避免创建中间数组\n        // 检查设备类型是否发生变化\n        if (oldDeviceInfo.type !== newDeviceInfo.type) {\n          this.emit('deviceChange', newDeviceInfo)\n        }\n\n        // 检查屏幕方向是否发生变化\n        if (oldDeviceInfo.orientation !== newDeviceInfo.orientation) {\n          this.emit('orientationChange', newDeviceInfo.orientation)\n        }\n\n        // 检查尺寸是否发生变化\n        if (\n          oldDeviceInfo.width !== newDeviceInfo.width\n          || oldDeviceInfo.height !== newDeviceInfo.height\n        ) {\n          this.emit('resize', {\n            width: newDeviceInfo.width,\n            height: newDeviceInfo.height,\n          })\n        }\n      }\n    }\n    catch (error) {\n      this.handleDetectionError(error)\n    }\n  }\n\n  /**\n   * 检查设备信息是否发生变化\n   */\n  private hasDeviceInfoChanged(\n    oldInfo: DeviceInfo,\n    newInfo: DeviceInfo,\n  ): boolean {\n    return (\n      oldInfo.type !== newInfo.type\n      || oldInfo.orientation !== newInfo.orientation\n      || oldInfo.width !== newInfo.width\n      || oldInfo.height !== newInfo.height\n      || oldInfo.pixelRatio !== newInfo.pixelRatio\n    )\n  }\n\n  /**\n   * 移除事件监听器\n   */\n  private removeEventListeners(): void {\n    if (typeof window === 'undefined')\n      return\n\n    if (this.resizeHandler) {\n      window.removeEventListener('resize', this.resizeHandler)\n      this.resizeHandler = undefined\n    }\n\n    if (this.orientationHandler) {\n      window.removeEventListener('orientationchange', this.orientationHandler)\n      if (!this.options.enableResize) {\n        window.removeEventListener('resize', this.orientationHandler)\n      }\n      this.orientationHandler = undefined\n    }\n  }\n}\n"],"names":["DeviceDetector","EventEmitter","constructor","options","isDestroyed","webglCacheExpireTime","lastDetectionTime","minDetectionInterval","cacheExpireTime","webglCacheLifetime","cacheTimestamp","errorCount","maxErrors","lastErrorTime","errorCooldown","maxMetricsHistory","metricsHistory","detectionMetrics","detectionCount","averageDetectionTime","lastDetectionDuration","moduleEventUnsubscribers","Map","enableResize","enableOrientation","breakpoints","mobile","tablet","debounceDelay","timerManager","SafeTimerManager","moduleLoader","ModuleLoader","currentDeviceInfo","detectDevice","setupEventListeners","memoryManager","addGCCallback","cleanupCache","getDeviceType","type","getOrientation","orientation","getDeviceInfo","getDetectionMetrics","isMobile","isTablet","isDesktop","isTouchDevice","refresh","handleDeviceChange","loadModule","name","Error","instance","loadModuleInstance","unsubs","withEvents","hasOn","on","hasOff","off","handler","info","emit","push","length","set","unloadModule","get","forEach","fn","delete","unload","isModuleLoaded","isLoaded","getLoadedModules","destroy","removeEventListeners","clearAll","clear","unloadAll","removeAllListeners","removeGCCallback","cachedUserAgent","undefined","cachedOS","cachedBrowser","cachedWebGLSupport","updatePerformanceMetrics","detectionTime","shift","sum","reduce","a","b","handleDetectionError","error","performance","now","console","warn","message","count","lastError","window","width","height","pixelRatio","userAgent","os","version","browser","screen","availWidth","availHeight","features","touch","startTime","innerWidth","innerHeight","navigator","cacheExpired","parseOS","parseBrowser","getPixelRatio","touchDevice","deviceInfo","getDeviceTypeByWidth","getScreenOrientation","webgl","detectWebGL","Date","canvas","canvasPool","pop","document","createElement","gl","getContext","failIfMajorPerformanceCaveat","antialias","depth","stencil","loseContext","getExtension","maxCanvasPool","resizeHandler","debounce","addEventListener","passive","orientationHandler","oldDeviceInfo","newDeviceInfo","hasDeviceInfoChanged","oldInfo","newInfo","removeEventListener"],"mappings":"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"}