{"version":3,"file":"index.js","sources":["../../src/utils/index.ts"],"sourcesContent":["import type { DeviceType, Orientation } from '../types'\n\n/**\n * 高性能 LRU 缓存实现\n *\n * 优化特性:\n * - 使用Map保持插入顺序\n * - 支持TTL过期\n * - 添加性能统计\n * - 惰性删除过期项以提高性能\n */\nclass LRUCache<K, V> {\n  private cache = new Map<K, { value: V, timestamp: number }>()\n  private maxSize: number\n  private ttl: number // 缓存过期时间(毫秒)\n\n  // 性能统计\n  private stats = {\n    hits: 0,\n    misses: 0,\n    evictions: 0,\n  }\n\n  constructor(maxSize = 50, ttl = 300000) { // 默认5分钟过期\n    this.maxSize = maxSize\n    this.ttl = ttl\n  }\n\n  get(key: K): V | undefined {\n    const entry = this.cache.get(key)\n    if (entry === undefined) {\n      this.stats.misses++\n      return undefined\n    }\n\n    const now = Date.now()\n    // 检查是否过期\n    if (now - entry.timestamp > this.ttl) {\n      this.cache.delete(key)\n      this.stats.misses++\n      this.stats.evictions++\n      return undefined\n    }\n\n    this.stats.hits++\n\n    // 优化：只在需要时更新时间戳，减少Map操作\n    // 如果缓存项还很新鲜（不到TTL的10%），则不更新\n    if (now - entry.timestamp > this.ttl * 0.1) {\n      this.cache.delete(key)\n      this.cache.set(key, { value: entry.value, timestamp: now })\n    }\n\n    return entry.value\n  }\n\n  set(key: K, value: V): void {\n    const now = Date.now()\n    \n    if (this.cache.has(key)) {\n      this.cache.delete(key)\n    }\n    else if (this.cache.size >= this.maxSize) {\n      // 删除最旧的项（优化：直接删除第一个）\n      const firstKey = this.cache.keys().next().value\n      if (firstKey !== undefined) {\n        this.cache.delete(firstKey)\n        this.stats.evictions++\n      }\n    }\n    this.cache.set(key, { value, timestamp: now })\n  }\n\n  clear(): void {\n    this.cache.clear()\n    this.stats = { hits: 0, misses: 0, evictions: 0 }\n  }\n\n  /**\n   * 获取缓存统计信息\n   */\n  getStats() {\n    return {\n      ...this.stats,\n      size: this.cache.size,\n      hitRate: this.stats.hits / (this.stats.hits + this.stats.misses) || 0,\n    }\n  }\n\n  /**\n   * 清理过期项（优化：惰性清理，直接在迭代中删除）\n   */\n  cleanup(): void {\n    const now = Date.now()\n    \n    // 优化：直接在迭代中删除，避免创建临时数组\n    for (const [key, entry] of this.cache.entries()) {\n      if (now - entry.timestamp > this.ttl) {\n        this.cache.delete(key)\n        this.stats.evictions++\n      }\n    }\n  }\n}\n\n// 全局缓存实例\nconst userAgentCache = new LRUCache<\n  string,\n  {\n    os: { name: string, version: string }\n    browser: { name: string, version: string }\n  }\n>(20)\n\n/**\n * 解析用户代理字符串（带缓存）\n */\nfunction parseUserAgent(userAgent: string): {\n  os: { name: string, version: string }\n  browser: { name: string, version: string }\n} {\n  // 检查缓存\n  const cached = userAgentCache.get(userAgent)\n  if (cached) {\n    return cached\n  }\n\n  // 解析 OS\n  const os = { name: 'unknown', version: 'unknown' }\n\n  // Windows\n  const windowsMatch = userAgent.match(/Windows NT (\\d+\\.\\d+)/)\n  if (windowsMatch) {\n    os.name = 'Windows'\n    const version = windowsMatch[1]\n    const versionMap: Record<string, string> = {\n      '10.0': '10',\n      '6.3': '8.1',\n      '6.2': '8',\n      '6.1': '7',\n      '6.0': 'Vista',\n      '5.1': 'XP',\n    }\n    os.version = versionMap[version] || version\n  }\n  // macOS\n  else if (/Mac OS X/.test(userAgent)) {\n    os.name = 'macOS'\n    const macMatch = userAgent.match(/Mac OS X (\\d+[._]\\d+[._]?\\d*)/)\n    if (macMatch) {\n      os.version = macMatch[1].replace(/_/g, '.')\n    }\n  }\n  // iOS\n  else if (/iPhone|iPad|iPod/.test(userAgent)) {\n    os.name = 'iOS'\n    const iosMatch = userAgent.match(/OS (\\d+[._]\\d+[._]?\\d*)/)\n    if (iosMatch) {\n      os.version = iosMatch[1].replace(/_/g, '.')\n    }\n  }\n  // Android\n  else if (/Android/.test(userAgent)) {\n    os.name = 'Android'\n    const androidMatch = userAgent.match(/Android (\\d+\\.\\d+)/)\n    if (androidMatch) {\n      os.version = androidMatch[1]\n    }\n  }\n  // Linux\n  else if (/Linux/.test(userAgent)) {\n    os.name = 'Linux'\n  }\n\n  // 解析浏览器\n  const browser = { name: 'unknown', version: 'unknown' }\n\n  // Chrome\n  const chromeMatch = userAgent.match(/Chrome\\/(\\d+)/)\n  if (chromeMatch && !/Edg/.test(userAgent)) {\n    browser.name = 'Chrome'\n    browser.version = chromeMatch[1]\n  }\n  // Edge\n  else if (/Edg/.test(userAgent)) {\n    browser.name = 'Edge'\n    const edgeMatch = userAgent.match(/Edg\\/(\\d+)/)\n    if (edgeMatch) {\n      browser.version = edgeMatch[1]\n    }\n  }\n  // Firefox\n  else if (/Firefox/.test(userAgent)) {\n    browser.name = 'Firefox'\n    const firefoxMatch = userAgent.match(/Firefox\\/(\\d+)/)\n    if (firefoxMatch) {\n      browser.version = firefoxMatch[1]\n    }\n  }\n  // Safari\n  else if (/Safari/.test(userAgent) && !/Chrome/.test(userAgent)) {\n    browser.name = 'Safari'\n    const safariMatch = userAgent.match(/Version\\/(\\d+)/)\n    if (safariMatch) {\n      browser.version = safariMatch[1]\n    }\n  }\n\n  const result = { os, browser }\n  userAgentCache.set(userAgent, result)\n  return result\n}\n\n/**\n * 高性能防抖函数\n *\n * 优化: 返回带清理函数的包装器\n *\n * @param func - 要防抖的函数\n * @param wait - 等待时间（毫秒）\n * @param immediate - 是否立即执行\n * @returns 防抖函数及清理函数\n */\nexport function debounce<T extends (...args: unknown[]) => unknown>(\n  func: T,\n  wait: number,\n  immediate = false,\n): ((...args: Parameters<T>) => void) & { cancel: () => void } {\n  let timeout: NodeJS.Timeout | null = null\n  let result: ReturnType<T>\n\n  const debounced = (...args: Parameters<T>) => {\n    const callNow = immediate && !timeout\n\n    if (timeout) {\n      clearTimeout(timeout)\n    }\n\n    timeout = setTimeout(() => {\n      timeout = null\n      if (!immediate) {\n        result = func(...args) as ReturnType<T>\n      }\n    }, wait)\n\n    if (callNow) {\n      result = func(...args) as ReturnType<T>\n    }\n\n    return result as void\n  }\n\n  // 添加清理函数\n  debounced.cancel = () => {\n    if (timeout) {\n      clearTimeout(timeout)\n      timeout = null\n    }\n  }\n\n  return debounced\n}\n\n/**\n * 高性能节流函数\n *\n * 优化: 返回带清理函数的包装器\n *\n * @param func - 要节流的函数\n * @param wait - 等待时间（毫秒）\n * @param options - 配置选项\n * @param options.leading - 是否在开始时执行\n * @param options.trailing - 是否在结束时执行\n * @returns 节流函数及清理函数\n */\nexport function throttle<T extends (...args: unknown[]) => unknown>(\n  func: T,\n  wait: number,\n  options: { leading?: boolean, trailing?: boolean } = {},\n): ((...args: Parameters<T>) => void) & { cancel: () => void } {\n  let timeout: NodeJS.Timeout | null = null\n  let previous = 0\n  const { leading = true, trailing = true } = options\n\n  const throttled = (...args: Parameters<T>) => {\n    const now = Date.now()\n\n    if (!previous && !leading) {\n      previous = now\n    }\n\n    const remaining = wait - (now - previous)\n\n    if (remaining <= 0 || remaining > wait) {\n      if (timeout) {\n        clearTimeout(timeout)\n        timeout = null\n      }\n      previous = now\n      func(...args)\n    }\n    else if (!timeout && trailing) {\n      timeout = setTimeout(() => {\n        previous = leading ? Date.now() : 0\n        timeout = null\n        func(...args)\n      }, remaining)\n    }\n  }\n\n  // 添加清理函数\n  throttled.cancel = () => {\n    if (timeout) {\n      clearTimeout(timeout)\n      timeout = null\n    }\n    previous = 0\n  }\n\n  return throttled\n}\n\n/**\n * 检测是否为移动设备\n * @param userAgent - 可选的用户代理字符串，如果不提供则使用当前浏览器的 userAgent\n */\nexport function isMobileDevice(userAgent?: string): boolean {\n  if (typeof window === 'undefined' && !userAgent)\n    return false\n\n  const ua\n    = userAgent\n      || (typeof window !== 'undefined' ? window.navigator.userAgent : '')\n  const mobileRegex\n    = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i\n  return mobileRegex.test(ua)\n}\n\n/**\n * 检测是否为触摸设备\n */\nexport function isTouchDevice(): boolean {\n  if (typeof window === 'undefined')\n    return false\n\n  return (\n    'ontouchstart' in window\n    || navigator.maxTouchPoints > 0\n    || (((navigator as unknown as Record<string, unknown>)\n      .msMaxTouchPoints as number) || 0) > 0\n  )\n}\n\n/**\n * 根据屏幕宽度判断设备类型\n */\nexport function getDeviceTypeByWidth(\n  width: number,\n  breakpoints = { mobile: 768, tablet: 1024 },\n): DeviceType {\n  if (width < breakpoints.mobile)\n    return 'mobile'\n  if (width < breakpoints.tablet)\n    return 'tablet'\n  return 'desktop'\n}\n\n/**\n * 获取屏幕方向\n * @param width - 可选的屏幕宽度，如果不提供则使用当前窗口宽度\n * @param height - 可选的屏幕高度，如果不提供则使用当前窗口高度\n */\nexport function getScreenOrientation(\n  width?: number,\n  height?: number,\n): Orientation {\n  if (\n    typeof window === 'undefined'\n    && (width === undefined || height === undefined)\n  ) {\n    return 'landscape'\n  }\n\n  // 如果提供了宽高参数，直接使用参数判断\n  if (width !== undefined && height !== undefined) {\n    return width >= height ? 'landscape' : 'portrait'\n  }\n\n  // 优先使用 screen.orientation API\n  if (typeof window !== 'undefined' && screen.orientation) {\n    return screen.orientation.angle === 0 || screen.orientation.angle === 180\n      ? 'portrait'\n      : 'landscape'\n  }\n\n  // 降级到窗口尺寸判断\n  if (typeof window !== 'undefined')\n    return window.innerHeight > window.innerWidth ? 'portrait' : 'landscape'\n\n  return 'landscape'\n}\n\n/**\n * 解析用户代理字符串获取操作系统信息（带缓存）\n */\nexport function parseOS(userAgent: string): { name: string, version: string } {\n  return parseUserAgent(userAgent).os\n}\n\n/**\n * 解析用户代理字符串获取浏览器信息（带缓存）\n */\nexport function parseBrowser(userAgent: string): {\n  name: string\n  version: string\n} {\n  return parseUserAgent(userAgent).browser\n}\n\n/**\n * 获取设备像素比\n */\nexport function getPixelRatio(): number {\n  if (typeof window === 'undefined')\n    return 1\n  return window.devicePixelRatio || 1\n}\n\n/**\n * 检查是否支持某个 API\n */\nexport function isAPISupported(api: string): boolean {\n  if (typeof window === 'undefined')\n    return false\n\n  const parts = api.split('.')\n  let obj: Record<string, unknown> = window as unknown as Record<\n    string,\n    unknown\n  >\n\n  for (const part of parts) {\n    if (!(part in obj))\n      return false\n    obj = obj[part] as Record<string, unknown>\n  }\n\n  return true\n}\n\n/**\n * 安全地访问 navigator API\n */\nexport function safeNavigatorAccess<T>(\n  accessor: (navigator: Navigator) => T,\n  fallback: T\n): T\nexport function safeNavigatorAccess<K extends keyof Navigator>(\n  property: K,\n  fallback?: Navigator[K]\n): Navigator[K] | undefined\nexport function safeNavigatorAccess<T, K extends keyof Navigator>(\n  accessorOrProperty: ((navigator: Navigator) => T) | K,\n  fallback?: T | Navigator[K],\n): T | Navigator[K] | undefined {\n  if (typeof navigator === 'undefined')\n    return fallback\n\n  try {\n    if (typeof accessorOrProperty === 'function') {\n      return accessorOrProperty(navigator)\n    }\n    else {\n      return navigator[accessorOrProperty] ?? fallback\n    }\n  }\n  catch {\n    return fallback\n  }\n}\n\n/**\n * 格式化字节大小\n */\nexport function formatBytes(bytes: number, decimals = 2): string {\n  if (bytes === 0)\n    return '0 Bytes'\n\n  const k = 1024\n  const dm = decimals < 0 ? 0 : decimals\n  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']\n\n  const i = Math.floor(Math.log(bytes) / Math.log(k))\n\n  return `${Number.parseFloat((bytes / k ** i).toFixed(dm))} ${sizes[i]}`\n}\n\n/**\n * 生成唯一 ID\n * @param prefix - 可选的前缀\n */\nexport function generateId(prefix?: string): string {\n  const id\n    = Math.random().toString(36).substring(2, 15)\n      + Math.random().toString(36).substring(2, 15)\n  return prefix ? `${prefix}-${id}` : id\n}\n\n\n\n/**\n * 高性能的 Memoize 函数\n *\n * 使用 WeakMap 避免内存泄漏\n */\ntype Memoized<T extends (...args: any[]) => any> = ((...args: Parameters<T>) => ReturnType<T>) & {\n  clear: () => void\n  delete: (key: string) => boolean\n  size: () => number\n}\n\nexport function memoize<T extends (...args: any[]) => any>(\n  fn: T,\n  options: {\n    maxSize?: number\n    ttl?: number\n    keyGenerator?: (...args: Parameters<T>) => string\n  } = {},\n): Memoized<T> {\n  const { maxSize = 100, ttl, keyGenerator } = options\n  const cache = new Map<string, { value: ReturnType<T>, timestamp: number }>()\n\n  const memoized = ((...args: Parameters<T>): ReturnType<T> => {\n    const key = keyGenerator ? keyGenerator(...args) : JSON.stringify(args)\n    const cached = cache.get(key)\n\n    if (cached) {\n      // 检查 TTL\n      if (ttl && Date.now() - cached.timestamp > ttl) {\n        cache.delete(key)\n      }\n      else {\n        return cached.value\n      }\n    }\n\n    const value = fn(...args) as ReturnType<T>\n\n    // 限制缓存大小\n    if (cache.size >= maxSize) {\n      const firstKey = cache.keys().next().value\n      if (firstKey !== undefined) {\n        cache.delete(firstKey)\n      }\n    }\n\n    cache.set(key, { value, timestamp: Date.now() })\n    return value\n  }) as Memoized<T>\n\n  // 添加清除缓存的方法\n  memoized.clear = () => cache.clear()\n  memoized.delete = (key: string) => cache.delete(key)\n  memoized.size = () => cache.size\n\n  return memoized\n}\n\n/**\n * 延迟执行函数\n */\nexport function defer(fn: () => void): void {\n  if (typeof queueMicrotask !== 'undefined') {\n    queueMicrotask(fn)\n  }\n  else if (typeof Promise !== 'undefined') {\n    Promise.resolve().then(fn)\n  }\n  else {\n    setTimeout(fn, 0)\n  }\n}\n\n/**\n * 安全的 JSON 解析\n */\nexport function safeJSONParse<T = unknown>(\n  json: string,\n  fallback: T,\n): T {\n  try {\n    return JSON.parse(json) as T\n  }\n  catch {\n    return fallback\n  }\n}\n\n/**\n * 深度克隆对象（性能优化版）\n */\nexport function deepClone<T>(obj: T): T {\n  if (obj === null || typeof obj !== 'object') {\n    return obj\n  }\n\n  if (obj instanceof Date) {\n    return new Date(obj.getTime()) as unknown as T\n  }\n\n  if (Array.isArray(obj)) {\n    return obj.map(item => deepClone(item)) as unknown as T\n  }\n\n  if (obj instanceof Map) {\n    const cloned = new Map()\n    obj.forEach((value, key) => {\n      cloned.set(key, deepClone(value))\n    })\n    return cloned as unknown as T\n  }\n\n  if (obj instanceof Set) {\n    const cloned = new Set()\n    obj.forEach((value) => {\n      cloned.add(deepClone(value))\n    })\n    return cloned as unknown as T\n  }\n\n  const cloned = {} as T\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      cloned[key] = deepClone(obj[key])\n    }\n  }\n\n  return cloned\n}\n\n/**\n * 深度合并对象\n *\n * @param target - 目标对象\n * @param sources - 源对象数组\n * @returns 合并后的对象\n */\nexport function deepMerge<T extends Record<string, unknown>>(\n  target: T,\n  ...sources: Array<Partial<T>>\n): T {\n  if (!sources.length)\n    return target\n\n  const source = sources.shift()\n\n  if (source === undefined)\n    return target\n\n  if (isObject(target) && isObject(source)) {\n    for (const key in source) {\n      if (isObject(source[key])) {\n        if (!target[key])\n          Object.assign(target, { [key]: {} })\n        deepMerge(target[key] as Record<string, unknown>, source[key] as Record<string, unknown>)\n      }\n      else {\n        Object.assign(target, { [key]: source[key] })\n      }\n    }\n  }\n\n  return deepMerge(target, ...sources)\n}\n\n/**\n * 判断是否为对象\n */\nfunction isObject(item: unknown): item is Record<string, unknown> {\n  return item !== null && typeof item === 'object' && !Array.isArray(item)\n}\n\n/**\n * 带重试机制的异步函数执行\n *\n * @param fn - 要执行的异步函数\n * @param options - 配置选项\n * @param options.retries - 重试次数，默认 3\n * @param options.delay - 重试间隔（毫秒），默认 1000\n * @param options.backoff - 退避系数，默认 1.5\n * @param options.maxDelay - 最大延迟时间（毫秒），默认 10000\n * @param options.onRetry - 重试回调函数\n * @returns Promise\n *\n * @example\n * ```typescript\n * const result = await retry(\n *   () => fetch('/api/data'),\n *   {\n *     retries: 3,\n *     delay: 1000,\n *     backoff: 2,\n *     onRetry: (error, attempt) => {\n *       \n *     }\n *   }\n * )\n * ```\n */\nexport async function retry<T>(\n  fn: () => Promise<T>,\n  options: {\n    retries?: number\n    delay?: number\n    backoff?: number\n    maxDelay?: number\n    onRetry?: (error: Error, attempt: number) => void\n  } = {},\n): Promise<T> {\n  const {\n    retries = 3,\n    delay = 1000,\n    backoff = 1.5,\n    maxDelay = 10000,\n    onRetry,\n  } = options\n\n  let lastError: Error = new Error('No attempts made')\n  let currentDelay = delay\n\n  for (let attempt = 0; attempt <= retries; attempt++) {\n    try {\n      return await fn()\n    }\n    catch (error) {\n      lastError = error instanceof Error ? error : new Error(String(error))\n\n      if (attempt < retries) {\n        onRetry?.(lastError, attempt + 1)\n\n        await new Promise(resolve => setTimeout(resolve, currentDelay))\n\n        // 指数退避\n        currentDelay = Math.min(currentDelay * backoff, maxDelay)\n      }\n    }\n  }\n\n  if (!lastError) {\n    throw new Error('Unknown error in retry function')\n  }\n  throw new Error(lastError.message)\n}\n\n/**\n * 并发控制的异步任务池（优化版本）\n *\n * @param poolLimit - 并发限制数量\n * @param array - 任务数组\n * @param iteratorFn - 迭代函数\n * @returns Promise<结果数组>\n *\n * @example\n * ```typescript\n * const results = await asyncPool(\n *   3, // 最多3个并发\n *   [1, 2, 3, 4, 5],\n *   async (num) => {\n *     const response = await fetch(`/api/${num}`)\n *     return response.json()\n *   }\n * )\n * ```\n */\nexport async function asyncPool<T, R>(\n  poolLimit: number,\n  array: T[],\n  iteratorFn: (item: T, index: number) => Promise<R>,\n): Promise<R[]> {\n  const len = array.length\n  const results: R[] = Array.from({ length: len }) as R[]\n  const executing: Promise<void>[] = []\n\n  for (let i = 0; i < len; i++) {\n    const item = array[i]\n\n    // 优化：直接创建Promise，避免不必要的Promise.resolve包装\n    const p = (async () => {\n      results[i] = await iteratorFn(item, i)\n    })()\n\n    if (poolLimit <= len) {\n      // 优化：使用Set而不是数组以提高删除性能\n      const e: Promise<void> = p.then(() => {\n        const idx = executing.indexOf(e)\n        if (idx !== -1) {\n          executing.splice(idx, 1)\n        }\n      })\n      executing.push(e)\n\n      if (executing.length >= poolLimit) {\n        await Promise.race(executing)\n      }\n    }\n  }\n\n  // 优化：等待所有执行中的Promise，而不是results数组\n  await Promise.all(executing)\n  return results\n}\n\n/**\n * Promise 超时控制\n *\n * @param promise - 要执行的 Promise\n * @param ms - 超时时间（毫秒）\n * @param timeoutError - 自定义超时错误\n * @returns Promise\n *\n * @example\n * ```typescript\n * try {\n *   const result = await promiseTimeout(\n *     fetch('/api/data'),\n *     5000,\n *     new Error('Request timeout')\n *   )\n * } catch (error) {\n *   console.error('Timeout or error:', error)\n * }\n * ```\n */\nexport function promiseTimeout<T>(\n  promise: Promise<T>,\n  ms: number,\n  timeoutError?: Error,\n): Promise<T> {\n  return new Promise((resolve, reject) => {\n    const timer = setTimeout(() => {\n      reject(timeoutError || new Error(`Promise timeout after ${ms}ms`))\n    }, ms)\n\n    promise\n      .then((value) => {\n        clearTimeout(timer)\n        resolve(value)\n      })\n      .catch((error) => {\n        clearTimeout(timer)\n        reject(error)\n      })\n  })\n}\n\n/**\n * 异步防抖函数\n *\n * @param fn - 要防抖的异步函数\n * @param wait - 等待时间（毫秒）\n * @returns 防抖后的函数\n *\n * @example\n * ```typescript\n * const debouncedFetch = asyncDebounce(\n *   async (query: string) => {\n *     const response = await fetch(`/api/search?q=${query}`)\n *     return response.json()\n *   },\n *   300\n * )\n *\n * // 只有最后一次调用会真正执行\n * debouncedFetch('hello')\n * debouncedFetch('world') // 只有这次会执行\n * ```\n */\nexport function asyncDebounce<T extends (...args: any[]) => Promise<any>>(\n  fn: T,\n  wait: number,\n): (...args: Parameters<T>) => Promise<any> {\n  let timeout: NodeJS.Timeout | null = null\n  let pendingPromise: Promise<any> | null = null\n\n  return (...args: Parameters<T>): Promise<ReturnType<T>> => {\n    if (timeout) {\n      clearTimeout(timeout)\n    }\n\n    if (!pendingPromise) {\n      pendingPromise = new Promise<any>((resolve, reject) => {\n        timeout = setTimeout(async () => {\n          timeout = null\n          try {\n            const result = await fn(...args)\n            resolve(result)\n          }\n          catch (error) {\n            reject(error)\n          }\n          finally {\n            pendingPromise = null\n          }\n        }, wait)\n      })\n    }\n\n    return pendingPromise as Promise<any>\n  }\n}\n\n/**\n * 异步节流函数\n *\n * @param fn - 要节流的异步函数\n * @param wait - 等待时间（毫秒）\n * @returns 节流后的函数\n */\nexport function asyncThrottle<T extends (...args: any[]) => Promise<any>>(\n  fn: T,\n  wait: number,\n): (...args: Parameters<T>) => Promise<any> | undefined {\n  let timeout: NodeJS.Timeout | null = null\n  let previous = 0\n  let pendingPromise: Promise<any> | null = null\n\n  return async (...args: Parameters<T>): Promise<ReturnType<T> | undefined> => {\n    const now = Date.now()\n    const remaining = wait - (now - previous)\n\n    if (remaining <= 0) {\n      if (timeout) {\n        clearTimeout(timeout)\n        timeout = null\n      }\n\n      previous = now\n      pendingPromise = fn(...args)\n      return pendingPromise\n    }\n    else if (!timeout && !pendingPromise) {\n      return new Promise<any>((resolve) => {\n        timeout = setTimeout(async () => {\n          previous = Date.now()\n          timeout = null\n          pendingPromise = fn(...args)\n          const result = await pendingPromise\n          pendingPromise = null\n          resolve(result)\n        }, remaining)\n      })\n    }\n\n    return pendingPromise || undefined\n  }\n}\n\n/**\n * 睡眠函数\n *\n * @param ms - 睡眠时间（毫秒）\n * @returns Promise\n */\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms))\n}\n\n/**\n * 检查值是否为空（null、undefined、空字符串、空数组、空对象）\n *\n * @param value - 要检查的值\n * @returns 是否为空\n */\nexport function isEmpty(value: unknown): boolean {\n  if (value === null || value === undefined) {\n    return true\n  }\n\n  if (typeof value === 'string') {\n    return value.trim().length === 0\n  }\n\n  if (Array.isArray(value)) {\n    return value.length === 0\n  }\n\n  if (typeof value === 'object') {\n    return Object.keys(value).length === 0\n  }\n\n  return false\n}\n\n// 导出内存管理相关工具\nexport * from './MemoryManager'\n\n\n\n\n\n\n"],"names":["LRUCache","constructor","maxSize","ttl","cache","Map","stats","hits","misses","evictions","get","key","entry","undefined","now","Date","timestamp","delete","set","value","has","size","firstKey","keys","next","clear","getStats","hitRate","cleanup","entries","userAgentCache","parseUserAgent","userAgent","cached","os","name","version","windowsMatch","match","versionMap","test","macMatch","replace","iosMatch","androidMatch","browser","chromeMatch","edgeMatch","firefoxMatch","safariMatch","result","debounce","func","wait","immediate","timeout","debounced","args","callNow","clearTimeout","setTimeout","cancel","throttle","options","previous","leading","trailing","throttled","remaining","isMobileDevice","window","ua","navigator","mobileRegex","isTouchDevice","maxTouchPoints","msMaxTouchPoints","getDeviceTypeByWidth","width","breakpoints","mobile","tablet","getScreenOrientation","height","screen","orientation","angle","innerHeight","innerWidth","parseOS","parseBrowser","getPixelRatio","devicePixelRatio","isAPISupported","api","parts","split","obj","part","safeNavigatorAccess","accessorOrProperty","fallback","formatBytes","bytes","decimals","k","dm","sizes","i","Math","floor","log","Number","parseFloat","toFixed","generateId","prefix","id","random","toString","substring","memoize","fn","keyGenerator","memoized","JSON","stringify","defer","queueMicrotask","Promise","resolve","then","safeJSONParse","json","parse","deepClone","getTime","Array","isArray","map","item","cloned","forEach","Set","add","Object","prototype","hasOwnProperty","call","deepMerge","target","sources","length","source","shift","isObject","assign","retry","retries","delay","backoff","maxDelay","onRetry","lastError","Error","currentDelay","attempt","error","String","min","message","asyncPool","poolLimit","array","iteratorFn","len","results","from","executing","p","e","idx","indexOf","splice","push","race","all","promiseTimeout","promise","ms","timeoutError","reject","timer","catch","asyncDebounce","pendingPromise","asyncThrottle","sleep","isEmpty","trim"],"mappings":"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"}