{"version":3,"file":"performance.js","sources":["../../src/utils/performance.ts"],"sourcesContent":["/**\r\n * 性能优化工具集\r\n *\r\n * 提供防抖、节流、缓存等性能优化功能\r\n * 重复的工具函数已从 index.ts 导入，避免代码冗余\r\n */\r\n\r\n// 从 index.ts 导入通用工具函数，避免重复实现\r\nexport { debounce, memoize, throttle } from './index'\r\n\r\n// 类型导出\r\nexport type DebouncedFunction<T extends (...args: unknown[]) => unknown> = ((...args: Parameters<T>) => void) & {\r\n cancel: () => void\r\n}\r\n\r\nexport type ThrottledFunction<T extends (...args: unknown[]) => unknown> = ((...args: Parameters<T>) => void) & {\r\n cancel: () => void\r\n}\r\n\r\n/**\r\n * 懒加载管理器\r\n *\r\n * 提供模块和资源的懒加载功能\r\n */\r\nexport class LazyLoader<T = unknown> {\r\n private loaders: Map<string, () => Promise<T>>\r\n private cache: Map<string, T>\r\n private loading: Map<string, Promise<T>>\r\n\r\n constructor() {\r\n  this.loaders = new Map()\r\n  this.cache = new Map()\r\n  this.loading = new Map()\r\n }\r\n\r\n /**\r\n  * 注册懒加载器\r\n  */\r\n register(name: string, loader: () => Promise<T>): void {\r\n  this.loaders.set(name, loader)\r\n }\r\n\r\n /**\r\n  * 加载资源\r\n  */\r\n async load(name: string): Promise<T> {\r\n  // 检查缓存\r\n  if (this.cache.has(name)) {\r\n   const cached = this.cache.get(name)\r\n   if (cached !== undefined) return cached\r\n  }\r\n\r\n  // 检查是否正在加载\r\n  if (this.loading.has(name)) {\r\n   const loading = this.loading.get(name)\r\n   if (loading) return loading\r\n  }\r\n\r\n  // 获取加载器\r\n  const loader = this.loaders.get(name)\r\n  if (!loader) {\r\n   throw new Error(`Loader for \"${name}\" not found`)\r\n  }\r\n\r\n  // 开始加载\r\n  const loadingPromise = loader().then(\r\n   (resource) => {\r\n    this.cache.set(name, resource)\r\n    this.loading.delete(name)\r\n    return resource\r\n   },\r\n   (error) => {\r\n    this.loading.delete(name)\r\n    throw error\r\n   },\r\n  )\r\n\r\n  this.loading.set(name, loadingPromise)\r\n  return loadingPromise\r\n }\r\n\r\n /**\r\n  * 预加载资源\r\n  */\r\n async preload(names: string[]): Promise<void> {\r\n  await Promise.all(names.map(name => this.load(name)))\r\n }\r\n\r\n /**\r\n  * 检查是否已加载\r\n  */\r\n isLoaded(name: string): boolean {\r\n  return this.cache.has(name)\r\n }\r\n\r\n /**\r\n  * 检查是否正在加载\r\n  */\r\n isLoading(name: string): boolean {\r\n  return this.loading.has(name)\r\n }\r\n\r\n /**\r\n  * 清除缓存\r\n  */\r\n clear(name?: string): void {\r\n  if (name) {\r\n   this.cache.delete(name)\r\n  }\r\n  else {\r\n   this.cache.clear()\r\n  }\r\n }\r\n}\r\n\r\n/**\r\n * 请求动画帧节流\r\n *\r\n * 使用 requestAnimationFrame 进行节流，适用于动画和滚动事件\r\n *\r\n * @param callback 要节流的回调函数\r\n * @returns 节流后的函数\r\n */\r\nexport function rafThrottle<T extends (...args: unknown[]) => unknown>(\r\n callback: T,\r\n): ThrottledFunction<T> {\r\n let requestId: number | null = null\r\n\r\n const throttled = (...args: Parameters<T>) => {\r\n  if (requestId === null) {\r\n   requestId = requestAnimationFrame(() => {\r\n    callback(...args)\r\n    requestId = null\r\n   })\r\n  }\r\n }\r\n\r\n // 添加取消方法\r\n throttled.cancel = () => {\r\n  if (requestId !== null) {\r\n   cancelAnimationFrame(requestId)\r\n   requestId = null\r\n  }\r\n }\r\n\r\n return throttled as ThrottledFunction<T>\r\n}\r\n\r\n/**\r\n * 批处理执行器\r\n *\r\n * 将多个调用合并为一次批量执行\r\n */\r\nexport class BatchExecutor<T, R> {\r\n private batch: T[] = []\r\n private timer: ReturnType<typeof setTimeout> | null = null\r\n private promises: Array<{\r\n  resolve: (value: R) => void\r\n  reject: (error: unknown) => void\r\n }> = []\r\n\r\n constructor(\r\n  private executor: (batch: T[]) => Promise<R[]> | R[],\r\n  private options: {\r\n   maxBatchSize?: number\r\n   maxWaitTime?: number\r\n  } = {},\r\n ) {\r\n  this.options.maxBatchSize = options.maxBatchSize || 10\r\n  this.options.maxWaitTime = options.maxWaitTime || 10\r\n }\r\n\r\n /**\r\n  * 添加到批处理队列\r\n  */\r\n async add(item: T): Promise<R> {\r\n  return new Promise((resolve, reject) => {\r\n   this.batch.push(item)\r\n   this.promises.push({ resolve, reject })\r\n\r\n   // 如果达到批处理大小限制，立即执行\r\n   if (this.options.maxBatchSize && this.batch.length >= this.options.maxBatchSize) {\r\n    this.flush()\r\n   }\r\n   else {\r\n    // 否则等待一段时间\r\n    this.scheduleFlush()\r\n   }\r\n  })\r\n }\r\n\r\n /**\r\n  * 调度批处理执行\r\n  */\r\n private scheduleFlush(): void {\r\n  if (this.timer)\r\n   return\r\n\r\n  this.timer = setTimeout(() => {\r\n   this.flush()\r\n  }, this.options.maxWaitTime)\r\n }\r\n\r\n /**\r\n  * 执行批处理\r\n  */\r\n private async flush(): Promise<void> {\r\n  if (this.timer) {\r\n   clearTimeout(this.timer)\r\n   this.timer = null\r\n  }\r\n\r\n  if (this.batch.length === 0)\r\n   return\r\n\r\n  const batch = this.batch\r\n  const promises = this.promises\r\n\r\n  this.batch = []\r\n  this.promises = []\r\n\r\n  try {\r\n   const results = await this.executor(batch)\r\n\r\n   results.forEach((result, index) => {\r\n    promises[index].resolve(result)\r\n   })\r\n  }\r\n  catch (error) {\r\n   promises.forEach((promise) => {\r\n    promise.reject(error)\r\n   })\r\n  }\r\n }\r\n\r\n /**\r\n  * 强制执行批处理\r\n  */\r\n forceFlush(): Promise<void> {\r\n  return this.flush()\r\n }\r\n}\r\n"],"names":["LazyLoader","constructor","loaders","Map","cache","loading","register","name","loader","set","load","has","cached","get","undefined","Error","loadingPromise","then","resource","delete","error","preload","names","Promise","all","map","isLoaded","isLoading","clear","rafThrottle","callback","requestId","throttled","args","requestAnimationFrame","cancel","cancelAnimationFrame","BatchExecutor","executor","options","batch","timer","promises","maxBatchSize","maxWaitTime","add","item","resolve","reject","push","length","flush","scheduleFlush","setTimeout","clearTimeout","results","forEach","result","index","promise","forceFlush"],"mappings":";;;;;;;;;;;AAwBO,MAAMA,UAAAA,CAAwB;AAAA,EAKpCC,WAAAA,GAAc;AACb,IAAA,IAAA,CAAKC,OAAAA,uBAAcC,GAAAA,EAAI;AACvB,IAAA,IAAA,CAAKC,KAAAA,uBAAYD,GAAAA,EAAI;AACrB,IAAA,IAAA,CAAKE,OAAAA,uBAAcF,GAAAA,EAAI;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA,EAKAG,QAAAA,CAASC,MAAcC,MAAAA,EAAgC;AACtD,IAAA,IAAA,CAAKN,OAAAA,CAAQO,GAAAA,CAAIF,IAAAA,EAAMC,MAAM,CAAA;AAAA,EAC9B;AAAA;AAAA;AAAA;AAAA,EAKA,MAAME,KAAKH,IAAAA,EAA0B;AAEpC,IAAA,IAAI,IAAA,CAAKH,KAAAA,CAAMO,GAAAA,CAAIJ,IAAI,CAAA,EAAG;AACzB,MAAA,MAAMK,MAAAA,GAAS,IAAA,CAAKR,KAAAA,CAAMS,GAAAA,CAAIN,IAAI,CAAA;AAClC,MAAA,IAAIK,MAAAA,KAAWE,QAAW,OAAOF,MAAAA;AAAAA,IAClC;AAGA,IAAA,IAAI,IAAA,CAAKP,OAAAA,CAAQM,GAAAA,CAAIJ,IAAI,CAAA,EAAG;AAC3B,MAAA,MAAMF,OAAAA,GAAU,IAAA,CAAKA,OAAAA,CAAQQ,GAAAA,CAAIN,IAAI,CAAA;AACrC,MAAA,IAAIF,SAAS,OAAOA,OAAAA;AAAAA,IACrB;AAGA,IAAA,MAAMG,MAAAA,GAAS,IAAA,CAAKN,OAAAA,CAAQW,GAAAA,CAAIN,IAAI,CAAA;AACpC,IAAA,IAAI,CAACC,MAAAA,EAAQ;AACZ,MAAA,MAAM,IAAIO,KAAAA,CAAM,CAAA,YAAA,EAAeR,IAAI,CAAA,WAAA,CAAa,CAAA;AAAA,IACjD;AAGA,IAAA,MAAMS,cAAAA,GAAiBR,MAAAA,EAAO,CAAES,IAAAA,CAC9BC,CAAAA,QAAAA,KAAa;AACb,MAAA,IAAA,CAAKd,KAAAA,CAAMK,GAAAA,CAAIF,IAAAA,EAAMW,QAAQ,CAAA;AAC7B,MAAA,IAAA,CAAKb,OAAAA,CAAQc,OAAOZ,IAAI,CAAA;AACxB,MAAA,OAAOW,QAAAA;AAAAA,IACR,GACCE,CAAAA,KAAAA,KAAU;AACV,MAAA,IAAA,CAAKf,OAAAA,CAAQc,OAAOZ,IAAI,CAAA;AACxB,MAAA,MAAMa,KAAAA;AAAAA,IACP,CACD,CAAA;AAEA,IAAA,IAAA,CAAKf,OAAAA,CAAQI,GAAAA,CAAIF,IAAAA,EAAMS,cAAc,CAAA;AACrC,IAAA,OAAOA,cAAAA;AAAAA,EACR;AAAA;AAAA;AAAA;AAAA,EAKA,MAAMK,QAAQC,KAAAA,EAAgC;AAC7C,IAAA,MAAMC,OAAAA,CAAQC,IAAIF,KAAAA,CAAMG,GAAAA,CAAIlB,UAAQ,IAAA,CAAKG,IAAAA,CAAKH,IAAI,CAAC,CAAC,CAAA;AAAA,EACrD;AAAA;AAAA;AAAA;AAAA,EAKAmB,SAASnB,IAAAA,EAAuB;AAC/B,IAAA,OAAO,IAAA,CAAKH,KAAAA,CAAMO,GAAAA,CAAIJ,IAAI,CAAA;AAAA,EAC3B;AAAA;AAAA;AAAA;AAAA,EAKAoB,UAAUpB,IAAAA,EAAuB;AAChC,IAAA,OAAO,IAAA,CAAKF,OAAAA,CAAQM,GAAAA,CAAIJ,IAAI,CAAA;AAAA,EAC7B;AAAA;AAAA;AAAA;AAAA,EAKAqB,MAAMrB,IAAAA,EAAqB;AAC1B,IAAA,IAAIA,IAAAA,EAAM;AACT,MAAA,IAAA,CAAKH,KAAAA,CAAMe,OAAOZ,IAAI,CAAA;AAAA,IACvB,CAAA,MACK;AACJ,MAAA,IAAA,CAAKH,MAAMwB,KAAAA,EAAM;AAAA,IAClB;AAAA,EACD;AACD;AAUO,SAASC,YACfC,QAAAA,EACuB;AACvB,EAAA,IAAIC,SAAAA,GAA2B,IAAA;AAE/B,EAAA,MAAMC,SAAAA,GAAYA,IAAIC,IAAAA,KAAwB;AAC7C,IAAA,IAAIF,cAAc,IAAA,EAAM;AACvBA,MAAAA,SAAAA,GAAYG,sBAAsB,MAAM;AACvCJ,QAAAA,QAAAA,CAAS,GAAGG,IAAI,CAAA;AAChBF,QAAAA,SAAAA,GAAY,IAAA;AAAA,MACb,CAAC,CAAA;AAAA,IACF;AAAA,EACD,CAAA;AAGAC,EAAAA,SAAAA,CAAUG,SAAS,MAAM;AACxB,IAAA,IAAIJ,cAAc,IAAA,EAAM;AACvBK,MAAAA,oBAAAA,CAAqBL,SAAS,CAAA;AAC9BA,MAAAA,SAAAA,GAAY,IAAA;AAAA,IACb;AAAA,EACD,CAAA;AAEA,EAAA,OAAOC,SAAAA;AACR;AAOO,MAAMK,aAAAA,CAAoB;AAAA,EAQhCpC,WAAAA,CACSqC,QAAAA,EACAC,OAAAA,GAGJ,EAAC,EACJ;AALOD,IAAAA,IAAAA,CAAAA,QAAAA,GAAAA,QAAAA;AACAC,IAAAA,IAAAA,CAAAA,OAAAA,GAAAA,OAAAA;AATT,IAAA,IAAA,CAAQC,QAAa,EAAA;AACrB,IAAA,IAAA,CAAQC,KAAAA,GAA8C,IAAA;AACtD,IAAA,IAAA,CAAQC,WAGH,EAAA;AASJ,IAAA,IAAA,CAAKH,OAAAA,CAAQI,YAAAA,GAAeJ,OAAAA,CAAQI,YAAAA,IAAgB,EAAA;AACpD,IAAA,IAAA,CAAKJ,OAAAA,CAAQK,WAAAA,GAAcL,OAAAA,CAAQK,WAAAA,IAAe,EAAA;AAAA,EACnD;AAAA;AAAA;AAAA;AAAA,EAKA,MAAMC,IAAIC,IAAAA,EAAqB;AAC9B,IAAA,OAAO,IAAIvB,OAAAA,CAAQ,CAACwB,OAAAA,EAASC,MAAAA,KAAW;AACvC,MAAA,IAAA,CAAKR,KAAAA,CAAMS,KAAKH,IAAI,CAAA;AACpB,MAAA,IAAA,CAAKJ,SAASO,IAAAA,CAAK;AAAA,QAAEF,OAAAA;AAAAA,QAASC;AAAAA,OAAQ,CAAA;AAGtC,MAAA,IAAI,IAAA,CAAKT,QAAQI,YAAAA,IAAgB,IAAA,CAAKH,MAAMU,MAAAA,IAAU,IAAA,CAAKX,QAAQI,YAAAA,EAAc;AAChF,QAAA,IAAA,CAAKQ,KAAAA,EAAM;AAAA,MACZ,CAAA,MACK;AAEJ,QAAA,IAAA,CAAKC,aAAAA,EAAc;AAAA,MACpB;AAAA,IACD,CAAC,CAAA;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKQA,aAAAA,GAAsB;AAC7B,IAAA,IAAI,KAAKX,KAAAA,EACR;AAED,IAAA,IAAA,CAAKA,KAAAA,GAAQY,WAAW,MAAM;AAC7B,MAAA,IAAA,CAAKF,KAAAA,EAAM;AAAA,IACZ,CAAA,EAAG,IAAA,CAAKZ,OAAAA,CAAQK,WAAW,CAAA;AAAA,EAC5B;AAAA;AAAA;AAAA;AAAA,EAKA,MAAcO,KAAAA,GAAuB;AACpC,IAAA,IAAI,KAAKV,KAAAA,EAAO;AACfa,MAAAA,YAAAA,CAAa,KAAKb,KAAK,CAAA;AACvB,MAAA,IAAA,CAAKA,KAAAA,GAAQ,IAAA;AAAA,IACd;AAEA,IAAA,IAAI,IAAA,CAAKD,KAAAA,CAAMU,MAAAA,KAAW,CAAA,EACzB;AAED,IAAA,MAAMV,QAAQ,IAAA,CAAKA,KAAAA;AACnB,IAAA,MAAME,WAAW,IAAA,CAAKA,QAAAA;AAEtB,IAAA,IAAA,CAAKF,QAAQ,EAAA;AACb,IAAA,IAAA,CAAKE,WAAW,EAAA;AAEhB,IAAA,IAAI;AACH,MAAA,MAAMa,OAAAA,GAAU,MAAM,IAAA,CAAKjB,QAAAA,CAASE,KAAK,CAAA;AAEzCe,MAAAA,OAAAA,CAAQC,OAAAA,CAAQ,CAACC,MAAAA,EAAQC,KAAAA,KAAU;AAClChB,QAAAA,QAAAA,CAASgB,KAAK,CAAA,CAAEX,OAAAA,CAAQU,MAAM,CAAA;AAAA,MAC/B,CAAC,CAAA;AAAA,IACF,SACOrC,KAAAA,EAAO;AACbsB,MAAAA,QAAAA,CAASc,QAASG,CAAAA,OAAAA,KAAY;AAC7BA,QAAAA,OAAAA,CAAQX,OAAO5B,KAAK,CAAA;AAAA,MACrB,CAAC,CAAA;AAAA,IACF;AAAA,EACD;AAAA;AAAA;AAAA;AAAA,EAKAwC,UAAAA,GAA4B;AAC3B,IAAA,OAAO,KAAKT,KAAAA,EAAM;AAAA,EACnB;AACD;;;;;;;"}