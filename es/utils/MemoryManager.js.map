{"version":3,"file":"MemoryManager.js","sources":["../../src/utils/MemoryManager.ts"],"sourcesContent":["/**\n * 内存管理器 - 统一管理应用内存使用\n * \n * 特性：\n * - 对象池管理（减少GC压力）\n * - 自动内存监控和清理\n * - 内存泄漏检测\n * - 资源生命周期管理\n */\n\ninterface PoolConfig<T = unknown> {\n  maxSize: number\n  initialSize?: number\n  resetFn?: (obj: T) => void\n  createFn: () => T\n}\n\ninterface MemoryStats {\n  usedHeapSize: number\n  totalHeapSize: number\n  heapLimit: number\n  external: number\n  gcCount: number\n  lastGCTime: number\n}\n\n/**\n * 对象池实现 - 减少对象创建和GC开销\n */\nexport class ObjectPool<T> {\n  private pool: T[] = []\n  private inUse = new Set<T>()\n  private createFn: () => T\n  private resetFn?: (obj: T) => void\n  private maxSize: number\n\n  constructor(config: PoolConfig<T>) {\n    this.maxSize = config.maxSize\n    this.createFn = config.createFn\n    this.resetFn = config.resetFn\n\n    // 预创建对象\n    const initialSize = config.initialSize || Math.min(10, config.maxSize)\n    for (let i = 0; i < initialSize; i++) {\n      this.pool.push(this.createFn())\n    }\n  }\n\n  /**\n   * 获取对象\n   */\n  acquire(): T {\n    let obj: T\n\n    if (this.pool.length > 0) {\n      const popped = this.pool.pop()\n      if (!popped) {\n        obj = this.createFn()\n      } else {\n        obj = popped\n      }\n    } else {\n      obj = this.createFn()\n    }\n\n    this.inUse.add(obj)\n    return obj\n  }\n\n  /**\n   * 释放对象\n   */\n  release(obj: T): void {\n    if (!this.inUse.has(obj)) {\n      return\n    }\n\n    this.inUse.delete(obj)\n\n    if (this.resetFn) {\n      this.resetFn(obj)\n    }\n\n    if (this.pool.length < this.maxSize) {\n      this.pool.push(obj)\n    }\n  }\n\n  /**\n   * 清空对象池\n   */\n  clear(): void {\n    this.pool.length = 0\n    this.inUse.clear()\n  }\n\n  /**\n   * 获取池统计信息\n   */\n  getStats() {\n    return {\n      poolSize: this.pool.length,\n      inUseSize: this.inUse.size,\n      totalSize: this.pool.length + this.inUse.size,\n      maxSize: this.maxSize\n    }\n  }\n}\n\n/**\n * 内存管理器\n */\nexport class MemoryManager {\n  private static instance: MemoryManager | null = null\n  private pools = new Map<string, ObjectPool<unknown>>()\n  private memoryCheckInterval: NodeJS.Timeout | null = null\n  private gcCallbacks = new Set<() => void>()\n  private memoryThreshold = 0.8 // 80%内存使用率触发清理\n  private lastGCTime = 0\n  private gcCount = 0\n  private weakRefs = new Map<string, WeakRef<object>>()\n  private finalizationRegistry: FinalizationRegistry<string>\n\n  // 性能统计\n  private stats = {\n    totalAllocations: 0,\n    totalDeallocations: 0,\n    gcTriggers: 0,\n    memoryPressureEvents: 0\n  }\n\n  private constructor() {\n    // 创建FinalizationRegistry用于追踪对象回收\n    this.finalizationRegistry = new FinalizationRegistry((heldValue) => {\n      this.onObjectFinalized(heldValue)\n    })\n\n    // 启动内存监控\n    this.startMemoryMonitoring()\n  }\n\n  /**\n   * 获取单例实例\n   */\n  static getInstance(): MemoryManager {\n    if (!MemoryManager.instance) {\n      MemoryManager.instance = new MemoryManager()\n    }\n    return MemoryManager.instance\n  }\n\n  /**\n   * 注册对象池\n   */\n  registerPool<T>(name: string, config: PoolConfig<T>): ObjectPool<T> {\n    if (this.pools.has(name)) {\n      throw new Error(`Pool \"${name}\" already exists`)\n    }\n\n    const pool = new ObjectPool<T>(config)\n    this.pools.set(name, pool as unknown as ObjectPool<unknown>)\n    return pool\n  }\n\n  /**\n   * 获取对象池\n   */\n  getPool<T>(name: string): ObjectPool<T> | undefined {\n    return this.pools.get(name) as ObjectPool<T> | undefined\n  }\n\n  /**\n   * 从池中获取对象\n   */\n  acquireFromPool<T>(poolName: string): T | undefined {\n    const pool = this.pools.get(poolName)\n    return pool?.acquire() as T | undefined\n  }\n\n  /**\n   * 释放对象到池\n   */\n  releaseToPool<T>(poolName: string, obj: T): void {\n    const pool = this.pools.get(poolName)\n    pool?.release(obj)\n  }\n\n  /**\n   * 注册弱引用对象（用于追踪大对象）\n   */\n  registerWeakRef<T extends object>(key: string, obj: T): void {\n    const weakRef = new WeakRef(obj)\n    this.weakRefs.set(key, weakRef)\n    \n    // 注册到FinalizationRegistry\n    this.finalizationRegistry.register(obj, key)\n    \n    this.stats.totalAllocations++\n  }\n\n  /**\n   * 获取弱引用对象\n   */\n  getWeakRef<T>(key: string): T | undefined {\n    const weakRef = this.weakRefs.get(key)\n    if (weakRef) {\n      const obj = weakRef.deref()\n      if (!obj) {\n        this.weakRefs.delete(key)\n      }\n      return obj as T\n    }\n    return undefined\n  }\n\n  /**\n   * 对象被回收时的回调\n   */\n  private onObjectFinalized(key: string): void {\n    this.weakRefs.delete(key)\n    this.stats.totalDeallocations++\n  }\n\n  /**\n   * 添加GC回调\n   */\n  addGCCallback(callback: () => void): void {\n    this.gcCallbacks.add(callback)\n  }\n\n  /**\n   * 移除GC回调\n   */\n  removeGCCallback(callback: () => void): void {\n    this.gcCallbacks.delete(callback)\n  }\n\n  /**\n   * 手动触发垃圾回收（建议）\n   */\n  suggestGC(): void {\n    this.gcCount++\n    this.lastGCTime = Date.now()\n    this.stats.gcTriggers++\n\n    // 清理所有对象池中的空闲对象（优化：批量处理）\n    this.pools.forEach(pool => {\n      const stats = pool.getStats()\n      // 如果池中空闲对象过多，清理一部分（优化：更激进的清理策略）\n      if (stats.poolSize > Math.max(10, stats.inUseSize)) {\n        pool.clear()\n      }\n    })\n\n    // 清理失效的弱引用（优化：直接在迭代中删除，避免创建临时数组）\n    this.weakRefs.forEach((ref, key) => {\n      if (!ref.deref()) {\n        this.weakRefs.delete(key)\n      }\n    })\n\n    // 触发GC回调（优化：使用for...of以提高性能）\n    for (const callback of this.gcCallbacks) {\n      try {\n        callback()\n      } catch (error) {\n        console.error('GC callback error:', error)\n      }\n    }\n\n    // 如果支持，触发浏览器GC\n    if (typeof window !== 'undefined' && 'gc' in (window as unknown as { gc?: () => void })) {\n      try {\n        (window as unknown as { gc?: () => void }).gc?.()\n      } catch {}\n    }\n  }\n\n  /**\n   * 获取内存统计信息\n   */\n  getMemoryStats(): MemoryStats | null {\n    if (typeof window === 'undefined' || !(performance as import('../types').ExtendedPerformance).memory) {\n      return null\n    }\n\n    const memory = (performance as import('../types').ExtendedPerformance).memory\n    if (!memory) return null\n    return {\n      usedHeapSize: memory.usedJSHeapSize,\n      totalHeapSize: memory.totalJSHeapSize,\n      heapLimit: memory.jsHeapSizeLimit,\n      external: 0,\n      gcCount: this.gcCount,\n      lastGCTime: this.lastGCTime\n    }\n  }\n\n  /**\n   * 检查内存压力\n   */\n  checkMemoryPressure(): boolean {\n    const stats = this.getMemoryStats()\n    if (!stats) return false\n\n    const usage = stats.usedHeapSize / stats.heapLimit\n    if (usage > this.memoryThreshold) {\n      this.stats.memoryPressureEvents++\n      return true\n    }\n    return false\n  }\n\n  /**\n   * 开始内存监控\n   */\n  private startMemoryMonitoring(): void {\n    if (typeof window === 'undefined') return\n\n    this.memoryCheckInterval = setInterval(() => {\n      if (this.checkMemoryPressure()) {\n        console.warn('Memory pressure detected, triggering cleanup')\n        this.suggestGC()\n      }\n    }, 30000) // 每30秒检查一次\n  }\n\n  /**\n   * 停止内存监控\n   */\n  stopMemoryMonitoring(): void {\n    if (this.memoryCheckInterval) {\n      clearInterval(this.memoryCheckInterval)\n      this.memoryCheckInterval = null\n    }\n  }\n\n  /**\n   * 获取管理器统计信息\n   */\n  getStats() {\n    const poolStats: Record<string, unknown> = {}\n    this.pools.forEach((pool, name) => {\n      poolStats[name] = pool.getStats()\n    })\n\n    return {\n      ...this.stats,\n      pools: poolStats,\n      weakRefs: this.weakRefs.size,\n      gcCallbacks: this.gcCallbacks.size,\n      memoryStats: this.getMemoryStats()\n    }\n  }\n\n  /**\n   * 销毁管理器\n   */\n  destroy(): void {\n    this.stopMemoryMonitoring()\n    this.pools.forEach(pool => pool.clear())\n    this.pools.clear()\n    this.gcCallbacks.clear()\n    this.weakRefs.clear()\n    MemoryManager.instance = null\n  }\n}\n\n/**\n * 创建可复用的对象池\n */\nexport function createReusablePool<T>(\n  name: string,\n  createFn: () => T,\n  resetFn?: (obj: T) => void,\n  maxSize = 100\n): ObjectPool<T> {\n  const manager = MemoryManager.getInstance()\n  return manager.registerPool<T>(name, {\n    maxSize,\n    createFn,\n    resetFn,\n    initialSize: Math.min(10, maxSize)\n  })\n}\n\n/**\n * 内存安全的定时器管理\n */\nexport class SafeTimerManager {\n  private timers = new Map<string, NodeJS.Timeout>()\n  private intervals = new Map<string, NodeJS.Timeout>()\n\n  /**\n   * 设置定时器（自动清理旧的）\n   */\n  setTimeout(key: string, callback: () => void, delay: number): void {\n    this.clearTimeout(key)\n    const timer = setTimeout(() => {\n      this.timers.delete(key)\n      callback()\n    }, delay)\n    this.timers.set(key, timer)\n  }\n\n  /**\n   * 清理定时器\n   */\n  clearTimeout(key: string): void {\n    const timer = this.timers.get(key)\n    if (timer) {\n      clearTimeout(timer)\n      this.timers.delete(key)\n    }\n  }\n\n  /**\n   * 设置间隔定时器\n   */\n  setInterval(key: string, callback: () => void, interval: number): void {\n    this.clearInterval(key)\n    const timer = setInterval(callback, interval)\n    this.intervals.set(key, timer)\n  }\n\n  /**\n   * 清理间隔定时器\n   */\n  clearInterval(key: string): void {\n    const timer = this.intervals.get(key)\n    if (timer) {\n      clearInterval(timer)\n      this.intervals.delete(key)\n    }\n  }\n\n  /**\n   * 清理所有定时器\n   */\n  clearAll(): void {\n    this.timers.forEach(timer => clearTimeout(timer))\n    this.intervals.forEach(timer => clearInterval(timer))\n    this.timers.clear()\n    this.intervals.clear()\n  }\n\n  /**\n   * 获取活跃定时器数量\n   */\n  getActiveCount(): { timers: number; intervals: number } {\n    return {\n      timers: this.timers.size,\n      intervals: this.intervals.size\n    }\n  }\n}\n\n// 导出单例实例\nexport const memoryManager = MemoryManager.getInstance()\nexport const timerManager = new SafeTimerManager()"],"names":["ObjectPool","constructor","config","pool","inUse","Set","maxSize","createFn","resetFn","initialSize","Math","min","i","push","acquire","obj","length","popped","pop","add","release","has","delete","clear","getStats","poolSize","inUseSize","size","totalSize","MemoryManager","pools","Map","memoryCheckInterval","gcCallbacks","memoryThreshold","lastGCTime","gcCount","weakRefs","stats","totalAllocations","totalDeallocations","gcTriggers","memoryPressureEvents","finalizationRegistry","FinalizationRegistry","heldValue","onObjectFinalized","startMemoryMonitoring","getInstance","instance","registerPool","name","Error","set","getPool","get","acquireFromPool","poolName","releaseToPool","registerWeakRef","key","weakRef","WeakRef","register","getWeakRef","deref","undefined","addGCCallback","callback","removeGCCallback","suggestGC","Date","now","forEach","max","ref","error","console","window","gc","getMemoryStats","performance","memory","usedHeapSize","usedJSHeapSize","totalHeapSize","totalJSHeapSize","heapLimit","jsHeapSizeLimit","external","checkMemoryPressure","usage","setInterval","warn","stopMemoryMonitoring","clearInterval","poolStats","memoryStats","destroy","createReusablePool","manager","SafeTimerManager","timers","intervals","setTimeout","delay","clearTimeout","timer","interval","clearAll","getActiveCount","memoryManager","timerManager"],"mappings":"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"}