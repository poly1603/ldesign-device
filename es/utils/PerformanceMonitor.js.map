{"version":3,"file":"PerformanceMonitor.js","sources":["../../src/utils/PerformanceMonitor.ts"],"sourcesContent":["/**\r\n * 性能指标接口\r\n */\r\nexport interface PerformanceMetrics {\r\n  /** FPS（每秒帧数） */\r\n  fps: number\r\n  /** 内存使用（MB） */\r\n  memory: {\r\n    used: number\r\n    total: number\r\n    percentage: number\r\n  }\r\n  /** 执行时间（毫秒） */\r\n  executionTime: Record<string, number>\r\n  /** 调用次数 */\r\n  callCount: Record<string, number>\r\n  /** 平均执行时间（毫秒） */\r\n  averageTime: Record<string, number>\r\n}\r\n\r\n/**\r\n * 性能报告接口\r\n */\r\nexport interface PerformanceReport {\r\n  /** 报告生成时间 */\r\n  timestamp: number\r\n  /** 性能指标 */\r\n  metrics: PerformanceMetrics\r\n  /** 性能警告 */\r\n  warnings: string[]\r\n  /** 优化建议 */\r\n  suggestions: string[]\r\n}\r\n\r\n/**\r\n * PerformanceMonitor 配置选项\r\n */\r\nexport interface PerformanceMonitorOptions {\r\n  /** 是否启用 */\r\n  enabled?: boolean\r\n  /** FPS 监控间隔（毫秒） */\r\n  fpsInterval?: number\r\n  /** 内存监控间隔（毫秒） */\r\n  memoryInterval?: number\r\n  /** 性能警告阈值 */\r\n  thresholds?: {\r\n    fps?: number // FPS 低于此值时发出警告\r\n    memory?: number // 内存使用率超过此值时发出警告（百分比）\r\n    executionTime?: number // 执行时间超过此值时发出警告（毫秒）\r\n  }\r\n}\r\n\r\n/**\r\n * 高性能监控工具\r\n *\r\n * 特性：\r\n * - FPS 监控\r\n * - 内存使用监控\r\n * - 函数执行时间统计\r\n * - 性能警告和建议\r\n * - 性能报告生成\r\n *\r\n * @example\r\n * ```typescript\r\n * // 创建性能监控实例\r\n * const monitor = new PerformanceMonitor({\r\n *   enabled: true,\r\n *   thresholds: {\r\n *     fps: 30,\r\n *     memory: 80,\r\n *     executionTime: 100\r\n *   }\r\n * })\r\n *\r\n * // 开始监控\r\n * monitor.start()\r\n *\r\n * // 测量函数执行时间\r\n * monitor.measure('myFunction', () => {\r\n *   // 代码执行\r\n * })\r\n *\r\n * // 获取性能报告\r\n * const report = monitor.getReport()\r\n *\r\n * // 停止监控\r\n * monitor.stop()\r\n * ```\r\n */\r\nexport class PerformanceMonitor {\r\n  private options: Required<PerformanceMonitorOptions>\r\n  private isRunning = false\r\n  private memoryTimer: NodeJS.Timeout | null = null\r\n\r\n  // 性能指标\r\n  private metrics: PerformanceMetrics = {\r\n    fps: 60,\r\n    memory: {\r\n      used: 0,\r\n      total: 0,\r\n      percentage: 0,\r\n    },\r\n    executionTime: {},\r\n    callCount: {},\r\n    averageTime: {},\r\n  }\r\n\r\n  // 性能警告\r\n  private warnings: string[] = []\r\n\r\n  // 计时器存储\r\n  private timers: Map<string, number> = new Map()\r\n\r\n  constructor(options: PerformanceMonitorOptions = {}) {\r\n    this.options = {\r\n      enabled: true,\r\n      fpsInterval: 1000,\r\n      memoryInterval: 5000,\r\n      thresholds: {\r\n        fps: 30,\r\n        memory: 80,\r\n        executionTime: 100,\r\n        ...options.thresholds,\r\n      },\r\n      ...options,\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 启动性能监控\r\n   */\r\n  start(): void {\r\n    if (!this.options.enabled || this.isRunning)\r\n      return\r\n\r\n    this.isRunning = true\r\n    this.startFPSMonitoring()\r\n    this.startMemoryMonitoring()\r\n  }\r\n\r\n  /**\r\n   * 停止性能监控\r\n   */\r\n  stop(): void {\r\n    if (!this.isRunning)\r\n      return\r\n\r\n    this.isRunning = false\r\n    this.stopFPSMonitoring()\r\n    this.stopMemoryMonitoring()\r\n  }\r\n\r\n  /**\r\n   * 测量函数执行时间\r\n   *\r\n   * @param name - 函数名称\r\n   * @param fn - 要执行的函数\r\n   * @returns 执行时间（毫秒）\r\n   */\r\n  measure<T>(name: string, fn: () => T): number {\r\n    if (!this.options.enabled) {\r\n      fn()\r\n      return 0\r\n    }\r\n\r\n    const startTime = performance.now()\r\n    fn()\r\n    const endTime = performance.now()\r\n    const duration = endTime - startTime\r\n\r\n    this.recordExecutionTime(name, duration)\r\n\r\n    return duration\r\n  }\r\n\r\n  /**\r\n   * 测量异步函数执行时间\r\n   *\r\n   * @param name - 函数名称\r\n   * @param fn - 要执行的异步函数\r\n   * @returns Promise<执行时间（毫秒）>\r\n   */\r\n  async measureAsync<T>(name: string, fn: () => Promise<T>): Promise<number> {\r\n    if (!this.options.enabled) {\r\n      await fn()\r\n      return 0\r\n    }\r\n\r\n    const startTime = performance.now()\r\n    await fn()\r\n    const endTime = performance.now()\r\n    const duration = endTime - startTime\r\n\r\n    this.recordExecutionTime(name, duration)\r\n\r\n    return duration\r\n  }\r\n\r\n  /**\r\n   * 开始计时\r\n   *\r\n   * @param name - 计时器名称\r\n   */\r\n  startTimer(name: string): void {\r\n    if (!this.options.enabled)\r\n      return\r\n\r\n    this.timers.set(name, performance.now())\r\n  }\r\n\r\n  /**\r\n   * 结束计时\r\n   *\r\n   * @param name - 计时器名称\r\n   * @returns 执行时间（毫秒）\r\n   */\r\n  endTimer(name: string): number {\r\n    if (!this.options.enabled)\r\n      return 0\r\n\r\n    const startTime = this.timers.get(name)\r\n    if (startTime === undefined) {\r\n      console.warn(`Timer \"${name}\" was not started`)\r\n      return 0\r\n    }\r\n\r\n    const endTime = performance.now()\r\n    const duration = endTime - startTime\r\n\r\n    this.timers.delete(name)\r\n    this.recordExecutionTime(name, duration)\r\n\r\n    return duration\r\n  }\r\n\r\n  /**\r\n   * 获取当前性能指标\r\n   */\r\n  getMetrics(): PerformanceMetrics {\r\n    return {\r\n      fps: this.metrics.fps,\r\n      memory: { ...this.metrics.memory },\r\n      executionTime: { ...this.metrics.executionTime },\r\n      callCount: { ...this.metrics.callCount },\r\n      averageTime: { ...this.metrics.averageTime },\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取性能报告\r\n   */\r\n  getReport(): PerformanceReport {\r\n    return {\r\n      timestamp: Date.now(),\r\n      metrics: this.getMetrics(),\r\n      warnings: [...this.warnings],\r\n      suggestions: this.generateSuggestions(),\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 清除所有统计数据\r\n   */\r\n  clear(): void {\r\n    this.metrics = {\r\n      fps: 60,\r\n      memory: {\r\n        used: 0,\r\n        total: 0,\r\n        percentage: 0,\r\n      },\r\n      executionTime: {},\r\n      callCount: {},\r\n      averageTime: {},\r\n    }\r\n    this.warnings = []\r\n    this.timers.clear()\r\n  }\r\n\r\n  /**\r\n   * 导出性能数据（JSON 格式）\r\n   */\r\n  export(): string {\r\n    return JSON.stringify(this.getReport(), null, 2)\r\n  }\r\n\r\n  /**\r\n   * 启动 FPS 监控\r\n   */\r\n  private startFPSMonitoring(): void {\r\n    if (typeof window === 'undefined')\r\n      return\r\n\r\n    let lastTime = performance.now()\r\n    let frames = 0\r\n\r\n    const measureFPS = () => {\r\n      if (!this.isRunning)\r\n        return\r\n\r\n      const currentTime = performance.now()\r\n      const deltaTime = currentTime - lastTime\r\n\r\n      frames++\r\n\r\n      if (deltaTime >= this.options.fpsInterval) {\r\n        this.metrics.fps = Math.round((frames * 1000) / deltaTime)\r\n        frames = 0\r\n        lastTime = currentTime\r\n\r\n        // 检查 FPS 警告\r\n        if (this.options.thresholds.fps && this.metrics.fps < this.options.thresholds.fps) {\r\n          this.addWarning(`Low FPS detected: ${this.metrics.fps}`)\r\n        }\r\n      }\r\n\r\n      requestAnimationFrame(measureFPS)\r\n    }\r\n\r\n    requestAnimationFrame(measureFPS)\r\n  }\r\n\r\n  /**\r\n   * 停止 FPS 监控\r\n   */\r\n  private stopFPSMonitoring(): void {\r\n    // FPS 监控使用 requestAnimationFrame，会自动停止\r\n  }\r\n\r\n  /**\r\n   * 启动内存监控\r\n   */\r\n  private startMemoryMonitoring(): void {\r\n    if (typeof window === 'undefined' || !(performance as unknown as { memory?: unknown }).memory)\r\n      return\r\n\r\n    this.memoryTimer = setInterval(() => {\r\n      if (!this.isRunning)\r\n        return\r\n\r\n      const memory = (performance as unknown as { memory?: { usedJSHeapSize: number; totalJSHeapSize: number; jsHeapSizeLimit: number } }).memory\r\n      if (memory) {\r\n        this.metrics.memory = {\r\n          used: Math.round(memory.usedJSHeapSize / 1024 / 1024),\r\n          total: Math.round(memory.totalJSHeapSize / 1024 / 1024),\r\n          percentage: Math.round(\r\n            (memory.usedJSHeapSize / memory.jsHeapSizeLimit) * 100,\r\n          ),\r\n        }\r\n\r\n        // 检查内存警告\r\n        if (this.options.thresholds.memory && this.metrics.memory.percentage > this.options.thresholds.memory) {\r\n          this.addWarning(\r\n            `High memory usage: ${this.metrics.memory.percentage}%`,\r\n          )\r\n        }\r\n      }\r\n    }, this.options.memoryInterval)\r\n  }\r\n\r\n  /**\r\n   * 停止内存监控\r\n   */\r\n  private stopMemoryMonitoring(): void {\r\n    if (this.memoryTimer) {\r\n      clearInterval(this.memoryTimer)\r\n      this.memoryTimer = null\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 记录执行时间\r\n   */\r\n  private recordExecutionTime(name: string, duration: number): void {\r\n    // 更新调用次数\r\n    this.metrics.callCount[name] = (this.metrics.callCount[name] || 0) + 1\r\n\r\n    // 更新执行时间\r\n    this.metrics.executionTime[name] = duration\r\n\r\n    // 计算平均执行时间\r\n    const count = this.metrics.callCount[name]\r\n    const oldAverage = this.metrics.averageTime[name] || 0\r\n    this.metrics.averageTime[name]\r\n      = (oldAverage * (count - 1) + duration) / count\r\n\r\n    // 检查执行时间警告\r\n    if (this.options.thresholds.executionTime && duration > this.options.thresholds.executionTime) {\r\n      this.addWarning(\r\n        `Slow execution detected for \"${name}\": ${duration.toFixed(2)}ms`,\r\n      )\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 添加警告\r\n   */\r\n  private addWarning(warning: string): void {\r\n    // 避免重复警告（保留最近 10 条）\r\n    if (!this.warnings.includes(warning)) {\r\n      this.warnings.push(warning)\r\n      if (this.warnings.length > 10) {\r\n        this.warnings.shift()\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 生成优化建议\r\n   */\r\n  private generateSuggestions(): string[] {\r\n    const suggestions: string[] = []\r\n\r\n    // FPS 优化建议\r\n    if (this.metrics.fps < 30) {\r\n      suggestions.push(\r\n        'Consider optimizing animations and reducing DOM manipulations',\r\n      )\r\n    }\r\n\r\n    // 内存优化建议\r\n    if (this.metrics.memory.percentage > 80) {\r\n      suggestions.push(\r\n        'High memory usage detected. Check for memory leaks and unnecessary object retention',\r\n      )\r\n    }\r\n\r\n    // 执行时间优化建议\r\n    const slowFunctions = Object.entries(this.metrics.averageTime)\r\n      .filter(([_, time]) => this.options.thresholds.executionTime ? time > this.options.thresholds.executionTime : false)\r\n      .sort((a, b) => b[1] - a[1])\r\n      .slice(0, 3)\r\n\r\n    if (slowFunctions.length > 0) {\r\n      suggestions.push(\r\n        `Optimize slow functions: ${slowFunctions.map(([name, time]) => `${name} (${time.toFixed(2)}ms)`).join(', ')}`,\r\n      )\r\n    }\r\n\r\n    return suggestions\r\n  }\r\n}\r\n\r\n/**\r\n * 创建默认 PerformanceMonitor 实例\r\n */\r\nexport const defaultPerformanceMonitor = new PerformanceMonitor({\r\n  // eslint-disable-next-line node/prefer-global/process\r\n  enabled: typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'development',\r\n  thresholds: {\r\n    fps: 30,\r\n    memory: 80,\r\n    executionTime: 100,\r\n  },\r\n})\r\n\r\n/**\r\n * 便捷方法导出\r\n */\r\nexport const startMonitoring = () => defaultPerformanceMonitor.start()\r\nexport const stopMonitoring = () => defaultPerformanceMonitor.stop()\r\nexport function measure<T>(name: string, fn: () => T): number {\r\n  return defaultPerformanceMonitor.measure(name, fn)\r\n}\r\nexport function measureAsync<T>(name: string, fn: () => Promise<T>): Promise<number> {\r\n  return defaultPerformanceMonitor.measureAsync(name, fn)\r\n}\r\nexport const getPerformanceReport = () => defaultPerformanceMonitor.getReport()\r\n"],"names":["PerformanceMonitor","constructor","options","isRunning","memoryTimer","metrics","fps","memory","used","total","percentage","executionTime","callCount","averageTime","warnings","timers","Map","enabled","fpsInterval","memoryInterval","thresholds","start","startFPSMonitoring","startMemoryMonitoring","stop","stopFPSMonitoring","stopMemoryMonitoring","measure","name","fn","startTime","performance","now","endTime","duration","recordExecutionTime","measureAsync","startTimer","set","endTimer","get","undefined","console","warn","delete","getMetrics","getReport","timestamp","Date","suggestions","generateSuggestions","clear","export","JSON","stringify","window","lastTime","frames","measureFPS","currentTime","deltaTime","Math","round","addWarning","requestAnimationFrame","setInterval","usedJSHeapSize","totalJSHeapSize","jsHeapSizeLimit","clearInterval","count","oldAverage","toFixed","warning","includes","push","length","shift","slowFunctions","Object","entries","filter","_","time","sort","a","b","slice","map","join","defaultPerformanceMonitor","process","env","NODE_ENV","startMonitoring","stopMonitoring","getPerformanceReport"],"mappings":"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"}