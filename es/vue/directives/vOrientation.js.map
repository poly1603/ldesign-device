{"version":3,"file":"vOrientation.js","sources":["../../../src/vue/directives/vOrientation.ts"],"sourcesContent":["import type { Directive, DirectiveBinding } from 'vue'\r\nimport type { DeviceInfo, Orientation } from '../../types'\r\nimport { DeviceDetector } from '../../core/DeviceDetector'\r\n\r\ninterface ElementWithOrientationData extends HTMLElement {\r\n  __orientationChangeHandler?: (deviceInfo: DeviceInfo) => void\r\n  __deviceDetector?: DeviceDetector\r\n  __lastOrientation?: Orientation\r\n  __isVisible?: boolean\r\n  __directiveBinding?: DirectiveBinding<Orientation | Orientation[] | OrientationDirectiveValue>\r\n}\r\n\r\ninterface OrientationDirectiveValue {\r\n  orientation: Orientation | Orientation[]\r\n  inverse?: boolean\r\n  callback?: (orientation: Orientation) => void\r\n}\r\n\r\n// 全局设备检测器实例\r\nlet globalDetector: DeviceDetector | null = null\r\nlet elementCount = 0\r\n\r\n// 性能优化：批量更新队列\r\nconst updateQueue: Set<ElementWithOrientationData> = new Set()\r\nlet isUpdateScheduled = false\r\n\r\n/**\r\n * 获取全局设备检测器实例\r\n */\r\nfunction getGlobalDetector(): DeviceDetector {\r\n  if (!globalDetector) {\r\n    globalDetector = new DeviceDetector({\r\n      enableOrientation: true,\r\n      enableResize: true,\r\n    })\r\n\r\n    // 全局方向变化处理器\r\n    globalDetector.on('deviceChange', () => {\r\n      scheduleUpdate()\r\n    })\r\n\r\n    globalDetector.on('orientationChange', () => {\r\n      scheduleUpdate()\r\n    })\r\n  }\r\n  return globalDetector\r\n}\r\n\r\n/**\r\n * 调度批量更新\r\n */\r\nfunction scheduleUpdate(): void {\r\n  if (isUpdateScheduled || updateQueue.size === 0) {\r\n    return\r\n  }\r\n\r\n  isUpdateScheduled = true\r\n  requestAnimationFrame(() => {\r\n    const elementsToUpdate = Array.from(updateQueue)\r\n    updateQueue.clear()\r\n    isUpdateScheduled = false\r\n\r\n    elementsToUpdate.forEach((element) => {\r\n      if (element.isConnected && element.__directiveBinding) {\r\n        const detector = getGlobalDetector()\r\n        const currentOrientation = detector.getDeviceInfo().orientation\r\n        updateElementVisibility(element, element.__directiveBinding, currentOrientation)\r\n      }\r\n    })\r\n  })\r\n}\r\n\r\n/**\r\n * 解析指令绑定值\r\n */\r\nfunction parseDirectiveValue(value: Orientation | Orientation[] | OrientationDirectiveValue): {\r\n  orientations: Orientation[]\r\n  inverse: boolean\r\n  callback?: (orientation: Orientation) => void\r\n} {\r\n  if (typeof value === 'string') {\r\n    return {\r\n      orientations: [value],\r\n      inverse: false,\r\n    }\r\n  }\r\n\r\n  if (Array.isArray(value)) {\r\n    return {\r\n      orientations: value,\r\n      inverse: false,\r\n    }\r\n  }\r\n\r\n  if (typeof value === 'object' && value !== null) {\r\n    const orientations = Array.isArray(value.orientation) ? value.orientation : [value.orientation]\r\n    return {\r\n      orientations,\r\n      inverse: value.inverse || false,\r\n      callback: value.callback,\r\n    }\r\n  }\r\n\r\n  return {\r\n    orientations: [],\r\n    inverse: false,\r\n  }\r\n}\r\n\r\n/**\r\n * 检查是否应该显示元素\r\n */\r\nfunction shouldShowElement(\r\n  currentOrientation: Orientation,\r\n  targetOrientations: Orientation[],\r\n  inverse: boolean,\r\n): boolean {\r\n  const matches = targetOrientations.includes(currentOrientation)\r\n  return inverse ? !matches : matches\r\n}\r\n\r\n/**\r\n * 更新元素显示状态\r\n */\r\nfunction updateElementVisibility(\r\n  el: ElementWithOrientationData,\r\n  binding: DirectiveBinding<Orientation | Orientation[] | OrientationDirectiveValue>,\r\n  currentOrientation: Orientation,\r\n) {\r\n  // 性能优化：避免重复计算\r\n  if (el.__lastOrientation === currentOrientation) {\r\n    return\r\n  }\r\n\r\n  el.__lastOrientation = currentOrientation\r\n  const { orientations, inverse, callback } = parseDirectiveValue(binding.value)\r\n  const shouldShow = shouldShowElement(currentOrientation, orientations, inverse)\r\n\r\n  // 执行回调函数\r\n  if (callback && typeof callback === 'function') {\r\n    callback(currentOrientation)\r\n  }\r\n\r\n  // 性能优化：只在可见性真正改变时更新 DOM\r\n  if (el.__isVisible !== shouldShow) {\r\n    el.__isVisible = shouldShow\r\n\r\n    if (shouldShow) {\r\n      // 显示元素\r\n      if (el.style.display === 'none') {\r\n        el.style.display = el.dataset.originalDisplay || ''\r\n      }\r\n      el.removeAttribute('hidden')\r\n      el.classList.add('orientation-visible')\r\n      el.classList.remove('orientation-hidden')\r\n    }\r\n    else {\r\n      // 隐藏元素\r\n      if (!el.dataset.originalDisplay) {\r\n        el.dataset.originalDisplay = el.style.display || ''\r\n      }\r\n      el.style.display = 'none'\r\n      el.setAttribute('hidden', '')\r\n      el.classList.add('orientation-hidden')\r\n      el.classList.remove('orientation-visible')\r\n    }\r\n\r\n    // 添加方向相关的 CSS 类\r\n    el.classList.remove('orientation-portrait', 'orientation-landscape')\r\n    el.classList.add(`orientation-${currentOrientation}`)\r\n  }\r\n}\r\n\r\n/**\r\n * v-orientation 指令实现\r\n *\r\n * 根据屏幕方向控制元素的显示和隐藏\r\n *\r\n * @example\r\n * ```vue\r\n * <!-- 只在竖屏时显示 -->\r\n * <div v-orientation=\"'portrait'\">竖屏内容</div>\r\n *\r\n * <!-- 只在横屏时显示 -->\r\n * <div v-orientation=\"'landscape'\">横屏内容</div>\r\n *\r\n * <!-- 带回调函数 -->\r\n * <div v-orientation=\"{\r\n *   orientation: 'portrait',\r\n *   callback: (orientation) => \r\n * }\">\r\n *   竖屏内容\r\n * </div>\r\n *\r\n * <!-- 反向匹配：除了竖屏都显示 -->\r\n * <div v-orientation=\"{ orientation: 'portrait', inverse: true }\">\r\n *   横屏内容\r\n * </div>\r\n * ```\r\n */\r\nexport const vOrientation: Directive<HTMLElement, Orientation | Orientation[] | OrientationDirectiveValue> = {\r\n  mounted(el, binding) {\r\n    const detector = getGlobalDetector()\r\n    const elementWithData = el as ElementWithOrientationData\r\n    const currentOrientation = detector.getDeviceInfo().orientation\r\n\r\n    // 增加元素计数\r\n    elementCount++\r\n\r\n    // 初始化元素状态\r\n    elementWithData.__lastOrientation = undefined\r\n    elementWithData.__isVisible = undefined\r\n    elementWithData.__directiveBinding = binding\r\n\r\n    // 初始化显示状态\r\n    updateElementVisibility(elementWithData, binding, currentOrientation)\r\n\r\n    // 监听方向变化\r\n    const handleDeviceChange = () => {\r\n      updateQueue.add(elementWithData)\r\n      scheduleUpdate()\r\n    }\r\n    const handleOrientation = (_o: Orientation) => {\r\n      updateQueue.add(elementWithData)\r\n      scheduleUpdate()\r\n    }\r\n\r\n    detector.on('deviceChange', handleDeviceChange)\r\n    detector.on('orientationChange', handleOrientation)\r\n\r\n    // 存储其中一个处理器，便于解绑 deviceChange；orientationChange 的处理器不存储避免签名不匹配\r\n    elementWithData.__orientationChangeHandler = handleDeviceChange\r\n    elementWithData.__deviceDetector = detector\r\n  },\r\n\r\n  updated(el, binding) {\r\n    const elementWithData = el as ElementWithOrientationData\r\n    const detector = elementWithData.__deviceDetector\r\n\r\n    // 更新 binding 引用\r\n    elementWithData.__directiveBinding = binding\r\n\r\n    if (detector) {\r\n      const currentOrientation = detector.getDeviceInfo().orientation\r\n      updateElementVisibility(elementWithData, binding, currentOrientation)\r\n    }\r\n  },\r\n\r\n  unmounted(el) {\r\n    const elementWithData = el as ElementWithOrientationData\r\n    const detector = elementWithData.__deviceDetector\r\n    const handler = elementWithData.__orientationChangeHandler\r\n\r\n    // 减少元素计数\r\n    elementCount--\r\n\r\n    // 从更新队列中移除\r\n    updateQueue.delete(elementWithData)\r\n\r\n    if (detector && handler) {\r\n      detector.off('deviceChange', handler)\r\n    }\r\n\r\n    // 清理引用\r\n    delete elementWithData.__orientationChangeHandler\r\n    delete elementWithData.__deviceDetector\r\n    delete elementWithData.__lastOrientation\r\n    delete elementWithData.__isVisible\r\n    delete elementWithData.__directiveBinding\r\n\r\n    // 恢复原始显示状态\r\n    if (el.dataset.originalDisplay) {\r\n      el.style.display = el.dataset.originalDisplay\r\n      delete el.dataset.originalDisplay\r\n    }\r\n    el.removeAttribute('hidden')\r\n    el.classList.remove('orientation-visible', 'orientation-hidden', 'orientation-portrait', 'orientation-landscape')\r\n\r\n    // 如果没有元素使用检测器了，清理全局检测器\r\n    if (elementCount === 0 && globalDetector) {\r\n      globalDetector.destroy()\r\n      globalDetector = null\r\n    }\r\n  },\r\n}\r\n\r\n/**\r\n * 竖屏方向指令\r\n *\r\n * @example\r\n * ```vue\r\n * <div v-orientation-portrait>只在竖屏显示</div>\r\n * ```\r\n */\r\nexport const vOrientationPortrait: Directive<HTMLElement> = {\r\n  mounted(el) {\r\n    const binding = {\r\n      value: 'portrait' as const,\r\n      modifiers: {},\r\n      arg: undefined,\r\n      dir: vOrientation,\r\n      instance: null,\r\n      oldValue: null,\r\n    }\r\n    vOrientation.mounted!(el, binding, null as any, null as any)\r\n  },\r\n  updated(el) {\r\n    const binding = {\r\n      value: 'portrait' as const,\r\n      modifiers: {},\r\n      arg: undefined,\r\n      dir: vOrientation,\r\n      instance: null,\r\n      oldValue: null,\r\n    }\r\n    vOrientation.updated!(el, binding, null as any, null as any)\r\n  },\r\n  unmounted: vOrientation.unmounted,\r\n}\r\n\r\n/**\r\n * 横屏方向指令\r\n *\r\n * @example\r\n * ```vue\r\n * <div v-orientation-landscape>只在横屏显示</div>\r\n * ```\r\n */\r\nexport const vOrientationLandscape: Directive<HTMLElement> = {\r\n  mounted(el) {\r\n    const binding = {\r\n      value: 'landscape' as const,\r\n      modifiers: {},\r\n      arg: undefined,\r\n      dir: vOrientation,\r\n      instance: null,\r\n      oldValue: null,\r\n    }\r\n    vOrientation.mounted!(el, binding, null as any, null as any)\r\n  },\r\n  updated(el) {\r\n    const binding = {\r\n      value: 'landscape' as const,\r\n      modifiers: {},\r\n      arg: undefined,\r\n      dir: vOrientation,\r\n      instance: null,\r\n      oldValue: null,\r\n    }\r\n    vOrientation.updated!(el, binding, null as any, null as any)\r\n  },\r\n  unmounted: vOrientation.unmounted,\r\n}\r\n"],"names":["globalDetector","elementCount","updateQueue","Set","isUpdateScheduled","getGlobalDetector","DeviceDetector","enableOrientation","enableResize","on","scheduleUpdate","size","requestAnimationFrame","elementsToUpdate","Array","from","clear","forEach","element","isConnected","__directiveBinding","detector","currentOrientation","getDeviceInfo","orientation","updateElementVisibility","parseDirectiveValue","value","orientations","inverse","isArray","callback","shouldShowElement","targetOrientations","matches","includes","el","binding","__lastOrientation","shouldShow","__isVisible","style","display","dataset","originalDisplay","removeAttribute","classList","add","remove","setAttribute","vOrientation","mounted","elementWithData","undefined","handleDeviceChange","handleOrientation","_o","__orientationChangeHandler","__deviceDetector","updated","unmounted","handler","delete","off","destroy","vOrientationPortrait","modifiers","arg","dir","instance","oldValue","vOrientationLandscape"],"mappings":"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"}