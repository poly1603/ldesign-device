{"version":3,"file":"vNetwork.js","sources":["../../../src/vue/directives/vNetwork.ts"],"sourcesContent":["import type { Directive, DirectiveBinding } from 'vue'\r\nimport type { NetworkInfo, NetworkStatus } from '../../types'\r\nimport { DeviceDetector } from '../../core/DeviceDetector'\r\n\r\ninterface ElementWithNetworkData extends HTMLElement {\r\n  __networkChangeHandler?: (networkInfo: NetworkInfo) => void\r\n  __deviceChangeHandler?: () => void\r\n  __deviceDetector?: DeviceDetector\r\n  __lastNetworkStatus?: NetworkStatus\r\n  __isVisible?: boolean\r\n  __directiveBinding?: DirectiveBinding<NetworkStatus | NetworkStatus[] | NetworkDirectiveValue>\r\n}\r\n\r\ninterface NetworkDirectiveValue {\r\n  status: NetworkStatus | NetworkStatus[]\r\n  inverse?: boolean\r\n  callback?: (networkInfo: NetworkInfo) => void\r\n}\r\n\r\n// 全局设备检测器实例\r\nlet globalDetector: DeviceDetector | null = null\r\nlet elementCount = 0\r\n\r\n// 性能优化：批量更新队列\r\nconst updateQueue: Set<ElementWithNetworkData> = new Set()\r\nlet isUpdateScheduled = false\r\n\r\n/**\r\n * 获取全局设备检测器实例\r\n */\r\nfunction getGlobalDetector(): DeviceDetector {\r\n  if (!globalDetector) {\r\n    globalDetector = new DeviceDetector({\r\n      modules: ['network'],\r\n    })\r\n\r\n    // 初始化网络模块\r\n    globalDetector.loadModule('network').catch((error) => {\r\n      console.warn('Failed to load network module:', error)\r\n    })\r\n  }\r\n  return globalDetector\r\n}\r\n\r\n/**\r\n * 调度批量更新\r\n */\r\nfunction scheduleUpdate(): void {\r\n  if (isUpdateScheduled || updateQueue.size === 0) {\r\n    return\r\n  }\r\n\r\n  isUpdateScheduled = true\r\n  requestAnimationFrame(() => {\r\n    const elementsToUpdate = Array.from(updateQueue)\r\n    updateQueue.clear()\r\n    isUpdateScheduled = false\r\n\r\n    elementsToUpdate.forEach(async (element) => {\r\n      if (element.isConnected && element.__directiveBinding) {\r\n        const detector = getGlobalDetector()\r\n        try {\r\n          const networkModule = await detector.loadModule<import('../../types').NetworkModule>('network')\r\n          if (networkModule && typeof networkModule.getData === 'function') {\r\n            const networkInfo = networkModule.getData()\r\n            updateElementVisibility(element, element.__directiveBinding, networkInfo)\r\n          }\r\n        }\n        catch (error) {\r\n          console.warn('Failed to get network info:', error)\r\n        }\r\n      }\r\n    })\r\n  })\r\n}\r\n\r\n/**\r\n * 解析指令绑定值\r\n */\r\nfunction parseDirectiveValue(value: NetworkStatus | NetworkStatus[] | NetworkDirectiveValue): {\r\n  statuses: NetworkStatus[]\r\n  inverse: boolean\r\n  callback?: (networkInfo: NetworkInfo) => void\r\n} {\r\n  if (typeof value === 'string') {\r\n    return {\r\n      statuses: [value],\r\n      inverse: false,\r\n    }\r\n  }\r\n\r\n  if (Array.isArray(value)) {\r\n    return {\r\n      statuses: value,\r\n      inverse: false,\r\n    }\r\n  }\r\n\r\n  if (typeof value === 'object' && value !== null) {\r\n    const statuses = Array.isArray(value.status) ? value.status : [value.status]\r\n    return {\r\n      statuses,\r\n      inverse: value.inverse || false,\r\n      callback: value.callback,\r\n    }\r\n  }\r\n\r\n  return {\r\n    statuses: [],\r\n    inverse: false,\r\n  }\r\n}\r\n\r\n/**\r\n * 检查是否应该显示元素\r\n */\r\nfunction shouldShowElement(\r\n  currentStatus: NetworkStatus,\r\n  targetStatuses: NetworkStatus[],\r\n  inverse: boolean,\r\n): boolean {\r\n  const matches = targetStatuses.includes(currentStatus)\r\n  return inverse ? !matches : matches\r\n}\r\n\r\n/**\r\n * 更新元素显示状态\r\n */\r\nfunction updateElementVisibility(\r\n  el: ElementWithNetworkData,\r\n  binding: DirectiveBinding<NetworkStatus | NetworkStatus[] | NetworkDirectiveValue>,\r\n  networkInfo: NetworkInfo,\r\n) {\r\n  const currentStatus = networkInfo.status\r\n\r\n  // 性能优化：避免重复计算\r\n  if (el.__lastNetworkStatus === currentStatus) {\r\n    return\r\n  }\r\n\r\n  el.__lastNetworkStatus = currentStatus\r\n  const { statuses, inverse, callback } = parseDirectiveValue(binding.value)\r\n  const shouldShow = shouldShowElement(currentStatus, statuses, inverse)\r\n\r\n  // 执行回调函数\r\n  if (callback && typeof callback === 'function') {\r\n    callback(networkInfo)\r\n  }\r\n\r\n  // 性能优化：只在可见性真正改变时更新 DOM\r\n  if (el.__isVisible !== shouldShow) {\r\n    el.__isVisible = shouldShow\r\n\r\n    if (shouldShow) {\r\n      // 显示元素\r\n      if (el.style.display === 'none') {\r\n        el.style.display = el.dataset.originalDisplay || ''\r\n      }\r\n      el.removeAttribute('hidden')\r\n      el.classList.add('network-visible')\r\n      el.classList.remove('network-hidden')\r\n    }\r\n    else {\r\n      // 隐藏元素\r\n      if (!el.dataset.originalDisplay) {\r\n        el.dataset.originalDisplay = el.style.display || ''\r\n      }\r\n      el.style.display = 'none'\r\n      el.setAttribute('hidden', '')\r\n      el.classList.add('network-hidden')\r\n      el.classList.remove('network-visible')\r\n    }\r\n\r\n    // 添加网络状态相关的 CSS 类\r\n    el.classList.remove('network-online', 'network-offline')\r\n    el.classList.add(`network-${currentStatus}`)\r\n\r\n    // 添加连接类型相关的 CSS 类\r\n    if (networkInfo.type) {\r\n      el.classList.remove('network-wifi', 'network-cellular', 'network-ethernet', 'network-unknown')\r\n      el.classList.add(`network-${networkInfo.type}`)\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * v-network 指令实现\r\n *\r\n * 根据网络状态控制元素的显示和隐藏\r\n *\r\n * @example\r\n * ```vue\r\n * <!-- 只在在线时显示 -->\r\n * <div v-network=\"'online'\">在线内容</div>\r\n *\r\n * <!-- 只在离线时显示 -->\r\n * <div v-network=\"'offline'\">离线提示</div>\r\n *\r\n * <!-- 带回调函数 -->\r\n * <div v-network=\"{\r\n *   status: 'online',\r\n *   callback: (networkInfo) => \r\n * }\">\r\n *   在线内容\r\n * </div>\r\n *\r\n * <!-- 反向匹配：除了在线都显示 -->\r\n * <div v-network=\"{ status: 'online', inverse: true }\">\r\n *   离线或网络异常提示\r\n * </div>\r\n * ```\r\n */\r\nexport const vNetwork: Directive<HTMLElement, NetworkStatus | NetworkStatus[] | NetworkDirectiveValue> = {\r\n  async mounted(el, binding) {\r\n    const detector = getGlobalDetector()\r\n    const elementWithData = el as ElementWithNetworkData\r\n\r\n    // 增加元素计数\r\n    elementCount++\r\n\r\n    // 初始化元素状态\r\n    elementWithData.__lastNetworkStatus = undefined\r\n    elementWithData.__isVisible = undefined\r\n    elementWithData.__directiveBinding = binding\r\n\r\n    try {\r\n      // 加载网络模块并获取初始状态\r\n      const networkModule = await detector.loadModule<import('../../types').NetworkModule>('network')\r\n      if (networkModule && typeof networkModule.getData === 'function') {\r\n        const networkInfo = networkModule.getData()\r\n        updateElementVisibility(elementWithData, binding, networkInfo)\r\n\r\n        // 监听网络变化\r\n        const handleNetworkChange = () => {\r\n          updateQueue.add(elementWithData)\r\n          scheduleUpdate()\r\n        }\r\n\r\n        // 如果网络模块支持事件监听\r\n        const maybeOn2 = (networkModule as any).on as ((...args: any[]) => any) | undefined\r\n        if (typeof maybeOn2 === 'function') {\r\n          maybeOn2.call(networkModule, 'networkChange', handleNetworkChange)\r\n        }\r\n\r\n        // 监听全局设备变化（可能包含网络信息）\r\n        const handleDeviceChange = () => {\r\n          updateQueue.add(elementWithData)\r\n          scheduleUpdate()\r\n        }\r\n\r\n        detector.on('deviceChange', handleDeviceChange)\r\n\r\n        // 将事件处理器存储到元素上\r\n        elementWithData.__networkChangeHandler = handleNetworkChange\r\n        elementWithData.__deviceChangeHandler = handleDeviceChange\r\n        elementWithData.__deviceDetector = detector\r\n      }\r\n    }\n    catch (error) {\r\n      console.warn('Failed to initialize network directive:', error)\r\n    }\r\n  },\r\n\r\n  updated(el, binding) {\r\n    const elementWithData = el as ElementWithNetworkData\r\n    const detector = elementWithData.__deviceDetector\r\n\r\n    // 更新 binding 引用\r\n    elementWithData.__directiveBinding = binding\r\n\r\n    if (detector) {\r\n      detector.loadModule('network').then((networkModule) => {\r\n        if (networkModule && typeof networkModule.getData === 'function') {\r\n          const networkInfo = networkModule.getData() as NetworkInfo\r\n          if (networkInfo) {\r\n            updateElementVisibility(elementWithData, binding, networkInfo)\r\n          }\r\n        }\r\n      }).catch((error) => {\r\n        console.warn('Failed to update network directive:', error)\r\n      })\r\n    }\r\n  },\r\n\r\n  unmounted(el) {\r\n    const elementWithData = el as ElementWithNetworkData\r\n    const detector = elementWithData.__deviceDetector\r\n    const networkHandler = elementWithData.__networkChangeHandler\r\n    const deviceHandler = elementWithData.__deviceChangeHandler\r\n\r\n    // 减少元素计数\r\n    elementCount--\r\n\r\n    // 从更新队列中移除\r\n    updateQueue.delete(elementWithData)\r\n\r\n    if (detector) {\r\n      if (deviceHandler) {\r\n        detector.off('deviceChange', deviceHandler)\r\n      }\r\n      if (networkHandler) {\r\n        detector.loadModule<import('../../types').NetworkModule>('network').then((networkModule) => {\r\n          if (networkModule && typeof (networkModule as any).off === 'function') {\r\n            (networkModule as any).off('networkChange', networkHandler)\r\n          }\r\n        }).catch(() => {\r\n          // 忽略错误\r\n        })\r\n      }\r\n    }\r\n\r\n    // 清理引用\r\n    delete elementWithData.__networkChangeHandler\r\n    delete elementWithData.__deviceChangeHandler\r\n    delete elementWithData.__deviceDetector\r\n    delete elementWithData.__lastNetworkStatus\r\n    delete elementWithData.__isVisible\r\n    delete elementWithData.__directiveBinding\r\n\r\n    // 恢复原始显示状态\r\n    if (el.dataset.originalDisplay) {\r\n      el.style.display = el.dataset.originalDisplay\r\n      delete el.dataset.originalDisplay\r\n    }\r\n    el.removeAttribute('hidden')\r\n    el.classList.remove(\r\n      'network-visible',\n      'network-hidden',\r\n      'network-online',\n      'network-offline',\r\n      'network-wifi',\n      'network-cellular',\n      'network-ethernet',\n      'network-unknown',\r\n    )\r\n\r\n    // 如果没有元素使用检测器了，清理全局检测器\r\n    if (elementCount === 0 && globalDetector) {\r\n      globalDetector.destroy()\r\n      globalDetector = null\r\n    }\r\n  },\r\n}\r\n\r\n/**\r\n * 在线状态指令\r\n *\r\n * @example\r\n * ```vue\r\n * <div v-network-online>在线时显示</div>\r\n * ```\r\n */\r\nexport const vNetworkOnline: Directive<HTMLElement> = {\r\n  mounted(el) {\r\n    const binding = {\r\n      value: 'online' as const,\r\n      modifiers: {},\r\n      arg: undefined,\r\n      dir: vNetwork,\r\n      instance: null,\r\n      oldValue: null,\r\n    }\r\n    vNetwork.mounted!(el, binding, null as any, null as any)\r\n  },\r\n  updated(el) {\r\n    const binding = {\r\n      value: 'online' as const,\r\n      modifiers: {},\r\n      arg: undefined,\r\n      dir: vNetwork,\r\n      instance: null,\r\n      oldValue: null,\r\n    }\r\n    vNetwork.updated!(el, binding, null as any, null as any)\r\n  },\r\n  unmounted: vNetwork.unmounted,\r\n}\r\n\r\n/**\r\n * 离线状态指令\r\n *\r\n * @example\r\n * ```vue\r\n * <div v-network-offline>离线时显示</div>\r\n * ```\r\n */\r\nexport const vNetworkOffline: Directive<HTMLElement> = {\r\n  mounted(el) {\r\n    const binding = {\r\n      value: 'offline' as const,\r\n      modifiers: {},\r\n      arg: undefined,\r\n      dir: vNetwork,\r\n      instance: null,\r\n      oldValue: null,\r\n    }\r\n    vNetwork.mounted!(el, binding, null as any, null as any)\r\n  },\r\n  updated(el) {\r\n    const binding = {\r\n      value: 'offline' as const,\r\n      modifiers: {},\r\n      arg: undefined,\r\n      dir: vNetwork,\r\n      instance: null,\r\n      oldValue: null,\r\n    }\r\n    vNetwork.updated!(el, binding, null as any, null as any)\r\n  },\r\n  unmounted: vNetwork.unmounted,\r\n}\r\n\r\n/**\r\n * 慢速网络指令（基于网络类型和速度判断）\r\n *\r\n * @example\r\n * ```vue\r\n * <div v-network-slow>网络较慢时显示的提示</div>\r\n * ```\r\n */\r\nexport const vNetworkSlow: Directive<HTMLElement> = {\r\n  mounted(el) {\r\n    // 这里可以根据实际需求定义\"慢速\"的标准\r\n    // 暂时使用离线状态作为示例\r\n    const binding = {\r\n      value: 'offline' as const,\r\n      modifiers: {},\r\n      arg: undefined,\r\n      dir: vNetwork,\r\n      instance: null,\r\n      oldValue: null,\r\n    }\r\n    vNetwork.mounted!(el, binding, null as any, null as any)\r\n  },\r\n  updated(el) {\r\n    const binding = {\r\n      value: 'offline' as const,\r\n      modifiers: {},\r\n      arg: undefined,\r\n      dir: vNetwork,\r\n      instance: null,\r\n      oldValue: null,\r\n    }\r\n    vNetwork.updated!(el, binding, null as any, null as any)\r\n  },\r\n  unmounted: vNetwork.unmounted,\r\n}\r\n"],"names":["globalDetector","elementCount","updateQueue","Set","isUpdateScheduled","getGlobalDetector","DeviceDetector","modules","loadModule","catch","error","console","warn","scheduleUpdate","size","requestAnimationFrame","elementsToUpdate","Array","from","clear","forEach","element","isConnected","__directiveBinding","detector","networkModule","getData","networkInfo","updateElementVisibility","parseDirectiveValue","value","statuses","inverse","isArray","status","callback","shouldShowElement","currentStatus","targetStatuses","matches","includes","el","binding","__lastNetworkStatus","shouldShow","__isVisible","style","display","dataset","originalDisplay","removeAttribute","classList","add","remove","setAttribute","type","vNetwork","mounted","elementWithData","undefined","handleNetworkChange","maybeOn2","on","call","handleDeviceChange","__networkChangeHandler","__deviceChangeHandler","__deviceDetector","updated","then","unmounted","networkHandler","deviceHandler","delete","off","destroy","vNetworkOnline","modifiers","arg","dir","instance","oldValue","vNetworkOffline","vNetworkSlow"],"mappings":"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"}