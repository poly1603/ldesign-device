{"version":3,"file":"vDevice.js","sources":["../../../src/vue/directives/vDevice.ts"],"sourcesContent":["import type { Directive, DirectiveBinding } from 'vue'\r\nimport type {\r\n  DeviceDirectiveValue,\r\n  DeviceInfo,\r\n  DeviceType,\r\n} from '../../types'\r\nimport { DeviceDetector } from '../../core/DeviceDetector'\r\n\r\ninterface ElementWithDeviceData extends HTMLElement {\r\n  __deviceChangeHandler?: (deviceInfo: DeviceInfo) => void\r\n  __deviceDetector?: DeviceDetector\r\n  __lastDeviceType?: DeviceType\r\n  __isVisible?: boolean\r\n  __directiveBinding?: DirectiveBinding<DeviceDirectiveValue>\r\n}\r\n\r\n// 全局设备检测器实例和性能优化\r\nlet globalDetector: DeviceDetector | null = null\r\nlet elementCount = 0\r\n// 跟踪已注册元素，以便在全局设备变化时批量更新（配合测试调用第一个回调）\r\nconst registeredElements: Set<ElementWithDeviceData> = new Set()\r\n\r\n// 性能优化：批量更新队列\r\nconst updateQueue: Set<ElementWithDeviceData> = new Set()\r\nlet isUpdateScheduled = false\r\nlet isEventListenerSet = false\r\n\r\n/**\r\n * 重置全局状态 - 仅供测试使用\r\n * @internal\r\n */\r\nexport function __resetGlobalState(): void {\r\n  if (globalDetector && typeof globalDetector.destroy === 'function') {\r\n    try {\r\n      globalDetector.destroy()\r\n    }\r\n    catch {\r\n      // 忽略销毁错误，可能是mock对象\r\n    }\r\n  }\r\n  globalDetector = null\r\n  elementCount = 0\r\n  registeredElements.clear()\r\n  updateQueue.clear()\r\n  isUpdateScheduled = false\r\n  isEventListenerSet = false\r\n}\r\n\r\n/**\r\n * 设置全局检测器 - 仅供测试使用\r\n * @internal\r\n */\r\nexport function __setGlobalDetector(detector: DeviceDetector): void {\r\n  globalDetector = detector\r\n\r\n  // 确保设置设备变化事件监听器\r\n  if (globalDetector && typeof globalDetector.on === 'function' && !isEventListenerSet) {\r\n    globalDetector.on('deviceChange', () => {\r\n      registeredElements.forEach(el => updateQueue.add(el))\r\n      scheduleUpdate()\r\n    })\r\n    isEventListenerSet = true\r\n  }\r\n}\r\n\r\n/**\r\n * 获取全局设备检测器实例 - 优化版本\r\n */\r\nfunction getGlobalDetector(): DeviceDetector {\r\n  if (!globalDetector) {\r\n    globalDetector = new DeviceDetector()\r\n  }\r\n\r\n  // 确保只设置一次事件监听器\r\n  if (!isEventListenerSet && globalDetector && typeof globalDetector.on === 'function') {\r\n    // 全局设备变化处理器：将所有已注册元素加入更新队列，再调度更新\r\n    globalDetector.on('deviceChange', () => {\r\n      registeredElements.forEach(el => updateQueue.add(el))\r\n      scheduleUpdate()\r\n    })\r\n    isEventListenerSet = true\r\n  }\r\n\r\n  return globalDetector\r\n}\r\n\r\n/**\r\n * 调度批量更新\r\n */\r\nfunction scheduleUpdate(): void {\r\n  if (isUpdateScheduled || updateQueue.size === 0) {\r\n    return\r\n  }\r\n\r\n  isUpdateScheduled = true\r\n\r\n  const process = () => {\r\n    const elementsToUpdate = Array.from(updateQueue)\r\n    updateQueue.clear()\r\n    isUpdateScheduled = false\r\n\r\n    elementsToUpdate.forEach((element) => {\r\n      // Check for binding and element connection\r\n      // Note: In test environments, isConnected might be false even for valid elements\r\n      if (element.__directiveBinding) {\r\n        const detector = getGlobalDetector()\r\n        const currentType = detector.getDeviceType()\r\n        updateElementVisibility(element, element.__directiveBinding, currentType)\r\n      }\r\n    })\r\n  }\r\n\r\n  // 使用微任务以便在测试中通过 nextTick 即可观察到更新\r\n  if (typeof queueMicrotask === 'function') {\r\n    queueMicrotask(process)\r\n  }\r\n  else {\r\n    Promise.resolve().then(process)\r\n  }\r\n}\r\n\r\n/**\r\n * 解析指令绑定值\r\n */\r\nfunction parseDirectiveValue(value: DeviceDirectiveValue): {\r\n  types: DeviceType[]\r\n  inverse: boolean\r\n} {\r\n  if (typeof value === 'string') {\r\n    return {\r\n      types: [value],\r\n      inverse: false,\r\n    }\r\n  }\r\n\r\n  if (Array.isArray(value)) {\r\n    return {\r\n      types: value,\r\n      inverse: false,\r\n    }\r\n  }\r\n\r\n  if (typeof value === 'object' && value !== null) {\r\n    const types = Array.isArray(value.type) ? value.type : [value.type]\r\n    return {\r\n      types,\r\n      inverse: value.inverse || false,\r\n    }\r\n  }\r\n\r\n  return {\r\n    types: [],\r\n    inverse: false,\r\n  }\r\n}\r\n\r\n/**\r\n * 检查是否应该显示元素\r\n */\r\nfunction shouldShowElement(\r\n  currentType: DeviceType,\r\n  targetTypes: DeviceType[],\r\n  inverse: boolean,\r\n): boolean {\r\n  const matches = targetTypes.includes(currentType)\r\n  return inverse ? !matches : matches\r\n}\r\n\r\n/**\r\n * 更新元素显示状态 - 优化版本\r\n */\r\nfunction updateElementVisibility(\r\n  el: ElementWithDeviceData,\r\n  binding: DirectiveBinding<DeviceDirectiveValue>,\r\n  currentType: DeviceType,\r\n) {\r\n  // 记录当前设备类型（用于后续比较）\r\n  el.__lastDeviceType = currentType\r\n  const { types, inverse } = parseDirectiveValue(binding.value)\r\n  const shouldShow = shouldShowElement(currentType, types, inverse)\r\n\r\n  // 只在可见性真正改变时更新 DOM\r\n  if (el.__isVisible !== shouldShow) {\r\n    el.__isVisible = shouldShow\r\n\r\n    if (shouldShow) {\r\n      // 显示元素\r\n      if (el.style.display === 'none') {\r\n        el.style.display = el.dataset.originalDisplay || ''\r\n      }\r\n      el.removeAttribute('hidden')\r\n    }\r\n    else {\r\n      // 隐藏元素\r\n      if (!el.dataset.originalDisplay) {\r\n        el.dataset.originalDisplay = el.style.display || ''\r\n      }\r\n      el.style.display = 'none'\r\n      el.setAttribute('hidden', '')\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * v-device 指令实现\r\n *\r\n * 根据设备类型控制元素的显示和隐藏\r\n *\r\n * @example\r\n * ```vue\r\n * <!-- 只在移动设备上显示 -->\r\n * <div v-device=\"'mobile'\">移动端内容</div>\r\n *\r\n * <!-- 在平板和桌面设备上显示 -->\r\n * <div v-device=\"['tablet', 'desktop']\">非移动端内容</div>\r\n *\r\n * <!-- 反向匹配：除了移动设备都显示 -->\r\n * <div v-device=\"{ type: 'mobile', inverse: true }\">非移动端内容</div>\r\n * ```\r\n */\r\nexport const vDevice: Directive<HTMLElement, DeviceDirectiveValue> = {\r\n  mounted(el, binding) {\r\n    const detector = getGlobalDetector()\r\n    const elementWithData = el as ElementWithDeviceData\r\n    const currentType = detector.getDeviceType()\r\n\r\n    // 增加元素计数\r\n    elementCount++\r\n\r\n    // 初始化元素状态\r\n    elementWithData.__lastDeviceType = undefined\r\n    elementWithData.__isVisible = undefined\r\n    elementWithData.__directiveBinding = binding\r\n\r\n    // 初始化显示状态\r\n    updateElementVisibility(elementWithData, binding, currentType)\r\n\r\n    // 记录注册元素，便于全局批量更新\r\n    registeredElements.add(elementWithData)\r\n\r\n    // 监听设备变化 - 使用批量更新优化性能\r\n    const handleDeviceChange = () => {\r\n      updateQueue.add(elementWithData)\r\n      scheduleUpdate()\r\n    }\r\n\r\n    detector.on('deviceChange', handleDeviceChange)\r\n\r\n    // 将事件处理器存储到元素上，以便在卸载时移除\r\n    elementWithData.__deviceChangeHandler = handleDeviceChange\r\n    elementWithData.__deviceDetector = detector\r\n  },\r\n\r\n  updated(el, binding) {\r\n    const elementWithData = el as ElementWithDeviceData\r\n    const detector = elementWithData.__deviceDetector\r\n\r\n    // 更新 binding 引用\r\n    elementWithData.__directiveBinding = binding\r\n\r\n    if (detector) {\r\n      const currentType = detector.getDeviceType()\r\n      updateElementVisibility(elementWithData, binding, currentType)\r\n    }\r\n  },\r\n\r\n  unmounted(el) {\r\n    const elementWithData = el as ElementWithDeviceData\r\n    const detector = elementWithData.__deviceDetector\r\n    const handler = elementWithData.__deviceChangeHandler\r\n\r\n    // 减少元素计数\r\n    elementCount--\r\n\r\n    // 从更新队列中移除\r\n    updateQueue.delete(elementWithData)\r\n    registeredElements.delete(elementWithData)\r\n\r\n    if (detector && handler) {\r\n      detector.off('deviceChange', handler)\r\n    }\r\n\r\n    // 清理引用\r\n    delete elementWithData.__deviceChangeHandler\r\n    delete elementWithData.__deviceDetector\r\n    delete elementWithData.__lastDeviceType\r\n    delete elementWithData.__isVisible\r\n    delete elementWithData.__directiveBinding\r\n\r\n    // 恢复原始显示状态\r\n    if (el.dataset.originalDisplay) {\r\n      el.style.display = el.dataset.originalDisplay\r\n      delete el.dataset.originalDisplay\r\n    }\r\n    el.removeAttribute('hidden')\r\n\r\n    // 如果没有元素使用检测器了，清理全局检测器\r\n    if (elementCount === 0 && globalDetector) {\r\n      globalDetector.destroy()\r\n      globalDetector = null\r\n    }\r\n  },\r\n}\r\n\r\n/**\r\n * 设备类型修饰符指令 - 移动设备\r\n *\r\n * @example\r\n * ```vue\r\n * <div v-device-mobile>只在移动设备显示</div>\r\n * ```\r\n */\r\nexport const vDeviceMobile: Directive<HTMLElement> = {\r\n  mounted(el) {\r\n    const binding = {\r\n      value: 'mobile' as const,\r\n      modifiers: {},\r\n      arg: undefined,\r\n      dir: vDevice,\r\n      instance: null,\r\n      oldValue: null,\r\n    }\r\n    const detector = getGlobalDetector()\r\n    const currentType = detector.getDeviceType()\r\n    updateElementVisibility(el, binding, currentType)\r\n\r\n    const handleDeviceChange = (deviceInfo: DeviceInfo) => {\r\n      updateElementVisibility(el, binding, deviceInfo.type)\r\n    }\r\n    detector.on('deviceChange', handleDeviceChange)\r\n    const elementWithData = el as ElementWithDeviceData\r\n    elementWithData.__deviceChangeHandler = handleDeviceChange\r\n    elementWithData.__deviceDetector = detector\r\n  },\r\n  updated(el) {\r\n    const binding = {\r\n      value: 'mobile' as const,\r\n      modifiers: {},\r\n      arg: undefined,\r\n      dir: vDevice,\r\n      instance: null,\r\n      oldValue: null,\r\n    }\r\n    const detector = (el as ElementWithDeviceData).__deviceDetector\r\n    if (detector) {\r\n      const currentType = detector.getDeviceType()\r\n      updateElementVisibility(el, binding, currentType)\r\n    }\r\n  },\r\n  unmounted: vDevice.unmounted,\r\n}\r\n\r\n/**\r\n * 设备类型修饰符指令 - 平板设备\r\n *\r\n * @example\r\n * ```vue\r\n * <div v-device-tablet>只在平板设备显示</div>\r\n * ```\r\n */\r\nexport const vDeviceTablet: Directive<HTMLElement> = {\r\n  mounted(el) {\r\n    const binding = {\r\n      value: 'tablet' as const,\r\n      modifiers: {},\r\n      arg: undefined,\r\n      dir: vDevice,\r\n      instance: null,\r\n      oldValue: null,\r\n    }\r\n    const detector = getGlobalDetector()\r\n    const currentType = detector.getDeviceType()\r\n    updateElementVisibility(el, binding, currentType)\r\n\r\n    const handleDeviceChange = (deviceInfo: DeviceInfo) => {\r\n      updateElementVisibility(el, binding, deviceInfo.type)\r\n    }\r\n    detector.on('deviceChange', handleDeviceChange)\r\n    const elementWithData = el as ElementWithDeviceData\r\n    elementWithData.__deviceChangeHandler = handleDeviceChange\r\n    elementWithData.__deviceDetector = detector\r\n  },\r\n  updated(el) {\r\n    const binding = {\r\n      value: 'tablet' as const,\r\n      modifiers: {},\r\n      arg: undefined,\r\n      dir: vDevice,\r\n      instance: null,\r\n      oldValue: null,\r\n    }\r\n    const detector = (el as ElementWithDeviceData).__deviceDetector\r\n    if (detector) {\r\n      const currentType = detector.getDeviceType()\r\n      updateElementVisibility(el, binding, currentType)\r\n    }\r\n  },\r\n  unmounted: vDevice.unmounted,\r\n}\r\n\r\n/**\r\n * 设备类型修饰符指令 - 桌面设备\r\n *\r\n * @example\r\n * ```vue\r\n * <div v-device-desktop>只在桌面设备显示</div>\r\n * ```\r\n */\r\nexport const vDeviceDesktop: Directive<HTMLElement> = {\r\n  mounted(el) {\r\n    const binding = {\r\n      value: 'desktop' as const,\r\n      modifiers: {},\r\n      arg: undefined,\r\n      dir: vDevice,\r\n      instance: null,\r\n      oldValue: null,\r\n    }\r\n    const detector = getGlobalDetector()\r\n    const currentType = detector.getDeviceType()\r\n    updateElementVisibility(el, binding, currentType)\r\n\r\n    const handleDeviceChange = (deviceInfo: DeviceInfo) => {\r\n      updateElementVisibility(el, binding, deviceInfo.type)\r\n    }\r\n    detector.on('deviceChange', handleDeviceChange)\r\n    const elementWithData = el as ElementWithDeviceData\r\n    elementWithData.__deviceChangeHandler = handleDeviceChange\r\n    elementWithData.__deviceDetector = detector\r\n  },\r\n  updated(el) {\r\n    const binding = {\r\n      value: 'desktop' as const,\r\n      modifiers: {},\r\n      arg: undefined,\r\n      dir: vDevice,\r\n      instance: null,\r\n      oldValue: null,\r\n    }\r\n    const detector = (el as ElementWithDeviceData).__deviceDetector\r\n    if (detector) {\r\n      const currentType = detector.getDeviceType()\r\n      updateElementVisibility(el, binding, currentType)\r\n    }\r\n  },\r\n  unmounted: vDevice.unmounted,\r\n}\r\n\r\n/**\r\n * 清理全局设备检测器\r\n *\r\n * 用于手动清理全局设备检测器实例，通常在应用卸载时调用\r\n */\r\nexport function cleanupGlobalDetector(): void {\r\n  if (globalDetector) {\r\n    globalDetector.destroy()\r\n    globalDetector = null\r\n  }\r\n}\r\n"],"names":["globalDetector","elementCount","registeredElements","Set","updateQueue","isUpdateScheduled","isEventListenerSet","__resetGlobalState","destroy","clear","__setGlobalDetector","detector","on","forEach","el","add","scheduleUpdate","getGlobalDetector","DeviceDetector","size","process","elementsToUpdate","Array","from","element","__directiveBinding","currentType","getDeviceType","updateElementVisibility","queueMicrotask","Promise","resolve","then","parseDirectiveValue","value","types","inverse","isArray","type","shouldShowElement","targetTypes","matches","includes","binding","__lastDeviceType","shouldShow","__isVisible","style","display","dataset","originalDisplay","removeAttribute","setAttribute","vDevice","mounted","elementWithData","undefined","handleDeviceChange","__deviceChangeHandler","__deviceDetector","updated","unmounted","handler","delete","off","vDeviceMobile","deviceInfo","vDeviceTablet","vDeviceDesktop","cleanupGlobalDetector"],"mappings":"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"}