{"version":3,"file":"useDevice.js","sources":["../../../src/vue/composables/useDevice.ts"],"sourcesContent":["import type { Ref } from 'vue'\r\nimport type {\r\n  DeviceDetectorOptions,\r\n  DeviceInfo,\r\n  DeviceType,\r\n  NetworkInfo,\r\n  NetworkModule,\r\n  NetworkType,\r\n  Orientation,\r\n  UseDeviceReturn,\r\n} from '../../types'\r\nimport { computed, onMounted, onUnmounted, readonly, ref } from 'vue'\r\nimport { DeviceDetector } from '../../core/DeviceDetector'\r\n\r\n/**\r\n * Vue3 设备检测 Composition API - 优化版本\r\n *\r\n * 提供响应式的设备信息检测功能，包括设备类型、屏幕方向、触摸支持等\r\n *\r\n * @param options 设备检测器配置选项\r\n * @returns 设备信息相关的响应式数据和方法\r\n *\r\n * @example\r\n * ```vue\r\n * <script setup>\r\n * import { useDevice } from '@ldesign/device/vue'\r\n *\r\n * const {\r\n *   deviceType,\r\n *   orientation,\r\n *   deviceInfo,\r\n *   isMobile,\r\n *   isTablet,\r\n *   isDesktop,\r\n *   isTouchDevice,\r\n *   refresh\r\n * } = useDevice({\r\n *   enableResize: true,\r\n *   enableOrientation: true\r\n * })\r\n * </script>\r\n *\r\n * <template>\r\n *   <div>\r\n *     <p>设备类型: {{ deviceType }}</p>\r\n *     <p>屏幕方向: {{ orientation }}</p>\r\n *     <p>是否移动设备: {{ isMobile }}</p>\r\n *     <p>是否支持触摸: {{ isTouchDevice }}</p>\r\n *     <button @click=\"refresh\">刷新设备信息</button>\r\n *   </div>\r\n * </template>\r\n * ```\r\n */\r\nexport function useDevice(\r\n  options: DeviceDetectorOptions = {},\r\n): UseDeviceReturn {\r\n  // 响应式状态 - 使用 shallowRef 优化性能\r\n  const deviceInfo = ref<DeviceInfo>() as Ref<DeviceInfo>\r\n  const deviceType = ref<DeviceType>('desktop') as Ref<DeviceType>\r\n  const orientation = ref<Orientation>('landscape') as Ref<Orientation>\r\n\r\n  // 设备检测器实例\r\n  let detector: DeviceDetector | null = null\r\n  let isInitialized = false\r\n  let cleanupFunctions: Array<() => void> = []\r\n\r\n  // 计算属性 - 使用 readonly 包装以防止外部修改\r\n  const isMobile = readonly(computed(() => deviceType.value === 'mobile'))\r\n  const isTablet = readonly(computed(() => deviceType.value === 'tablet'))\r\n  const isDesktop = readonly(computed(() => deviceType.value === 'desktop'))\r\n  const isTouchDevice = readonly(computed(() => deviceInfo.value?.features?.touch ?? false))\r\n\r\n  /**\r\n   * 更新设备信息 - 优化版本，减少不必要的更新\r\n   */\r\n  const updateDeviceInfo = (info: DeviceInfo) => {\r\n    // 批量更新以减少响应式触发次数\r\n    if (deviceInfo.value?.type !== info.type) {\r\n      deviceType.value = info.type\r\n    }\r\n    if (deviceInfo.value?.orientation !== info.orientation) {\r\n      orientation.value = info.orientation\r\n    }\r\n    deviceInfo.value = info\r\n  }\r\n\r\n  /**\r\n   * 刷新设备信息\r\n   */\r\n  const refresh = () => {\r\n    if (detector && isInitialized) {\r\n      const currentInfo = detector.getDeviceInfo()\r\n      updateDeviceInfo(currentInfo)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 初始化设备检测器 - 优化版本\r\n   */\r\n  const initDetector = () => {\r\n    if (detector || isInitialized) {\r\n      return\r\n    }\r\n\r\n    try {\r\n      detector = new DeviceDetector(options)\r\n      isInitialized = true\r\n\r\n      // 获取初始设备信息\r\n      updateDeviceInfo(detector.getDeviceInfo())\r\n\r\n      // 监听设备变化 - 使用更精确的事件处理\r\n      const deviceChangeHandler = (info: DeviceInfo) => {\r\n        updateDeviceInfo(info)\r\n      }\r\n\r\n      const orientationChangeHandler = (newOrientation: Orientation) => {\r\n        if (orientation.value !== newOrientation) {\r\n          orientation.value = newOrientation\r\n        }\r\n      }\r\n\r\n      detector.on('deviceChange', deviceChangeHandler)\r\n      detector.on('orientationChange', orientationChangeHandler)\r\n\r\n      // 保存清理函数\r\n      cleanupFunctions.push(\r\n        () => detector?.off('deviceChange', deviceChangeHandler),\r\n        () => detector?.off('orientationChange', orientationChangeHandler),\r\n      )\r\n    }\r\n    catch (error) {\r\n      console.error('Failed to initialize device detector:', error)\r\n      isInitialized = false\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 销毁设备检测器 - 优化版本\r\n   */\r\n  const destroyDetector = async () => {\r\n    try {\r\n      // 清理事件监听器\r\n      cleanupFunctions.forEach(cleanup => cleanup())\r\n      cleanupFunctions = []\r\n\r\n      // 销毁检测器\r\n      if (detector) {\r\n        await detector.destroy()\r\n        detector = null\r\n      }\r\n\r\n      isInitialized = false\r\n    }\r\n    catch (error) {\r\n      console.error('Failed to destroy device detector:', error)\r\n    }\r\n  }\r\n\r\n  // 生命周期钩子\r\n  onMounted(() => {\r\n    initDetector()\r\n  })\r\n\r\n  onUnmounted(() => {\r\n    destroyDetector()\r\n  })\r\n\r\n  return {\r\n    deviceType: readonly(deviceType),\r\n    orientation: readonly(orientation),\r\n    deviceInfo: readonly(deviceInfo),\r\n    isMobile,\r\n    isTablet,\r\n    isDesktop,\r\n    isTouchDevice,\r\n    refresh,\r\n  }\r\n}\r\n\r\n/**\r\n * 网络状态检测 Composition API\r\n *\r\n * 提供网络连接状态、连接类型、网络速度等信息的响应式监听\r\n *\r\n * @returns 网络状态相关的响应式数据和方法\r\n *\r\n * @example\r\n * ```vue\r\n * <script setup>\r\n * import { useNetwork } from '@ldesign/device/vue'\r\n *\r\n * const {\r\n *   networkInfo,\r\n *   isOnline,\r\n *   connectionType,\r\n *   isLoaded,\r\n *   loadModule,\r\n *   unloadModule\r\n * } = useNetwork()\r\n *\r\n * // 加载网络模块\r\n * onMounted(() => {\r\n *   loadModule()\r\n * })\r\n * </script>\r\n *\r\n * <template>\r\n *   <div v-if=\"isLoaded\">\r\n *     <p>网络状态: {{ isOnline ? '在线' : '离线' }}</p>\r\n *     <p>连接类型: {{ connectionType }}</p>\r\n *     <p v-if=\"networkInfo\">\r\n *       下载速度: {{ networkInfo.downlink }}Mbps\r\n *     </p>\r\n *   </div>\r\n * </template>\r\n * ```\r\n */\r\nexport function useNetwork() {\r\n  const networkInfo = ref<NetworkInfo | null>(null)\r\n  const isOnline = ref(true)\r\n  const connectionType = ref<NetworkType>('unknown')\r\n  const isLoaded = ref(false)\r\n\r\n  let detector: DeviceDetector | null = null\r\n  let networkModule: NetworkModule | null = null\r\n\r\n  const loadModule = async () => {\r\n    if (!detector) {\r\n      detector = new DeviceDetector()\r\n    }\r\n\r\n    try {\r\n      networkModule = await detector.loadModule<NetworkModule>('network')\r\n      if (networkModule && typeof networkModule.getData === 'function') {\r\n        networkInfo.value = networkModule.getData()\r\n        isOnline.value = networkInfo.value?.status === 'online'\r\n        connectionType.value = networkInfo.value?.type || 'unknown'\r\n        isLoaded.value = true\r\n      }\r\n    }\r\n    catch (error) {\r\n      console.warn('Failed to load network module:', error)\r\n      throw error\r\n    }\r\n  }\r\n\r\n  const unloadModule = async () => {\r\n    if (detector) {\r\n      await detector.unloadModule('network')\r\n      networkModule = null\r\n      networkInfo.value = null\r\n      isLoaded.value = false\r\n    }\r\n  }\r\n\r\n  const destroyNetwork = async () => {\r\n    if (detector) {\r\n      await detector.destroy()\r\n      detector = null\r\n      networkModule = null\r\n    }\r\n  }\r\n\r\n  onUnmounted(() => {\r\n    destroyNetwork()\r\n  })\r\n\r\n  return {\r\n    networkInfo: readonly(networkInfo),\r\n    isOnline: readonly(isOnline),\r\n    connectionType: readonly(connectionType),\r\n    isLoaded: readonly(isLoaded),\r\n    loadModule,\r\n    unloadModule,\r\n  }\r\n}\r\n\r\n// 为测试兼容性导出其他组合式 API（从此文件重导出）\r\nexport { useBattery } from './useBattery'\r\nexport { useGeolocation } from './useGeolocation'\r\n"],"names":["useDevice","options","deviceInfo","ref","deviceType","orientation","detector","isInitialized","cleanupFunctions","isMobile","readonly","computed","value","isTablet","isDesktop","isTouchDevice","features","touch","updateDeviceInfo","info","type","refresh","currentInfo","getDeviceInfo","initDetector","DeviceDetector","deviceChangeHandler","orientationChangeHandler","newOrientation","on","push","off","error","console","destroyDetector","forEach","cleanup","destroy","onMounted","onUnmounted","useNetwork","networkInfo","isOnline","connectionType","isLoaded","networkModule","loadModule","getData","status","warn","unloadModule","destroyNetwork"],"mappings":"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"}