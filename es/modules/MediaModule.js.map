{"version":3,"file":"MediaModule.js","sources":["../../src/modules/MediaModule.ts"],"sourcesContent":["import type { DeviceModule } from '../types'\r\nimport { EventEmitter } from '../core/EventEmitter'\r\nimport { safeNavigatorAccess } from '../utils'\r\n\r\n/**\r\n * 媒体设备信息接口\r\n */\r\nexport interface MediaDeviceInfo {\r\n  /** 是否支持媒体设备 API */\r\n  supported: boolean\r\n  /** 是否有摄像头 */\r\n  hasCamera: boolean\r\n  /** 是否有麦克风 */\r\n  hasMicrophone: boolean\r\n  /** 是否有扬声器 */\r\n  hasSpeaker: boolean\r\n  /** 摄像头列表 */\r\n  cameras: MediaDeviceItem[]\r\n  /** 麦克风列表 */\r\n  microphones: MediaDeviceItem[]\r\n  /** 扬声器列表 */\r\n  speakers: MediaDeviceItem[]\r\n  /** 当前摄像头权限状态 */\r\n  cameraPermission: PermissionState | 'unknown'\r\n  /** 当前麦克风权限状态 */\r\n  microphonePermission: PermissionState | 'unknown'\r\n}\r\n\r\n/**\r\n * 媒体设备项\r\n */\r\nexport interface MediaDeviceItem {\r\n  /** 设备ID */\r\n  deviceId: string\r\n  /** 设备标签 */\r\n  label: string\r\n  /** 设备类型 */\r\n  kind: MediaDeviceKind\r\n  /** 分组ID */\r\n  groupId?: string\r\n}\r\n\r\n/**\r\n * 媒体模块事件\r\n */\r\nexport interface MediaModuleEvents {\r\n  deviceChange: MediaDeviceInfo\r\n  permissionChange: {\r\n    type: 'camera' | 'microphone'\r\n    state: PermissionState\r\n  }\r\n}\r\n\r\n/**\r\n * 媒体设备检测模块\r\n *\r\n * 提供摄像头、麦克风、扬声器等媒体设备的检测功能\r\n */\r\nexport class MediaModule extends EventEmitter<Record<string, unknown>> implements DeviceModule {\r\n  name = 'media'\r\n  private mediaInfo: MediaDeviceInfo\r\n  private deviceChangeHandler?: () => void\r\n  private permissionCheckers: Map<string, NodeJS.Timeout> = new Map()\r\n\r\n  constructor() {\r\n    super()\r\n    this.mediaInfo = this.getDefaultMediaInfo()\r\n  }\r\n\r\n  /**\r\n   * 初始化模块\r\n   */\r\n  async init(): Promise<void> {\r\n    if (typeof window === 'undefined')\r\n      return\r\n\r\n    try {\r\n      // 检测媒体设备\r\n      await this.detectMediaDevices()\r\n\r\n      // 设置设备变化监听\r\n      this.setupDeviceChangeListener()\r\n\r\n      // 开始权限状态监控\r\n      this.startPermissionMonitoring()\r\n    }\r\n    catch (error) {\r\n      console.warn('Media devices detection failed:', error)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 销毁模块\r\n   */\r\n  async destroy(): Promise<void> {\r\n    this.removeDeviceChangeListener()\r\n    this.stopPermissionMonitoring()\r\n  }\r\n\r\n  /**\r\n   * 获取媒体设备信息\r\n   */\r\n  getData(): MediaDeviceInfo {\r\n    return { ...this.mediaInfo }\r\n  }\r\n\r\n  /**\r\n   * 检查是否支持媒体设备 API\r\n   */\r\n  isSupported(): boolean {\r\n    return safeNavigatorAccess(nav =>\r\n      'mediaDevices' in nav && 'enumerateDevices' in nav.mediaDevices, false)\r\n  }\r\n\r\n  /**\r\n   * 获取摄像头列表\r\n   */\r\n  getCameras(): MediaDeviceItem[] {\r\n    return [...this.mediaInfo.cameras]\r\n  }\r\n\r\n  /**\r\n   * 获取麦克风列表\r\n   */\r\n  getMicrophones(): MediaDeviceItem[] {\r\n    return [...this.mediaInfo.microphones]\r\n  }\r\n\r\n  /**\r\n   * 获取扬声器列表\r\n   */\r\n  getSpeakers(): MediaDeviceItem[] {\r\n    return [...this.mediaInfo.speakers]\r\n  }\r\n\r\n  /**\r\n   * 检查是否有摄像头\r\n   */\r\n  hasCamera(): boolean {\r\n    return this.mediaInfo.hasCamera\r\n  }\r\n\r\n  /**\r\n   * 检查是否有麦克风\r\n   */\r\n  hasMicrophone(): boolean {\r\n    return this.mediaInfo.hasMicrophone\r\n  }\r\n\r\n  /**\r\n   * 检查是否有扬声器\r\n   */\r\n  hasSpeaker(): boolean {\r\n    return this.mediaInfo.hasSpeaker\r\n  }\r\n\r\n  /**\r\n   * 请求摄像头权限\r\n   */\r\n  async requestCameraPermission(): Promise<boolean> {\r\n    if (!this.isSupported())\r\n      return false\r\n\r\n    try {\r\n      const stream = await navigator.mediaDevices.getUserMedia({ video: true })\r\n      // 立即停止流以释放摄像头\r\n      stream.getTracks().forEach(track => track.stop())\r\n\r\n      // 更新权限状态\r\n      this.mediaInfo.cameraPermission = 'granted'\r\n      this.emit('permissionChange', { type: 'camera', state: 'granted' })\r\n\r\n      // 重新检测设备（权限授予后可能有新设备可见）\r\n      await this.detectMediaDevices()\r\n\r\n      return true\r\n    }\r\n    catch {\r\n      this.mediaInfo.cameraPermission = 'denied'\r\n      this.emit('permissionChange', { type: 'camera', state: 'denied' })\r\n      return false\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 请求麦克风权限\r\n   */\r\n  async requestMicrophonePermission(): Promise<boolean> {\r\n    if (!this.isSupported())\r\n      return false\r\n\r\n    try {\r\n      const stream = await navigator.mediaDevices.getUserMedia({ audio: true })\r\n      // 立即停止流以释放麦克风\r\n      stream.getTracks().forEach(track => track.stop())\r\n\r\n      // 更新权限状态\r\n      this.mediaInfo.microphonePermission = 'granted'\r\n      this.emit('permissionChange', { type: 'microphone', state: 'granted' })\r\n\r\n      // 重新检测设备\r\n      await this.detectMediaDevices()\r\n\r\n      return true\r\n    }\r\n    catch {\r\n      this.mediaInfo.microphonePermission = 'denied'\r\n      this.emit('permissionChange', { type: 'microphone', state: 'denied' })\r\n      return false\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取默认媒体信息\r\n   */\r\n  private getDefaultMediaInfo(): MediaDeviceInfo {\r\n    return {\r\n      supported: false,\r\n      hasCamera: false,\r\n      hasMicrophone: false,\r\n      hasSpeaker: false,\r\n      cameras: [],\r\n      microphones: [],\r\n      speakers: [],\r\n      cameraPermission: 'unknown',\r\n      microphonePermission: 'unknown',\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 检测媒体设备\r\n   */\r\n  private async detectMediaDevices(): Promise<void> {\r\n    if (!this.isSupported()) {\r\n      this.mediaInfo.supported = false\r\n      return\r\n    }\r\n\r\n    try {\r\n      this.mediaInfo.supported = true\r\n\r\n      // 获取设备列表\r\n      const devices = await navigator.mediaDevices.enumerateDevices()\r\n\r\n      // 分类设备\r\n      const cameras: MediaDeviceItem[] = []\r\n      const microphones: MediaDeviceItem[] = []\r\n      const speakers: MediaDeviceItem[] = []\r\n\r\n      devices.forEach((device, index) => {\r\n        const deviceItem: MediaDeviceItem = {\r\n          deviceId: device.deviceId || `device-${index}`,\r\n          label: device.label || `${device.kind} ${index + 1}`,\r\n          kind: device.kind,\r\n          groupId: device.groupId,\r\n        }\r\n\r\n        switch (device.kind) {\r\n          case 'videoinput':\r\n            cameras.push(deviceItem)\r\n            break\r\n          case 'audioinput':\r\n            microphones.push(deviceItem)\r\n            break\r\n          case 'audiooutput':\r\n            speakers.push(deviceItem)\r\n            break\r\n        }\r\n      })\r\n\r\n      // 更新媒体信息\r\n      this.mediaInfo = {\r\n        ...this.mediaInfo,\r\n        hasCamera: cameras.length > 0,\r\n        hasMicrophone: microphones.length > 0,\r\n        hasSpeaker: speakers.length > 0,\r\n        cameras,\r\n        microphones,\r\n        speakers,\r\n      }\r\n\r\n      // 检查权限状态\r\n      await this.checkPermissions()\r\n\r\n      // 触发设备变化事件\r\n      this.emit('deviceChange', this.mediaInfo)\r\n    }\r\n    catch (error) {\r\n      console.warn('Failed to enumerate media devices:', error)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 检查权限状态\r\n   */\r\n  private async checkPermissions(): Promise<void> {\r\n    if (!('permissions' in navigator))\r\n      return\r\n\r\n    try {\r\n      // 检查摄像头权限\r\n      const cameraPermission = await navigator.permissions.query({ name: 'camera' as PermissionName })\r\n      this.mediaInfo.cameraPermission = cameraPermission.state\r\n\r\n      // 监听权限变化\r\n      cameraPermission.addEventListener('change', () => {\r\n        this.mediaInfo.cameraPermission = cameraPermission.state\r\n        this.emit('permissionChange', { type: 'camera', state: cameraPermission.state })\r\n      })\r\n    }\r\n    catch {\r\n      // 权限 API 可能不支持 camera\r\n    }\r\n\r\n    try {\r\n      // 检查麦克风权限\r\n      const microphonePermission = await navigator.permissions.query({ name: 'microphone' as PermissionName })\r\n      this.mediaInfo.microphonePermission = microphonePermission.state\r\n\r\n      // 监听权限变化\r\n      microphonePermission.addEventListener('change', () => {\r\n        this.mediaInfo.microphonePermission = microphonePermission.state\r\n        this.emit('permissionChange', { type: 'microphone', state: microphonePermission.state })\r\n      })\r\n    }\r\n    catch {\r\n      // 权限 API 可能不支持 microphone\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 设置设备变化监听器\r\n   */\r\n  private setupDeviceChangeListener(): void {\r\n    if (!this.isSupported())\r\n      return\r\n\r\n    this.deviceChangeHandler = async () => {\r\n      await this.detectMediaDevices()\r\n    }\r\n\r\n    navigator.mediaDevices.addEventListener('devicechange', this.deviceChangeHandler)\r\n  }\r\n\r\n  /**\r\n   * 移除设备变化监听器\r\n   */\r\n  private removeDeviceChangeListener(): void {\r\n    if (!this.isSupported() || !this.deviceChangeHandler)\r\n      return\r\n\r\n    navigator.mediaDevices.removeEventListener('devicechange', this.deviceChangeHandler)\r\n    this.deviceChangeHandler = undefined\r\n  }\r\n\r\n  /**\r\n   * 开始权限状态监控\r\n   */\r\n  private startPermissionMonitoring(): void {\r\n    // 定期检查权限状态（某些浏览器不支持权限变化事件）\r\n    const checker = setInterval(async () => {\r\n      await this.checkPermissions()\r\n    }, 5000) // 每5秒检查一次\r\n\r\n    this.permissionCheckers.set('main', checker)\r\n  }\r\n\r\n  /**\r\n   * 停止权限状态监控\r\n   */\r\n  private stopPermissionMonitoring(): void {\r\n    this.permissionCheckers.forEach(checker => clearInterval(checker))\r\n    this.permissionCheckers.clear()\r\n  }\r\n\r\n  /**\r\n   * 测试摄像头\r\n   */\r\n  async testCamera(constraints?: MediaTrackConstraints): Promise<boolean> {\r\n    if (!this.isSupported())\r\n      return false\r\n\r\n    try {\r\n      const stream = await navigator.mediaDevices.getUserMedia({\r\n        video: constraints || true,\r\n      })\r\n\r\n      // 检查是否成功获取视频轨道\r\n      const videoTracks = stream.getVideoTracks()\r\n      const success = videoTracks.length > 0\r\n\r\n      // 停止所有轨道\r\n      stream.getTracks().forEach(track => track.stop())\r\n\r\n      return success\r\n    }\r\n    catch (error) {\r\n      console.warn('Camera test failed:', error)\r\n      return false\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 测试麦克风\r\n   */\r\n  async testMicrophone(constraints?: MediaTrackConstraints): Promise<boolean> {\r\n    if (!this.isSupported())\r\n      return false\r\n\r\n    try {\r\n      const stream = await navigator.mediaDevices.getUserMedia({\r\n        audio: constraints || true,\r\n      })\r\n\r\n      // 检查是否成功获取音频轨道\r\n      const audioTracks = stream.getAudioTracks()\r\n      const success = audioTracks.length > 0\r\n\r\n      // 停止所有轨道\r\n      stream.getTracks().forEach(track => track.stop())\r\n\r\n      return success\r\n    }\r\n    catch (error) {\r\n      console.warn('Microphone test failed:', error)\r\n      return false\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取媒体流\r\n   */\r\n  async getMediaStream(constraints?: MediaStreamConstraints): Promise<MediaStream | null> {\r\n    if (!this.isSupported())\r\n      return null\r\n\r\n    try {\r\n      return await navigator.mediaDevices.getUserMedia(constraints || {\r\n        video: true,\r\n        audio: true,\r\n      })\r\n    }\r\n    catch (error) {\r\n      console.warn('Failed to get media stream:', error)\r\n      return null\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取屏幕共享流\r\n   */\r\n  async getDisplayMedia(constraints?: MediaStreamConstraints): Promise<MediaStream | null> {\r\n    if (!this.isSupported())\r\n      return null\r\n\r\n    // 检查是否支持屏幕共享\r\n    if (!('getDisplayMedia' in navigator.mediaDevices)) {\r\n      console.warn('Screen capture is not supported')\r\n      return null\r\n    }\r\n\r\n    try {\r\n      return await navigator.mediaDevices.getDisplayMedia(constraints || {\r\n        video: true,\r\n        audio: false,\r\n      })\r\n    }\r\n    catch (error) {\r\n      console.warn('Failed to get display media:', error)\r\n      return null\r\n    }\r\n  }\r\n}\r\n"],"names":["MediaModule","EventEmitter","constructor","name","permissionCheckers","Map","mediaInfo","getDefaultMediaInfo","init","window","detectMediaDevices","setupDeviceChangeListener","startPermissionMonitoring","error","console","warn","destroy","removeDeviceChangeListener","stopPermissionMonitoring","getData","isSupported","safeNavigatorAccess","nav","mediaDevices","getCameras","cameras","getMicrophones","microphones","getSpeakers","speakers","hasCamera","hasMicrophone","hasSpeaker","requestCameraPermission","stream","navigator","getUserMedia","video","getTracks","forEach","track","stop","cameraPermission","emit","type","state","requestMicrophonePermission","audio","microphonePermission","supported","devices","enumerateDevices","device","index","deviceItem","deviceId","label","kind","groupId","push","length","checkPermissions","permissions","query","addEventListener","deviceChangeHandler","removeEventListener","undefined","checker","setInterval","set","clearInterval","clear","testCamera","constraints","videoTracks","getVideoTracks","success","testMicrophone","audioTracks","getAudioTracks","getMediaStream","getDisplayMedia"],"mappings":"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"}