{"version":3,"file":"BatteryModule.js","sources":["../../src/modules/BatteryModule.ts"],"sourcesContent":["import type { BatteryInfo, DeviceModule } from '../types'\nimport { safeNavigatorAccess } from '../utils'\n\n/**\n * 电池信息模块\n */\ninterface BatteryManager {\n  level: number\n  charging: boolean\n  chargingTime: number\n  dischargingTime: number\n  addEventListener: (type: string, listener: () => void) => void\n  removeEventListener: (type: string, listener: () => void) => void\n}\n\nexport class BatteryModule implements DeviceModule {\n  name = 'battery'\n  private batteryInfo: BatteryInfo\n  private battery: BatteryManager | null = null\n  private eventHandlers: Map<string, () => void> = new Map()\n  private customEventHandlers: Map<string, Set<(data: unknown) => void>> = new Map()\n\n  constructor() {\n    this.batteryInfo = this.getDefaultBatteryInfo()\n  }\n\n  /**\n   * 初始化模块\n   */\n  async init(): Promise<void> {\n    if (typeof window === 'undefined')\n      return\n\n    try {\n      // 获取电池 API\n      this.battery = await safeNavigatorAccess(async (nav) => {\n        if ('getBattery' in nav && nav.getBattery) {\n          return await nav.getBattery()\n        }\n        // 降级到旧版本的 API\n        const navAny = nav as unknown as Record<string, unknown>\n        return (navAny.battery\n          || navAny.mozBattery\n          || navAny.webkitBattery) as BatteryManager | null\n      }, null)\n\n      if (this.battery) {\n        this.updateBatteryInfo()\n        this.setupEventListeners()\n      }\n    }\n    catch (error) {\n      console.warn('Battery API not supported or failed to initialize:', error)\n    }\n  }\n\n  /**\n   * 销毁模块（优化：彻底清理所有引用）\n   */\n  async destroy(): Promise<void> {\n    this.removeEventListeners()\n    \n    // 清理引用以帮助垃圾回收\n    this.battery = null\n    this.eventHandlers.clear()\n    this.customEventHandlers.clear()\n  }\n\n  /**\n   * 获取电池信息\n   */\n  getData(): BatteryInfo {\n    // 每次获取时尝试同步最新的电池信息，满足测试对实时性的期望\n    this.updateBatteryInfo()\n    return { ...this.batteryInfo }\n  }\n\n  /**\n   * 获取电池电量（0-1）\n   */\n  getLevel(): number {\n    return this.batteryInfo.level\n  }\n\n  /**\n   * 获取电池电量百分比（0-100）\n   */\n  getLevelPercentage(): number {\n    return Math.round(this.batteryInfo.level * 100)\n  }\n\n  /**\n   * 检查是否正在充电\n   */\n  isCharging(): boolean {\n    return this.batteryInfo.charging\n  }\n\n  /**\n   * 获取充电时间（秒）\n   */\n  getChargingTime(): number {\n    return this.batteryInfo.chargingTime\n  }\n\n  /**\n   * 获取放电时间（秒）\n   */\n  getDischargingTime(): number {\n    return this.batteryInfo.dischargingTime\n  }\n\n  /**\n   * 获取充电时间（格式化）\n   */\n  getChargingTimeFormatted(): string {\n    return this.formatTime(this.batteryInfo.chargingTime)\n  }\n\n  /**\n   * 获取放电时间（格式化）\n   */\n  getDischargingTimeFormatted(): string {\n    return this.formatTime(this.batteryInfo.dischargingTime)\n  }\n\n  /**\n   * 检查电池是否电量低\n   */\n  isLowBattery(threshold = 0.2): boolean {\n    return this.batteryInfo.level <= threshold\n  }\n\n  /**\n   * 检查电池是否电量充足\n   */\n  isHighBattery(threshold = 0.8): boolean {\n    return this.batteryInfo.level >= threshold\n  }\n\n  /**\n   * 获取电池状态描述\n   */\n  getBatteryStatus(): string {\n    if (this.batteryInfo.charging) {\n      return 'charging'\n    }\n    if (this.isLowBattery()) {\n      return 'low'\n    }\n    if (this.isHighBattery()) {\n      return 'high'\n    }\n    return 'normal'\n  }\n\n  /**\n   * 获取默认电池信息\n   */\n  private getDefaultBatteryInfo(): BatteryInfo {\n    return {\n      level: 1,\n      charging: false,\n      chargingTime: Number.POSITIVE_INFINITY,\n      dischargingTime: Number.POSITIVE_INFINITY,\n    }\n  }\n\n  /**\n   * 更新电池信息\n   */\n  private updateBatteryInfo(): void {\n    if (!this.battery)\n      return\n\n    const normalizeTime = (t: number | null | undefined): number => {\n      if (typeof t !== 'number' || !Number.isFinite(t) || t < 0 || t === Number.MAX_VALUE)\n        return Number.POSITIVE_INFINITY\n      return t\n    }\n\n    this.batteryInfo = {\n      level: typeof this.battery.level === 'number' ? this.battery.level : 1,\n      charging: !!this.battery.charging,\n      chargingTime: normalizeTime((this.battery as unknown as { chargingTime?: number }).chargingTime),\n      dischargingTime: normalizeTime((this.battery as unknown as { dischargingTime?: number }).dischargingTime),\n    }\n\n    // 触发电池状态变化事件\n    this.emit('batteryChange', this.batteryInfo)\n  }\n\n  /**\n   * 格式化时间\n   */\n  private formatTime(seconds: number): string {\n    if (!Number.isFinite(seconds)) {\n      return '未知'\n    }\n\n    const hours = Math.floor(seconds / 3600)\n    const minutes = Math.floor((seconds % 3600) / 60)\n\n    if (hours > 0) {\n      return `${hours}小时${minutes}分钟`\n    }\n    return `${minutes}分钟`\n  }\n\n  /**\n   * 设置事件监听器\n   */\n  private setupEventListeners(): void {\n    if (!this.battery || typeof this.battery.addEventListener !== 'function')\n      return\n\n    const events = [\n      'chargingchange',\n      'levelchange',\n      'chargingtimechange',\n      'dischargingtimechange',\n    ]\n\n    events.forEach((event) => {\n      const handler = () => {\n        this.updateBatteryInfo()\n      }\n      this.eventHandlers.set(event, handler)\n      if (this.battery) {\n        this.battery.addEventListener(event, handler)\n      }\n    })\n  }\n\n  /**\n   * 移除事件监听器\n   */\n  private removeEventListeners(): void {\n    if (!this.battery || typeof this.battery.removeEventListener !== 'function')\n      return\n\n    this.eventHandlers.forEach((handler, event) => {\n      if (this.battery) {\n        this.battery.removeEventListener(event, handler)\n      }\n    })\n    this.eventHandlers.clear()\n  }\n\n  /**\n   * 添加自定义事件监听器\n   */\n  on(event: string, handler: (data: unknown) => void): void {\n    if (!this.customEventHandlers.has(event)) {\n      this.customEventHandlers.set(event, new Set())\n    }\n    this.customEventHandlers.get(event)?.add(handler)\n  }\n\n  /**\n   * 移除自定义事件监听器\n   */\n  off(event: string, handler: (data: unknown) => void): void {\n    const handlers = this.customEventHandlers.get(event)\n    if (handlers) {\n      handlers.delete(handler)\n      if (handlers.size === 0) {\n        this.customEventHandlers.delete(event)\n      }\n    }\n  }\n\n  /**\n   * 触发自定义事件\n   */\n  private emit(event: string, data: unknown): void {\n    const handlers = this.customEventHandlers.get(event)\n    if (handlers) {\n      handlers.forEach((handler) => {\n        try {\n          handler(data)\n        }\n        catch (error) {\n          console.warn(`Error in battery event handler for ${event}:`, error)\n        }\n      })\n    }\n  }\n}\n"],"names":["BatteryModule","constructor","name","battery","eventHandlers","Map","customEventHandlers","batteryInfo","getDefaultBatteryInfo","init","window","safeNavigatorAccess","nav","getBattery","navAny","mozBattery","webkitBattery","updateBatteryInfo","setupEventListeners","error","console","warn","destroy","removeEventListeners","clear","getData","getLevel","level","getLevelPercentage","Math","round","isCharging","charging","getChargingTime","chargingTime","getDischargingTime","dischargingTime","getChargingTimeFormatted","formatTime","getDischargingTimeFormatted","isLowBattery","threshold","isHighBattery","getBatteryStatus","Number","POSITIVE_INFINITY","normalizeTime","t","isFinite","MAX_VALUE","emit","seconds","hours","floor","minutes","addEventListener","events","forEach","event","handler","set","removeEventListener","on","has","Set","get","add","off","handlers","delete","size","data"],"mappings":"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"}