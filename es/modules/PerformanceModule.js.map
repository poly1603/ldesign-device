{"version":3,"file":"PerformanceModule.js","sources":["../../src/modules/PerformanceModule.ts"],"sourcesContent":["import type { DeviceModule, ExtendedNavigator, NetworkInformation } from '../types'\nimport { EventEmitter } from '../core/EventEmitter'\n\n/**\n * 设备性能信息\n */\nexport interface DevicePerformanceInfo {\n  /** 性能评分 (0-100) */\n  score: number\n  /** 性能等级 */\n  tier: 'low' | 'medium' | 'high' | 'ultra'\n  /** 详细指标 */\n  metrics: {\n    /** CPU 性能评分 */\n    cpu: number\n    /** GPU 性能评分 */\n    gpu: number\n    /** 内存评分 */\n    memory: number\n    /** 网络评分 */\n    network: number\n    /** 存储性能评分 */\n    storage: number\n  }\n  /** 硬件信息 */\n  hardware: {\n    /** CPU 核心数 */\n    cpuCores: number\n    /** 设备内存 (GB) */\n    deviceMemory: number\n    /** 最大触摸点数 */\n    maxTouchPoints: number\n  }\n  /** 性能建议 */\n  recommendations: string[]\n  /** 测试时间戳 */\n  timestamp: number\n}\n\n/**\n * 性能测试选项\n */\nexport interface PerformanceTestOptions {\n  /** 是否包含 GPU 测试 */\n  includeGPU?: boolean\n  /** 是否包含网络测试 */\n  includeNetwork?: boolean\n  /** 测试超时时间（毫秒） */\n  timeout?: number\n}\n\n/**\n * 性能模块事件\n */\nexport interface PerformanceModuleEvents extends Record<string, unknown> {\n  performanceChange: DevicePerformanceInfo\n  testComplete: DevicePerformanceInfo\n  testStart: void\n}\n\n/**\n * 设备性能评估模块\n *\n * 提供设备性能评分和分级功能，包括：\n * - CPU 性能测试（数学密集型计算基准测试）\n * - GPU 性能测试（WebGL + Canvas 2D 渲染测试）\n * - 内存性能测试（容量评估 + 大数组排序测试）\n * - 网络性能评估（基于 Network Information API）\n * - 存储性能测试（localStorage 读写性能测试）\n * - 综合性能评分（五项指标加权平均）\n *\n * 评分权重：\n * - CPU: 30%\n * - GPU: 25%\n * - Memory: 20%\n * - Storage: 15%\n * - Network: 10%\n *\n * @example\n * ```typescript\n * const detector = new DeviceDetector()\n * const perfModule = await detector.loadModule<PerformanceModule>('performance')\n * const perfInfo = perfModule.getData()\n *\n *  \n * // 根据性能等级调整应用配置\n * if (perfInfo.tier === 'low') {\n *   // 降低图形质量\n * } else if (perfInfo.tier === 'ultra') {\n *   // 启用高级特效\n * }\n *\n * // 查看性能建议\n * perfInfo.recommendations.forEach(rec => )\n * ```\n */\nexport class PerformanceModule\n  extends EventEmitter<PerformanceModuleEvents>\n  implements DeviceModule {\n  name = 'performance'\n  private performanceInfo: DevicePerformanceInfo | null = null\n  private isInitialized = false\n  private isTesting = false\n\n  /**\n   * 初始化模块\n   */\n  async init(): Promise<void> {\n    if (this.isInitialized)\n      return\n\n    this.performanceInfo = await this.runPerformanceTest()\n    this.isInitialized = true\n  }\n\n  /**\n   * 获取性能数据\n   */\n  getData(): DevicePerformanceInfo {\n    if (!this.performanceInfo) {\n      throw new Error('PerformanceModule not initialized')\n    }\n    return { ...this.performanceInfo }\n  }\n\n  /**\n   * 获取性能评分\n   */\n  getScore(): number {\n    return this.performanceInfo?.score ?? 0\n  }\n\n  /**\n   * 获取性能等级\n   */\n  getTier(): 'low' | 'medium' | 'high' | 'ultra' {\n    return this.performanceInfo?.tier ?? 'medium'\n  }\n\n  /**\n   * 重新运行性能测试\n   */\n  async runTest(options?: PerformanceTestOptions): Promise<DevicePerformanceInfo> {\n    if (this.isTesting) {\n      throw new Error('Performance test already running')\n    }\n\n    this.isTesting = true\n    this.emit('testStart', undefined)\n\n    try {\n      this.performanceInfo = await this.runPerformanceTest(options)\n      this.emit('testComplete', this.performanceInfo)\n      this.emit('performanceChange', this.performanceInfo)\n      return this.performanceInfo\n    }\n    finally {\n      this.isTesting = false\n    }\n  }\n\n  /**\n   * 销毁模块\n   */\n  async destroy(): Promise<void> {\n    this.removeAllListeners()\n    this.performanceInfo = null\n    this.isInitialized = false\n  }\n\n  /**\n   * 运行性能测试\n   */\n  private async runPerformanceTest(\n    options: PerformanceTestOptions = {},\n  ): Promise<DevicePerformanceInfo> {\n    const {\n      includeGPU = true,\n      includeNetwork = false,\n      timeout = 5000,\n    } = options\n\n    const hardware = this.detectHardware()\n\n    // 并行运行各项测试\n    const [cpuScore, gpuScore, memoryScore, networkScore, storageScore] = await Promise.all([\n      this.testCPUPerformance(timeout, hardware.cpuCores),\n      includeGPU ? this.testGPUPerformance(timeout) : Promise.resolve(50),\n      this.testMemoryPerformance(hardware.deviceMemory),\n      includeNetwork ? this.testNetworkPerformance(timeout) : Promise.resolve(50),\n      this.testStoragePerformance(timeout),\n    ])\n\n    const metrics = {\n      cpu: cpuScore,\n      gpu: gpuScore,\n      memory: memoryScore,\n      network: networkScore,\n      storage: storageScore,\n    }\n\n    // 计算综合评分（加权平均）\n    const weights = {\n      cpu: 0.3,\n      gpu: 0.25,\n      memory: 0.2,\n      network: 0.1,\n      storage: 0.15,\n    }\n\n    const score = Math.round(\n      cpuScore * weights.cpu\n      + gpuScore * weights.gpu\n      + memoryScore * weights.memory\n      + networkScore * weights.network\n      + storageScore * weights.storage,\n    )\n\n    const tier = this.calculateTier(score)\n    const recommendations = this.generateRecommendations(metrics, tier)\n\n    return {\n      score,\n      tier,\n      metrics,\n      hardware,\n      recommendations,\n      timestamp: Date.now(),\n    }\n  }\n\n  /**\n   * 检测硬件信息\n   */\n  private detectHardware() {\n    return {\n      cpuCores: (navigator as ExtendedNavigator).hardwareConcurrency || 1,\n      deviceMemory: (navigator as ExtendedNavigator).deviceMemory || 4,\n      maxTouchPoints: navigator.maxTouchPoints || 0,\n    }\n  }\n\n  /**\n   * 测试 CPU 性能\n   * 使用数学密集型计算进行基准测试\n   */\n  private async testCPUPerformance(_timeout: number, cores: number): Promise<number> {\n    return new Promise((resolve) => {\n      const startTime = performance.now()\n      const iterations = 100000\n\n      // 执行数学密集型计算\n      let result = 0\n      for (let i = 0; i < iterations; i++) {\n        result += Math.sqrt(i) * Math.sin(i) * Math.cos(i)\n      }\n\n      // 使用result防止被优化掉\n      if (result === 0) result = 1\n\n      const duration = performance.now() - startTime\n\n      // 根据执行时间计算基准分数\n      // 假设高端设备约50ms，低端设备约500ms\n      const benchmarkScore = Math.max(0, Math.min(100, (500 - duration) / 4.5))\n\n      // 结合 CPU 核心数进行综合评分\n      // 核心数权重40%，基准测试60%\n      const coreScore = Math.min(100, (cores / 8) * 100)\n      const finalScore = Math.round(coreScore * 0.4 + benchmarkScore * 0.6)\n\n      resolve(finalScore)\n    })\n  }\n\n  /**\n   * 测试 GPU 性能\n   * 结合 WebGL 渲染测试和 Canvas 2D 测试\n   */\n  private async testGPUPerformance(timeout: number): Promise<number> {\n    try {\n      // 首先测试 Canvas 2D 渲染性能\n      const canvas2DScore = await this.testCanvas2DPerformance()\n\n      // 然后测试 WebGL 性能\n      const canvas = document.createElement('canvas')\n      canvas.width = 256\n      canvas.height = 256\n\n      const gl = canvas.getContext('webgl2') || canvas.getContext('webgl')\n      if (!gl) {\n        // 不支持 WebGL，只使用 Canvas 2D 分数\n        return Math.round(canvas2DScore * 0.8) // 降低权重\n      }\n\n      const startTime = performance.now()\n      let frames = 0\n      const maxFrames = 100\n\n      const webglScore = await new Promise<number>((resolve) => {\n        const render = () => {\n          if (!gl) {\n            resolve(30)\n            return\n          }\n\n          // 简单的渲染测试\n          gl.clearColor(Math.random(), Math.random(), Math.random(), 1.0)\n          gl.clear(gl.COLOR_BUFFER_BIT)\n          frames++\n\n          const elapsed = performance.now() - startTime\n\n          if (elapsed >= timeout || frames >= maxFrames) {\n            // 根据帧率计算评分\n            const fps = (frames / elapsed) * 1000\n            const score = Math.min(100, (fps / 60) * 100)\n            resolve(score)\n          }\n          else {\n            requestAnimationFrame(render)\n          }\n        }\n\n        render()\n      })\n\n      // WebGL 支持额外奖励\n      const webglBonus = 10\n\n      // 综合 Canvas 2D (40%) 和 WebGL (60%) 分数\n      return Math.min(100, Math.round(canvas2DScore * 0.4 + webglScore * 0.6 + webglBonus))\n    }\n    catch {\n      return 30\n    }\n  }\n\n  /**\n   * 测试 Canvas 2D 渲染性能\n   */\n  private async testCanvas2DPerformance(): Promise<number> {\n    try {\n      const canvas = document.createElement('canvas')\n      canvas.width = 800\n      canvas.height = 600\n      const ctx = canvas.getContext('2d')\n\n      if (!ctx)\n        return 50\n\n      const startTime = performance.now()\n\n      // 执行 Canvas 2D 绘制测试\n      for (let i = 0; i < 1000; i++) {\n        ctx.fillStyle = `rgb(${i % 255}, ${(i * 2) % 255}, ${(i * 3) % 255})`\n        ctx.fillRect(\n          Math.random() * 800,\n          Math.random() * 600,\n          Math.random() * 50,\n          Math.random() * 50,\n        )\n      }\n\n      const duration = performance.now() - startTime\n\n      // 假设高端设备约20ms，低端设备约200ms\n      return Math.max(0, Math.min(100, (200 - duration) / 1.8))\n    }\n    catch {\n      return 50\n    }\n  }\n\n  /**\n   * 测试内存性能\n   * 结合设备内存容量和实际性能测试\n   */\n  private async testMemoryPerformance(deviceMemory: number): Promise<number> {\n    try {\n      // 内存基准测试：大数组排序\n      const arraySize = 1000000\n      const startTime = performance.now()\n\n      // 创建大数组\n      const arr: number[] = Array.from({length: arraySize})\n      for (let i = 0; i < arraySize; i++) {\n        arr[i] = Math.random()\n      }\n\n      // 执行排序测试\n      arr.sort((a, b) => a - b)\n\n      const duration = performance.now() - startTime\n\n      // 清理内存\n      arr.length = 0\n\n      // 根据执行时间计算基准分数\n      // 假设高端设备约100ms，低端设备约1000ms\n      const benchmarkScore = Math.max(0, Math.min(100, (1000 - duration) / 9))\n\n      // 根据设备内存容量计算分数\n      const memoryCapacityScore = Math.min(100, (deviceMemory / 16) * 100)\n\n      // 内存容量权重50%，基准测试50%\n      return Math.round(memoryCapacityScore * 0.5 + benchmarkScore * 0.5)\n    }\n    catch {\n      // 测试失败，仅根据内存容量评分\n      if (deviceMemory >= 8)\n        return 100\n      if (deviceMemory >= 6)\n        return 85\n      if (deviceMemory >= 4)\n        return 70\n      if (deviceMemory >= 2)\n        return 50\n      return 30\n    }\n  }\n\n  /**\n   * 测试网络性能\n   */\n  private async testNetworkPerformance(_timeout: number): Promise<number> {\n    try {\n      // 使用 Network Information API\n      const connection = (navigator as ExtendedNavigator).connection || \n                         (navigator as ExtendedNavigator).mozConnection || \n                         (navigator as ExtendedNavigator).webkitConnection\n\n      if (!connection)\n        return 70 // 默认中等分数\n\n      const effectiveType = (connection as NetworkInformation).effectiveType || '4g'\n      const downlink = (connection as NetworkInformation).downlink || 0\n\n      // 根据网络类型评分\n      const typeScores: Record<string, number> = {\n        'slow-2g': 20,\n        '2g': 40,\n        '3g': 60,\n        '4g': 85,\n        '5g': 100,\n      }\n\n      const typeScore = typeScores[effectiveType] || 70\n\n      // 根据下载速度评分（如果有的话）\n      if (downlink > 0) {\n        const speedScore = Math.min(100, (downlink / 10) * 100)\n        return Math.round((typeScore + speedScore) / 2)\n      }\n\n      return typeScore\n    }\n    catch {\n      return 70\n    }\n  }\n\n  /**\n   * 测试存储性能\n   * 测试 localStorage 读写性能\n   */\n  private async testStoragePerformance(_timeout: number): Promise<number> {\n    try {\n      const testKey = '__perf_test_storage__'\n      const testData = 'x'.repeat(10000) // 10KB 数据\n\n      const startTime = performance.now()\n\n      // 执行 localStorage 读写测试\n      for (let i = 0; i < 10; i++) {\n        localStorage.setItem(testKey, testData)\n        localStorage.getItem(testKey)\n      }\n\n      // 清理测试数据\n      localStorage.removeItem(testKey)\n\n      const duration = performance.now() - startTime\n\n      // 根据执行时间计算基准分数\n      // 假设高端设备约5ms，低端设备约50ms\n      const benchmarkScore = Math.max(0, Math.min(100, (50 - duration) / 0.45))\n\n      // 检查存储 API 支持\n      let apiBonus = 0\n      if ('indexedDB' in window)\n        apiBonus += 5\n      if ('caches' in window)\n        apiBonus += 5\n\n      return Math.min(100, Math.round(benchmarkScore + apiBonus))\n    }\n    catch {\n      // 测试失败，返回中等分数\n      return 50\n    }\n  }\n\n  /**\n   * 计算性能等级\n   */\n  private calculateTier(score: number): 'low' | 'medium' | 'high' | 'ultra' {\n    if (score >= 80)\n      return 'ultra'\n    if (score >= 60)\n      return 'high'\n    if (score >= 40)\n      return 'medium'\n    return 'low'\n  }\n\n  /**\n   * 生成性能建议\n   * 提供更详细和实用的优化建议\n   */\n  private generateRecommendations(\n    metrics: DevicePerformanceInfo['metrics'],\n    tier: DevicePerformanceInfo['tier'],\n  ): string[] {\n    const recommendations: string[] = []\n\n    // 根据性能等级提供整体建议\n    if (tier === 'low') {\n      recommendations.push('设备性能较低，建议降低整体图形质量和关闭非必要动画效果')\n      recommendations.push('建议减少同时运行的任务和后台进程')\n    }\n\n    // CPU 性能建议\n    if (metrics.cpu < 50) {\n      recommendations.push('降低JavaScript计算复杂度，使用Web Workers处理密集型计算任务')\n      recommendations.push('避免在主线程中执行复杂的数据处理操作')\n    }\n    else if (metrics.cpu < 70) {\n      recommendations.push('注意优化JavaScript执行效率，避免不必要的复杂计算')\n    }\n\n    // GPU 性能建议\n    if (metrics.gpu < 50) {\n      recommendations.push('减少DOM操作和重绘次数，使用CSS动画代替JavaScript动画')\n      recommendations.push('降低Canvas渲染质量，减少同时渲染的图形元素数量')\n    }\n    else if (metrics.gpu < 70) {\n      recommendations.push('优化图形渲染性能，注意控制动画帧率')\n    }\n\n    // 内存性能建议\n    if (metrics.memory < 50) {\n      recommendations.push('减少内存占用，及时清理不用的对象和大数组')\n      recommendations.push('避免内存泄漏，注意解除事件监听和定时器')\n    }\n    else if (metrics.memory < 70) {\n      recommendations.push('注意内存使用效率，避免创建过多的临时对象')\n    }\n\n    // 网络性能建议\n    if (metrics.network < 50) {\n      recommendations.push('优化资源加载策略，启用Gzip压缩和浏览器缓存')\n      recommendations.push('减少网络请求次数，考虑使用CDN加速静态资源')\n      recommendations.push('启用懒加载和预加载策略，优化首屏加载时间')\n    }\n    else if (metrics.network < 70) {\n      recommendations.push('网络性能一般，建议优化资源加载和使用缓存策略')\n    }\n\n    // 存储性能建议\n    if (metrics.storage < 50) {\n      recommendations.push('减少localStorage的使用频率，考虑使用IndexedDB存储大量数据')\n      recommendations.push('优化数据存储策略，避免频繁的读写操作')\n    }\n    else if (metrics.storage < 70) {\n      recommendations.push('注意存储性能，避免过度使用localStorage')\n    }\n\n    // 高性能设备建议\n    if (tier === 'ultra') {\n      recommendations.push('设备性能优秀，可以启用所有高级特性和高质量图形效果')\n    }\n    else if (tier === 'high') {\n      recommendations.push('设备性能良好，可以启用大部分高级特性')\n    }\n\n    // 如果没有特别的性能问题\n    if (recommendations.length === 0) {\n      recommendations.push('设备性能表现良好，可以正常使用各项功能')\n    }\n\n    return recommendations\n  }\n}\n"],"names":["PerformanceModule","EventEmitter","name","performanceInfo","isInitialized","isTesting","init","runPerformanceTest","getData","Error","getScore","score","getTier","tier","runTest","options","emit","undefined","destroy","removeAllListeners","includeGPU","includeNetwork","timeout","hardware","detectHardware","cpuScore","gpuScore","memoryScore","networkScore","storageScore","Promise","all","testCPUPerformance","cpuCores","testGPUPerformance","resolve","testMemoryPerformance","deviceMemory","testNetworkPerformance","testStoragePerformance","metrics","cpu","gpu","memory","network","storage","weights","Math","round","calculateTier","recommendations","generateRecommendations","timestamp","Date","now","navigator","hardwareConcurrency","maxTouchPoints","_timeout","cores","startTime","performance","duration","benchmarkScore","max","min","coreScore","finalScore","canvas2DScore","testCanvas2DPerformance","canvas","document","createElement","width","height","gl","getContext","frames","maxFrames","webglScore","render","clearColor","random","clear","COLOR_BUFFER_BIT","elapsed","fps","requestAnimationFrame","webglBonus","ctx","i","fillStyle","fillRect","arraySize","arr","Array","from","length","sort","a","b","memoryCapacityScore","connection","mozConnection","webkitConnection","effectiveType","downlink","typeScores","typeScore","speedScore","testKey","testData","repeat","localStorage","setItem","getItem","removeItem","apiBonus","window","push"],"mappings":"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"}