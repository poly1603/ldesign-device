{"version":3,"file":"plugin.js","sources":["../../src/engine/plugin.ts"],"sourcesContent":["/**\r\n * Device Engine 插件\r\n *\r\n * 将 Device 功能集成到 LDesign Engine 中，提供统一的设备检测管理体验\r\n */\r\n\r\nimport type { DevicePluginOptions, EngineContext } from '../types'\r\nimport { DeviceDetector } from '../core/DeviceDetector'\r\n// import type { Plugin } from '@ldesign/engine/types' // 暂时注释，等待外部包安装\r\nimport { DevicePlugin } from '../vue/plugin'\r\n\r\n// 本地 EngineLike 类型，避免使用 any\r\n// 注意：必须在所有 import 之后声明，以满足 import/first 规则\r\ntype EngineLike = NonNullable<EngineContext['engine']>\r\n\r\n/**\r\n * Device Engine 插件配置选项\r\n */\r\nexport interface DeviceEnginePluginOptions extends DevicePluginOptions {\r\n  /** 插件名称 */\r\n  name?: string\r\n  /** 插件版本 */\r\n  version?: string\r\n  /** 插件描述 */\r\n  description?: string\r\n  /** 插件依赖 */\r\n  dependencies?: string[]\r\n  /** 是否自动安装到 Vue 应用 */\r\n  autoInstall?: boolean\r\n  /** 是否启用性能监控 */\r\n  enablePerformanceMonitoring?: boolean\r\n  /** 是否启用调试模式 */\r\n  debug?: boolean\r\n}\r\n\r\n/**\r\n * Plugin 接口定义（临时）\r\n */\r\nexport interface Plugin {\r\n  name: string\r\n  version?: string\r\n  dependencies?: string[]\r\n  install: (context: unknown) => Promise<void> | void\r\n  uninstall?: (context: unknown) => Promise<void> | void\r\n}\r\n\r\n/**\r\n * 默认配置\r\n */\r\nconst defaultConfig: Partial<DeviceEnginePluginOptions> = {\r\n  name: 'device',\r\n  version: '1.0.0',\r\n  description: 'LDesign Device Engine Plugin',\r\n  dependencies: [],\r\n  autoInstall: true,\r\n  enablePerformanceMonitoring: false,\r\n  debug: false,\r\n  globalPropertyName: '$device',\r\n  enableResize: true,\r\n  enableOrientation: true,\r\n  modules: ['network', 'battery', 'geolocation'],\r\n}\r\n\r\n/**\r\n * 创建全局 Device 实例\r\n *\r\n * @param config 配置选项\r\n * @returns DeviceDetector 实例\r\n */\r\nfunction createGlobalDeviceInstance(config: DeviceEnginePluginOptions): DeviceDetector {\r\n  const {\r\n    enableResize = true,\r\n    enableOrientation = true,\r\n    modules = ['network', 'battery', 'geolocation'],\r\n    debug = false,\r\n  } = config\r\n\r\n  if (debug) {\r\n    console.warn('[Device Plugin] Creating global device instance with config:', {\r\n      enableResize,\r\n      enableOrientation,\r\n      modules,\r\n    })\r\n  }\r\n\r\n  // 创建设备检测器实例\r\n  const detector = new DeviceDetector({\r\n    enableResize,\r\n    enableOrientation,\r\n  })\r\n\r\n  // 根据配置加载模块\r\n  if (modules.includes('network')) {\r\n    detector.loadModule('network')\r\n  }\r\n  if (modules.includes('battery')) {\r\n    detector.loadModule('battery')\r\n  }\r\n  if (modules.includes('geolocation')) {\r\n    detector.loadModule('geolocation')\r\n  }\r\n\r\n  if (debug) {\r\n    console.warn('[Device Plugin] Global device instance created successfully')\r\n  }\r\n\r\n  return detector\r\n}\r\n\r\n/**\r\n * 创建 Device Engine 插件\r\n *\r\n * 将 Device 功能集成到 LDesign Engine 中，提供统一的设备检测管理体验\r\n *\r\n * @param options 插件配置选项\r\n * @returns Engine 插件实例\r\n *\r\n * @example\r\n * ```typescript\r\n * import { createDeviceEnginePlugin } from '@ldesign/device'\r\n *\r\n * const devicePlugin = createDeviceEnginePlugin({\r\n *   enableResize: true,\r\n *   enableOrientation: true,\r\n *   modules: ['network', 'battery'],\r\n *   globalPropertyName: '$device',\r\n *   enablePerformanceMonitoring: true\r\n * })\r\n *\r\n * await engine.use(devicePlugin)\r\n * ```\r\n */\r\nexport function createDeviceEnginePlugin(\r\n  options: DeviceEnginePluginOptions = {},\r\n): Plugin {\r\n  // 合并配置\r\n  const config = { ...defaultConfig, ...options }\r\n\r\n  const {\r\n    name = 'device',\r\n    version = '1.0.0',\r\n    description = 'LDesign Device Engine Plugin',\r\n    dependencies = [],\r\n    autoInstall = true,\r\n    enablePerformanceMonitoring = false,\r\n    debug = false,\r\n  } = config\r\n\r\n  if (debug) {\r\n    console.warn('[Device Plugin] createDeviceEnginePlugin called with options:', options)\r\n  }\r\n\r\n  return {\r\n    name,\r\n    version,\r\n    dependencies,\r\n\r\n    async install(context: unknown) {\r\n      try {\r\n        if (debug) {\r\n          console.warn('[Device Plugin] install method called with context:', context)\r\n        }\r\n\r\n        // 从上下文中获取引擎实例\r\n        const engineRaw = (context as { engine?: unknown }).engine ?? context\r\n        const engine = engineRaw as EngineLike\r\n\r\n        if (debug) {\r\n          console.warn('[Device Plugin] engine instance:', !!engine)\r\n        }\r\n\r\n        // 定义实际的安装逻辑\r\n        const performInstall = async () => {\r\n          engine.logger?.info(`[Device Plugin] performInstall called`)\r\n\r\n          // 获取 Vue 应用实例\r\n          const vueApp = engine.getApp() as any\r\n          if (!vueApp) {\r\n            throw new Error(\r\n              'Vue app not found. Make sure the engine has created a Vue app before installing device plugin.',\r\n            )\r\n          }\r\n\r\n          engine.logger?.info(`[Device Plugin] Vue app found, proceeding with installation`)\r\n\r\n          // 记录插件安装开始\r\n          engine.logger?.info(`Installing ${name} plugin...`, {\r\n            version,\r\n            enablePerformanceMonitoring,\r\n            description,\r\n          })\r\n\r\n          // 创建全局 Device 实例\r\n          const globalDevice = createGlobalDeviceInstance(config)\r\n\r\n          // 注册到 Engine 状态管理\r\n          if (engine.state) {\r\n            engine.state.set('device', globalDevice)\r\n            engine.logger?.info(`[Device Plugin] Device instance registered to engine state`)\r\n          }\r\n\r\n          // 安装 Vue 插件\r\n          if (autoInstall) {\r\n            vueApp.use(DevicePlugin, config)\r\n            engine.logger?.info(`[Device Plugin] Vue plugin installed`)\r\n          }\r\n\r\n          // 添加到全局属性\r\n          const globalPropertyName = config.globalPropertyName || '$device'\r\n          if (!vueApp.config?.globalProperties[globalPropertyName]) {\r\n            vueApp.config.globalProperties[globalPropertyName] = globalDevice\r\n            engine.logger?.info(`[Device Plugin] Global property ${globalPropertyName} added`)\r\n          }\r\n\r\n          // 性能监控\r\n          if (enablePerformanceMonitoring) {\r\n            const startTime = performance.now()\r\n\r\n            // 监听设备变化事件\r\n            globalDevice.on('deviceChange', (deviceInfo) => {\r\n              const endTime = performance.now()\r\n              engine.logger?.info(`[Device Plugin] Device change detected in ${endTime - startTime}ms`, deviceInfo)\r\n            })\r\n\r\n            engine.logger?.info(`[Device Plugin] Performance monitoring enabled`)\r\n          }\r\n\r\n          // 注册事件监听器\r\n          engine.events?.on('app:beforeUnmount', () => {\r\n            globalDevice.destroy()\r\n            engine.logger?.info(`[Device Plugin] Device detector destroyed on app unmount`)\r\n          })\r\n\r\n          engine.logger?.info(`[Device Plugin] ${name} plugin installed successfully`)\r\n        }\r\n\r\n        // 检查 Vue 应用是否已创建\r\n        if (engine.getApp()) {\r\n          // Vue 应用已存在，直接安装\r\n          await performInstall()\r\n        }\r\n        else {\r\n          // Vue 应用尚未创建，等待创建事件\r\n          await new Promise<void>((resolve, reject) => {\r\n            engine.events?.once('app:created', async () => {\r\n              try {\r\n                await performInstall()\r\n                resolve()\r\n              }\r\n              catch (error) {\r\n                engine.logger?.error(`[Device Plugin] Failed to install after app creation:`, error)\r\n                reject(error)\r\n              }\r\n            })\r\n          })\r\n        }\r\n      }\r\n      catch (error) {\r\n        const errorMessage = `Failed to install ${name} plugin: ${error instanceof Error ? error.message : String(error)}`\r\n\r\n        // 记录错误日志\r\n        const ctx = context as EngineContext\r\n        if (ctx.engine?.logger) {\r\n          ctx.engine.logger.error(errorMessage, { error })\r\n        }\r\n        else {\r\n          console.error(errorMessage)\r\n        }\r\n\r\n        throw new Error(errorMessage)\r\n      }\r\n    },\r\n\r\n    async uninstall(context: unknown) {\r\n      try {\r\n        if (debug) {\r\n          console.warn('[Device Plugin] uninstall method called')\r\n        }\r\n\r\n        const engineRaw = (context as { engine?: unknown }).engine ?? context\r\n        const engine = engineRaw as EngineLike\r\n\r\n        // 从状态管理中移除\r\n        if (engine.state) {\r\n          const deviceInstance = engine.state.get('device') as any\r\n          if (deviceInstance && typeof deviceInstance.destroy === 'function') {\r\n            deviceInstance.destroy()\r\n          }\r\n          engine.state.delete('device')\r\n        }\r\n\r\n        // 移除全局属性\r\n          const vueApp = engine.getApp() as any\r\n          if (vueApp) {\r\n            const globalPropertyName = config.globalPropertyName || '$device'\r\n            if (vueApp.config?.globalProperties) {\r\n              delete vueApp.config.globalProperties[globalPropertyName]\r\n            }\r\n          }\r\n\r\n        engine.logger?.info(`[Device Plugin] ${name} plugin uninstalled successfully`)\r\n      }\r\n      catch (error) {\r\n        const errorMessage = `Failed to uninstall ${name} plugin: ${error instanceof Error ? error.message : String(error)}`\r\n\r\n        const ctx = context as EngineContext\r\n        if (ctx.engine?.logger) {\r\n          ctx.engine.logger.error(errorMessage, { error })\r\n        }\r\n        else {\r\n          console.error(errorMessage)\r\n        }\r\n\r\n        throw new Error(errorMessage)\r\n      }\r\n    },\r\n  }\r\n}\r\n\r\n/**\r\n * 默认导出插件创建函数\r\n */\r\nexport default createDeviceEnginePlugin\r\n"],"names":["defaultConfig","name","version","description","dependencies","autoInstall","enablePerformanceMonitoring","debug","globalPropertyName","enableResize","enableOrientation","modules","createGlobalDeviceInstance","config","console","warn","detector","DeviceDetector","includes","loadModule","createDeviceEnginePlugin","options","install","context","engineRaw","engine","performInstall","logger","info","vueApp","getApp","Error","globalDevice","state","set","use","DevicePlugin","globalProperties","startTime","performance","now","on","deviceInfo","endTime","events","destroy","Promise","resolve","reject","once","error","errorMessage","message","String","ctx","uninstall","deviceInstance","get","delete"],"mappings":"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"}